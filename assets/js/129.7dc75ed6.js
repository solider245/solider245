(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{377:function(e,t,s){"use strict";s.r(t);var a=s(25),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("a",{attrs:{href:"https://github.com/mhinz/vim-galore",target:"_blank",rel:"noopener noreferrer"}},[e._v("English"),s("OutboundLink")],1),e._v(" | "),s("a",{attrs:{href:"http://postd.cc/?s=vim-galore",target:"_blank",rel:"noopener noreferrer"}},[e._v("Japanese"),s("OutboundLink")],1),e._v(" | "),s("a",{attrs:{href:"https://github.com/lsrdg/vim-galore",target:"_blank",rel:"noopener noreferrer"}},[e._v("Portuguese"),s("OutboundLink")],1),e._v(" | "),s("a",{attrs:{href:"http://givi.olnd.ru/vim-galore/vim-galore-ru.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Russian"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("Licensed under "),s("a",{attrs:{href:"https://creativecommons.org/licenses/by-sa/4.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("CC BY-SA 4.0"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[e._v("简介")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF-vim"}},[e._v("什么是 Vim？")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#vim-%E5%93%B2%E5%AD%A6"}},[e._v("Vim 哲学")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%85%A5%E9%97%A8"}},[e._v("入门")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%B2%BE%E7%AE%80%E7%9A%84-vimrc"}},[e._v("精简的 vimrc")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#windows-%E7%B3%BB%E7%BB%9F"}},[e._v("Windows 系统")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#linux-%E6%88%96%E8%80%85-mac-os"}},[e._v("Linux 或者 Mac OS")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%88%91%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84-vim"}},[e._v("我正在使用什么样的 Vim")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%A4%87%E5%BF%98%E5%BD%95"}},[e._v("备忘录")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("基础")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE"}},[e._v("缓冲区，窗口，标签")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B7%B2%E6%BF%80%E6%B4%BB%E5%B7%B2%E8%BD%BD%E5%85%A5%E5%B7%B2%E5%88%97%E5%87%BA%E5%B7%B2%E5%91%BD%E5%90%8D%E7%9A%84%E7%BC%93%E5%86%B2%E5%8C%BA"}},[e._v("已激活、已载入、已列出、已命名的缓冲区")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8"}},[e._v("参数列表")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8C%89%E9%94%AE%E6%98%A0%E5%B0%84"}},[e._v("按键映射")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%98%A0%E5%B0%84%E5%89%8D%E7%BD%AE%E9%94%AE"}},[e._v("映射前置键")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AF%84%E5%AD%98%E5%99%A8"}},[e._v("寄存器")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%8C%83%E5%9B%B4"}},[e._v("范围")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%A0%87%E6%B3%A8"}},[e._v("标注")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%A1%A5%E5%85%A8"}},[e._v("补全")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8A%A8%E4%BD%9C%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%96%87%E6%9C%AC%E5%AF%B9%E8%B1%A1"}},[e._v("动作，操作符，文本对象")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%87%AA%E5%8A%A8%E5%91%BD%E4%BB%A4"}},[e._v("自动命令")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2%E8%B7%B3%E8%BD%AC%E5%8E%86%E5%8F%B2"}},[e._v("变更历史，跳转历史")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%86%85%E5%AE%B9%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95"}},[e._v("内容变更历史记录")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%85%A8%E5%B1%80%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E5%B1%80%E9%83%A8%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E8%A1%A8"}},[e._v("全局位置信息表，局部位置信息表")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%AE%8F"}},[e._v("宏")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E9%A2%9C%E8%89%B2%E4%B8%BB%E9%A2%98"}},[e._v("颜色主题")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8A%98%E5%8F%A0"}},[e._v("折叠")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BC%9A%E8%AF%9D"}},[e._v("会话")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B1%80%E9%83%A8%E5%8C%96"}},[e._v("局部化")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%94%A8%E6%B3%95"}},[e._v("用法")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E7%A6%BB%E7%BA%BF%E5%B8%AE%E5%8A%A9"}},[e._v("获取离线帮助")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E7%A6%BB%E7%BA%BF%E5%B8%AE%E5%8A%A9%E8%A1%A5%E5%85%85"}},[e._v("获取离线帮助（补充）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BF%E5%B8%AE%E5%8A%A9"}},[e._v("获取在线帮助")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%91%BD%E4%BB%A4"}},[e._v("执行自动命令")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6"}},[e._v("用户自定义事件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8B%E4%BB%B6%E5%B5%8C%E5%A5%97"}},[e._v("事件嵌套")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%89%AA%E5%88%87%E6%9D%BF"}},[e._v("剪切板")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%89%AA%E8%B4%B4%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8windows-osx"}},[e._v("剪贴板的使用（Windows, OSX）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%89%AA%E8%B4%B4%E6%9D%BF%E7%9A%84%E4%BD%BF%E7%94%A8linux-bsd-"}},[e._v("剪贴板的使用（Linux, BSD, ...）")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E6%97%B6%E6%81%A2%E5%A4%8D%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE"}},[e._v("打开文件时恢复光标位置")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6"}},[e._v("临时文件")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6"}},[e._v("备份文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6"}},[e._v("交换文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%92%A4%E9%94%80%E6%96%87%E4%BB%B6"}},[e._v("撤销文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#viminfo-%E6%96%87%E4%BB%B6"}},[e._v("viminfo 文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E8%AE%BE%E7%BD%AE%E7%A4%BA%E4%BE%8B"}},[e._v("临时文件管理设置示例")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%BC%96%E8%BE%91%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6"}},[e._v("编辑远程文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86"}},[e._v("插件管理")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%A4%9A%E8%A1%8C%E7%BC%96%E8%BE%91"}},[e._v("多行编辑")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8"}},[e._v("使用外部程序和过滤器")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#cscope"}},[e._v("Cscope")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#1-%E6%9E%84%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93"}},[e._v("1. 构建数据库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#2-%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E5%BA%93"}},[e._v("2. 添加数据库")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#3-%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93"}},[e._v("3. 查询数据库")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#matchit"}},[e._v("MatchIt")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%9C%A8-vim-8-%E4%B8%AD%E5%AE%89%E8%A3%85"}},[e._v("在 Vim 8 中安装")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9C%A8-vim-7-%E6%88%96%E8%80%85%E6%9B%B4%E6%97%A9%E7%9A%84%E7%89%88%E6%9C%AC%E4%B8%AD%E5%AE%89%E8%A3%85"}},[e._v("在 Vim 7 或者更早的版本中安装")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%AE%80%E7%9F%AD%E7%9A%84%E4%BB%8B%E7%BB%8D"}},[e._v("简短的介绍")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8A%80%E5%B7%A7"}},[e._v("技巧")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E8%B7%B3%E8%87%B3%E9%80%89%E6%8B%A9%E7%9A%84%E5%8C%BA%E5%9F%9F%E5%8F%A6%E4%B8%80%E7%AB%AF"}},[e._v("跳至选择的区域另一端")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%81%AA%E6%98%8E%E5%9C%B0%E4%BD%BF%E7%94%A8-n-%E5%92%8C-n"}},[e._v("聪明地使用 n 和 N")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%81%AA%E6%98%8E%E5%9C%B0%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8E%86%E5%8F%B2"}},[e._v("聪明地使用命令行历史")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%99%BA%E8%83%BD-ctrl-l"}},[e._v("智能 Ctrl-l")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%A6%81%E7%94%A8%E9%94%99%E8%AF%AF%E6%8A%A5%E8%AD%A6%E5%A3%B0%E9%9F%B3%E5%92%8C%E5%9B%BE%E6%A0%87"}},[e._v("禁用错误报警声音和图标")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BF%AB%E9%80%9F%E7%A7%BB%E5%8A%A8%E5%BD%93%E5%89%8D%E8%A1%8C"}},[e._v("快速移动当前行")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BF%AB%E9%80%9F%E6%B7%BB%E5%8A%A0%E7%A9%BA%E8%A1%8C"}},[e._v("快速添加空行")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A3%80%E6%B5%8B"}},[e._v("运行时检测")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4"}},[e._v("查看启动时间")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#nul-%E7%AC%A6%E7%94%A8%E6%96%B0%E8%A1%8C%E8%A1%A8%E7%A4%BA"}},[e._v("NUL 符用新行表示")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BF%AB%E9%80%9F%E7%BC%96%E8%BE%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%8F"}},[e._v("快速编辑自定义宏")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%BA%90%E5%A4%B4%E6%96%87%E4%BB%B6"}},[e._v("快速跳转到源(头)文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9C%A8-gui-%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%94%B9%E5%8F%98%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F"}},[e._v("在 GUI 中快速改变字体大小")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%A0%B9%E6%8D%AE%E6%A8%A1%E5%BC%8F%E6%94%B9%E5%8F%98%E5%85%89%E6%A0%87%E7%B1%BB%E5%9E%8B"}},[e._v("根据模式改变光标类型")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E9%98%B2%E6%AD%A2%E6%B0%B4%E5%B9%B3%E6%BB%91%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%A4%B1%E5%8E%BB%E9%80%89%E6%8B%A9"}},[e._v("防止水平滑动的时候失去选择")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E9%80%89%E6%8B%A9%E5%BD%93%E5%89%8D%E8%A1%8C%E8%87%B3%E7%BB%93%E5%B0%BE%E6%8E%92%E9%99%A4%E6%8D%A2%E8%A1%8C%E7%AC%A6"}},[e._v("选择当前行至结尾，排除换行符")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E9%87%8D%E6%96%B0%E8%BD%BD%E5%85%A5%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6"}},[e._v("重新载入保存文件")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9B%B4%E5%8A%A0%E6%99%BA%E8%83%BD%E7%9A%84%E5%BD%93%E5%89%8D%E8%A1%8C%E9%AB%98%E4%BA%AE"}},[e._v("更加智能的当前行高亮")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9B%B4%E5%BF%AB%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E8%A1%A5%E5%85%A8"}},[e._v("更快的关键字补全")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2%E4%B8%BB%E9%A2%98%E7%9A%84%E9%BB%98%E8%AE%A4%E5%A4%96%E8%A7%82"}},[e._v("改变颜色主题的默认外观")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%91%BD%E4%BB%A4"}},[e._v("命令")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#global-%E5%92%8C-vglobal---%E5%9C%A8%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%E8%A1%8C%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4"}},[e._v(":global 和 :vglobal - 在所有匹配行执行命令")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#normal-%E5%92%8C-execute---%E8%84%9A%E6%9C%AC%E6%A2%A6%E4%B9%8B%E9%98%9F"}},[e._v(":normal 和 :execute - 脚本梦之队")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E9%87%8D%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF"}},[e._v("重定向消息")])])])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%B0%83%E8%AF%95"}},[e._v("调试")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%B8%B8%E8%A7%84%E5%BB%BA%E8%AE%AE"}},[e._v("常规建议")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%B0%83%E6%95%B4%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7"}},[e._v("调整日志等级")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E6%97%A5%E5%BF%97"}},[e._v("查看启动日志")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8C%E6%97%B6%E6%97%A5%E5%BF%97"}},[e._v("查看运行时日志")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#vim-%E8%84%9A%E6%9C%AC%E8%B0%83%E8%AF%95"}},[e._v("Vim 脚本调试")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%AF%AD%E6%B3%95%E6%96%87%E4%BB%B6%E8%B0%83%E8%AF%95"}},[e._v("语法文件调试")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9D%82%E9%A1%B9"}},[e._v("杂项")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E9%99%84%E5%8A%A0%E8%B5%84%E6%BA%90"}},[e._v("附加资源")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#vim-%E9%85%8D%E7%BD%AE%E9%9B%86%E5%90%88"}},[e._v("Vim 配置集合")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"}},[e._v("常见问题")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%BC%96%E8%BE%91%E5%B0%8F%E6%96%87%E4%BB%B6%E6%97%B6%E5%BE%88%E6%85%A2"}},[e._v("编辑小文件时很慢")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E7%BC%96%E8%BE%91%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E5%BE%88%E6%85%A2"}},[e._v("编辑大文件的时候很慢")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%8C%81%E7%BB%AD%E7%B2%98%E8%B4%B4%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E8%AE%BE%E7%BD%AE-paste-%E6%A8%A1%E5%BC%8F"}},[e._v("持续粘贴（为什么我每次都要设置 'paste' 模式）")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%8C%89-esc-%E5%90%8E%E6%9C%89%E5%BB%B6%E6%97%B6"}},[e._v("在终端中按 ESC 后有延时")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E6%97%A0%E6%B3%95%E9%87%8D%E5%A4%8D%E5%87%BD%E6%95%B0%E4%B8%AD%E6%89%A7%E8%A1%8C%E7%9A%84%E6%90%9C%E7%B4%A2"}},[e._v("无法重复函数中执行的搜索")])])])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%BF%9B%E9%98%B6%E9%98%85%E8%AF%BB"}},[e._v("进阶阅读")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8A%A0%E5%85%A5%E6%88%91%E4%BB%AC"}},[e._v("加入我们")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[e._v("参考资料")])])])])]),e._v(" "),s("h1",{attrs:{id:"简介-简介"}},[s("code",[e._v("[](#简介)简介")])]),e._v(" "),s("h2",{attrs:{id:"什么是-vim-什么是-vim？"}},[s("code",[e._v("[](#什么是-vim)什么是 Vim？")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/vim/vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim"),s("OutboundLink")],1),e._v(" 是一个历史悠久的文本编辑器，可以追溯到 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/QED_(text_editor)",target:"_blank",rel:"noopener noreferrer"}},[e._v("qed"),s("OutboundLink")],1),e._v("。 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Bram_Moolenaar",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bram Moolenaar"),s("OutboundLink")],1),e._v(" 于 1991 年发布初始版本。")]),e._v(" "),s("p",[e._v("Linux、Mac 用户，可以使用包管理器安装 Vim，对于 Windows 用户，可以从 "),s("a",{attrs:{href:"https://share.weiyun.com/da2be5937ac0e2bd3abc26355fad1204",target:"_blank",rel:"noopener noreferrer"}},[e._v("我的网盘"),s("OutboundLink")],1),e._v(" 下载。 该版本可轻易添加 "),s("code",[e._v("python")]),e._v(" 、"),s("code",[e._v("python3")]),e._v(" 、"),s("code",[e._v("lua")]),e._v(" 等支持，只需要安装 python、lua 即可。")]),e._v(" "),s("p",[e._v("项目在 "),s("a",{attrs:{href:"https://github.com/vim/vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github"),s("OutboundLink")],1),e._v(" 上开发，项目讨论请订阅 "),s("a",{attrs:{href:"https://groups.google.com/forum/#!forum/vim_dev",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("vim_dev")]),s("OutboundLink")],1),e._v(" 邮件列表。")]),e._v(" "),s("p",[e._v("通过阅读 "),s("a",{attrs:{href:"http://www.viemu.com/a-why-vi-vim.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why, oh WHY, do those #?@! nutheads use vi?"),s("OutboundLink")],1),e._v(" 来对 Vim 进行大致的了解。")]),e._v(" "),s("h2",{attrs:{id:"vim-哲学-vim-哲学"}},[s("code",[e._v("[](#vim-哲学)Vim 哲学")])]),e._v(" "),s("p",[e._v("Vim 采用模式编辑的理念，即它提供了多种模式，按键在不同的模式下作用不同。 你可以在 "),s("strong",[e._v("普通模式")]),e._v(" 下浏览文件，在"),s("strong",[e._v("插入模式")]),e._v("下插入文本， 在 "),s("strong",[e._v("可视模式")]),e._v("下选择行，在"),s("strong",[e._v("命令模式")]),e._v("下执行命令等等。起初这听起来可能很复杂， 但是这有一个很大的优点：不需要通过同时按住多个键来完成操作， 大多数时候你只需要依次按下这些按键即可。越常用的操作，所需要的按键数量越少。")]),e._v(" "),s("p",[e._v("和模式编辑紧密相连的概念是 "),s("strong",[e._v("操作符")]),e._v(" 和 "),s("strong",[e._v("动作")]),e._v("。"),s("strong",[e._v("操作符")]),e._v(" 指的是开始某个行为， 例如：修改、删除或者选择文本，之后你要用一个 "),s("strong",[e._v("动作")]),e._v(" 来指定需要操作的文本区域。 比如，要改变括号内的文本，需要执行 "),s("code",[e._v("ci(")]),e._v(" （读做 "),s("code",[e._v("change inner parentheses")]),e._v("）； 删除整个段落的内容，需要执行 "),s("code",[e._v("dap")]),e._v(" （读做："),s("code",[e._v("delete around paragraph")]),e._v("）。")]),e._v(" "),s("p",[e._v("如果你能看见 Vim 老司机操作，你会发现他们使用 Vim 脚本语言就如同钢琴师弹钢琴一样。复杂的操作只需要几个按键就能完成。他们甚至不用刻意去想，因为这已经成为"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Muscle_memory",target:"_blank",rel:"noopener noreferrer"}},[e._v("肌肉记忆"),s("OutboundLink")],1),e._v("了。这减少"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cognitive_load",target:"_blank",rel:"noopener noreferrer"}},[e._v("认识负荷"),s("OutboundLink")],1),e._v("并帮助人们专注于实际任务。")]),e._v(" "),s("h2",{attrs:{id:"入门-入门"}},[s("code",[e._v("[](#入门)入门")])]),e._v(" "),s("p",[e._v("Vim 自带一个交互式的教程，内含你需要了解的最基础的信息，你可以通过终端运行以下命令打开教程：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ vimtutor\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("不要因为这个看上去很无聊而跳过，按照此教程多练习。你以前用的 IDE 或者其他编辑器很少是有“模式”概念的，因此一开始你会很难适应模式切换。但是你 Vim 使用的越多，"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Muscle_memory",target:"_blank",rel:"noopener noreferrer"}},[e._v("肌肉记忆"),s("OutboundLink")],1),e._v(" 将越容易形成。")]),e._v(" "),s("p",[e._v("Vim 基于一个 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Vi",target:"_blank",rel:"noopener noreferrer"}},[e._v("vi"),s("OutboundLink")],1),e._v(" 克隆，叫做 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Stevie_(text_editor)",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stevie"),s("OutboundLink")],1),e._v('，支持两种运行模式："compatible" 和 "nocompatible"。在兼容模式下运行 Vim 意味着使用 vi 的默认设置，而不是 Vim 的默认设置。除非你新建一个用户的 '),s("code",[e._v("vimrc")]),e._v(" 或者使用 "),s("code",[e._v("vim -N")]),e._v(" 命令启动 Vim，否则就是在兼容模式下运行 Vim！请大家不要在兼容模式下运行 Vim。")]),e._v(" "),s("p",[e._v("下一步")]),e._v(" "),s("ol",[s("li",[e._v("创建你自己的 "),s("a",{attrs:{href:"#%E7%B2%BE%E7%AE%80%E7%9A%84-vimrc"}},[e._v("vimrc")]),e._v("。")]),e._v(" "),s("li",[e._v("在第一周准备"),s("a",{attrs:{href:"#%E5%A4%87%E5%BF%98%E5%BD%95"}},[e._v("备忘录")]),e._v("。")]),e._v(" "),s("li",[e._v("通读"),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80-1"}},[e._v("基础")]),e._v("章节了解 Vim 还有哪些功能。")]),e._v(" "),s("li",[e._v("按需学习！Vim 是学不完的。如果你遇到了问题，先上网寻找解决方案，你的问题可能已经被解决了。Vim 拥有大量的参考文档，知道如何利用这些参考文档很有必要："),s("a",{attrs:{href:"#%E8%8E%B7%E5%8F%96%E7%A6%BB%E7%BA%BF%E5%B8%AE%E5%8A%A9"}},[e._v("获取离线帮助")]),e._v("。")]),e._v(" "),s("li",[e._v("浏览"),s("a",{attrs:{href:"#%E9%99%84%E5%8A%A0%E8%B5%84%E6%BA%90"}},[e._v("附加资源")]),e._v("。")])]),e._v(" "),s("p",[e._v("最后一个建议：使用"),s("a",{attrs:{href:"#%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86"}},[e._v("插件")]),e._v("之前，请先掌握 Vim 的基本操作。很多插件都只是对 Vim 自带功能的封装。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"精简的-vimrc-精简的-vimrc"}},[s("code",[e._v("[](#精简的-vimrc)精简的 vimrc")])]),e._v(" "),s("p",[e._v("Vim 启动是会按照一定的优先顺序来搜索配置文件，这个顺序，可以通过 "),s("code",[e._v(":version")]),e._v(" 命令查看。下面分 Windows 系统， 和 *niux 系统分别来说明 Vim 是如何载入配置文件的。")]),e._v(" "),s("h3",{attrs:{id:"windows-系统-windows-系统"}},[s("code",[e._v("[](#windows-系统)Windows 系统")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('   system vimrc file: "$VIM\\vimrc"\n     user vimrc file: "$HOME\\_vimrc"\n 2nd user vimrc file: "$HOME\\vimfiles\\vimrc"\n 3rd user vimrc file: "$VIM\\_vimrc"\n      user exrc file: "$HOME\\_exrc"\n  2nd user exrc file: "$VIM\\_exrc"\n  system gvimrc file: "$VIM\\gvimrc"\n    user gvimrc file: "$HOME\\_gvimrc"\n2nd user gvimrc file: "$HOME\\vimfiles\\gvimrc"\n3rd user gvimrc file: "$VIM\\_gvimrc"\n       defaults file: "$VIMRUNTIME\\defaults.vim"\n    system menu file: "$VIMRUNTIME\\menu.vim"\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("我们们只看上面这一段，Vim 会优先读取 user vimrc file: "),s("code",[e._v("$HOME\\_vimrc")]),e._v(", 当这一文件不存在是， Vim 再去寻找 2nd user vimrc file: "),s("code",[e._v("$HOME\\vimfiles\\vimrc")]),e._v("; 倘若这个文件还是不存在，那么 Vim 会去继续寻找 3rd user vimrc file: "),s("code",[e._v("$VIM\\_vimrc")]),e._v("。 了解以上顺序后，就不会再因为 Vim 总是不读取配置文件而感到烦恼了。")]),e._v(" "),s("h3",{attrs:{id:"linux-或者-mac-os-linux-或者-mac-os"}},[s("code",[e._v("[](#linux-或者-mac-os)Linux 或者 Mac OS")])]),e._v(" "),s("p",[e._v("同 Windows 系统类似，也可以使用 "),s("code",[e._v(":version")]),e._v(" 命令查看 vim 载入配置的优先顺序。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('     系统 vimrc 文件: "/etc/vimrc"\n     用户 vimrc 文件: "$HOME/.vimrc"\n 第二用户 vimrc 文件: "~/.vim/vimrc"\n      用户 exrc 文件: "$HOME/.exrc"\n       defaults file: "$VIMRUNTIME/defaults.vim"\n         $VIM 预设值: "/etc"\n  $VIMRUNTIME 预设值: "/usr/share/vim/vim81"\n\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("你可以在网上找到许多精简的 vimrc 配置文件，我的版本可能并不是最简单的版本，但是我的版本提供了一套我认为良好的，非常适合入门的设置。")]),e._v(" "),s("p",[e._v("最终你需要阅读完那些设置，然后自行决定需要使用哪些。😃")]),e._v(" "),s("p",[e._v("精简的 vimrc 地址："),s("a",{attrs:{href:"https://github.com/wsdjeg/vim-galore-zh_cn/blob/master/contents/minimal-vimrc.vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("minimal-vimrc"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("如果你有兴趣，这里是我（原作者）的 "),s("a",{attrs:{href:"https://github.com/mhinz/dotfiles/blob/master/.vim/vimrc",target:"_blank",rel:"noopener noreferrer"}},[e._v("vimrc"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[s("strong",[e._v("建议")]),e._v('：大多数插件作者都维护不止一个插件并且将他们的 vimrc 放在 Github 上展示（通常放在叫做 "vim-config" 或者 "dotfiles" 的仓库中），所以当你发现你喜欢的插件时，去插件维护者的 Github 主页看看有没有这样的仓库。')]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"我正在使用什么样的-vim-我正在使用什么样的-vim"}},[s("code",[e._v("[](#我正在使用什么样的-vim)我正在使用什么样的 Vim")])]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":version")]),e._v(" 命令将向你展示当前正在运行的 Vim 的所有相关信息，包括它是如何编译的。")]),e._v(" "),s("p",[e._v("第一行告诉你这个二进制文件的编译时间和版本号，比如：7.4。接下来的一行呈现 "),s("code",[e._v("Included patches: 1-1051")]),e._v("，这是补丁版本包。因此你 Vim 确切的版本号是 7.4.1051。")]),e._v(" "),s("p",[e._v("另一行显示着一些像 "),s("code",[e._v("Tiny version without GUI")]),e._v(" 或者 "),s("code",[e._v("Huge version with GUI")]),e._v(" 的信息。很显然这些信息告诉你当前的 Vim 是否支持 GUI，例如：从终端中运行 "),s("code",[e._v("gvim")]),e._v(" 或者从终端模拟器中的 Vim 内运行 "),s("code",[e._v(":gui")]),e._v(" 命令。另一个重要的信息是 "),s("code",[e._v("Tiny")]),e._v(" 和 "),s("code",[e._v("Huge")]),e._v("。Vim 的特性集区分被叫做 "),s("code",[e._v("tiny")]),e._v("，"),s("code",[e._v("small")]),e._v("，"),s("code",[e._v("normal")]),e._v("，"),s("code",[e._v("big")]),e._v(" and "),s("code",[e._v("huge")]),e._v("，所有的都实现不同的功能子集。")]),e._v(" "),s("p",[s("code",[e._v(":version")]),e._v(" 主要的输出内容是特性列表。"),s("code",[e._v("+clipboard")]),e._v(" 意味这剪贴板功能被编译支持了，"),s("code",[e._v("-clipboard")]),e._v(" 意味着剪贴板特性没有被编译支持。")]),e._v(" "),s("p",[e._v("一些功能特性需要编译支持才能正常工作。例如：为了让 "),s("code",[e._v(":prof")]),e._v(" 工作，你需要使用 "),s("code",[e._v("huge")]),e._v(" 模式编译的 Vim，因为那种模式启用了 "),s("code",[e._v("+profile")]),e._v(" 特性。")]),e._v(" "),s("p",[e._v("如果你的输出情况并不是那样，并且你是从包管理器安装 Vim 的，确保你安装了 "),s("code",[e._v("vim-x")]),e._v("，"),s("code",[e._v("vim-x11")]),e._v("，"),s("code",[e._v("vim-gtk")]),e._v("，"),s("code",[e._v("vim-gnome")]),e._v(" 这些包或者相似的，因为这些包通常都是 "),s("code",[e._v("huge")]),e._v(" 模式编译的。")]),e._v(" "),s("p",[e._v("你也可以运行下面这段代码来测试 Vim 版本以及功能支持：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\" Do something if running at least Vim 7.4.42 with +profile enabled.\nif (v:version > 704 || v:version == 704 && has('patch42')) && has('profile')\n  \"")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" stuff\nendif\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("相关帮助：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(":h :version\n:h feature-list\n:h +feature-list\n:h has-patch\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"备忘录-备忘录"}},[s("code",[e._v("[](#备忘录)备忘录")])]),e._v(" "),s("p",[e._v("为了避免版权问题，我只贴出链接：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://www.nathael.org/Data/vi-vim-cheat-sheet.svg",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.nathael.org/Data/vi-vim-cheat-sheet.svg"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("或者在 Vim 中快速打开备忘录："),s("a",{attrs:{href:"https://github.com/lifepillar/vim-cheat40",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim-cheat40"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E7%AE%80%E4%BB%8B"}},[e._v("⤴️")])]),e._v(" "),s("h1",{attrs:{id:"基础-基础"}},[s("code",[e._v("[](#基础)基础")])]),e._v(" "),s("h2",{attrs:{id:"缓冲区窗口标签-缓冲区，窗口，标签"}},[s("code",[e._v("[](#缓冲区窗口标签)缓冲区，窗口，标签")])]),e._v(" "),s("p",[e._v("Vim 是一个文本编辑器。每次文本都是作为"),s("strong",[e._v("缓冲区")]),e._v("的一部分显示的。每一份文件都是在他们自己独有的缓冲区打开的，插件显示的内容也在它们自己的缓冲区中。")]),e._v(" "),s("p",[e._v("缓冲区有很多属性，比如这个缓冲区的内容是否可以修改，或者这个缓冲区是否和文件相关联，是否需要同步保存到磁盘上。")]),e._v(" "),s("p",[s("strong",[e._v("窗口")]),e._v(" 是缓冲区上一层的视窗。如果你想同时查看几个文件或者查看同一文件的不同位置，那样你会需要窗口。")]),e._v(" "),s("p",[e._v("请别把他们叫做 "),s("em",[e._v("分屏")]),e._v(" 。你可以把一个窗口分割成两个，但是这并没有让这两个窗口完全 "),s("em",[e._v("分离")]),e._v(" 。")]),e._v(" "),s("p",[e._v("窗口可以水平或者竖直分割并且现有窗口的高度和宽度都是可以被调节设置的，因此，如果你需要多种窗口布局，请考虑使用标签。")]),e._v(" "),s("p",[s("strong",[e._v("标签页")]),e._v(" （标签）是窗口的集合。因此当你想使用多种窗口布局时候请使用标签。")]),e._v(" "),s("p",[e._v("简单的说，如果你启动 Vim 的时候没有附带任何参数，你会得到一个包含着一个呈现一个缓冲区的窗口的标签。")]),e._v(" "),s("p",[e._v("顺带提一下，缓冲区列表是全局可见的，你可以在任何标签中访问任何一个缓冲区。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"已激活已载入已列出已命名的缓冲区-已激活、已载入、已列出、已命名的缓冲区"}},[s("code",[e._v("[](#已激活已载入已列出已命名的缓冲区)已激活、已载入、已列出、已命名的缓冲区")])]),e._v(" "),s("p",[e._v("用类似 "),s("code",[e._v("vim file1")]),e._v(" 的命令启动 Vim 。这个文件的内容将会被加载到缓冲区中，你现在有一个"),s("strong",[e._v("已载入的缓冲区")]),e._v("。如果你在 Vim 中保存这个文件，缓冲区内容将会被同步到磁盘上（写回文件中）。")]),e._v(" "),s("p",[e._v("由于这个缓冲区也在一个窗口上显示，所以他也是一个"),s("strong",[e._v("已激活的缓冲区")]),e._v("。如果你现在通过 "),s("code",[e._v(":e file2")]),e._v(" 命令加载另一个文件，"),s("code",[e._v("file1")]),e._v(" 将会变成一个"),s("strong",[e._v("隐藏的缓冲区")]),e._v("，并且 "),s("code",[e._v("file2")]),e._v(" 变成已激活缓冲区。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":ls")]),e._v(" 我们能够列出所有可以列出的缓冲区。插件缓冲区和帮助缓冲区通常被标记为不可以列出的缓冲区，因为那并不是你经常需要在编辑器中编辑的常规文件。通过 "),s("code",[e._v(":ls!")]),e._v(" 命令可以显示被放入缓冲区列表的和未被放入列表的缓冲区。")]),e._v(" "),s("p",[s("strong",[e._v("未命名的缓冲区")]),e._v("是一种没有关联特定文件的缓冲区，这种缓冲区经常被插件使用。比如 "),s("code",[e._v(":enew")]),e._v(" 将会创建一个无名临时缓冲区。添加一些文本然后使用 "),s("code",[e._v(":w /tmp/foo")]),e._v(" 将他写入到磁盘，这样这个缓冲区就会变成一个"),s("strong",[e._v("已命名的缓冲区")]),e._v("。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"参数列表-参数列表"}},[s("code",[e._v("[](#参数列表)参数列表")])]),e._v(" "),s("p",[s("a",{attrs:{href:"#%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AA%97%E5%8F%A3%E6%A0%87%E7%AD%BE"}},[e._v("全局缓冲区列表")]),e._v("是 Vim 的特性。在这之前的 vi 中，仅仅只有参数列表，参数列表在 Vim 中依旧可以使用。")]),e._v(" "),s("p",[e._v("每一个通过 shell 命令传递给 Vim 的文件名都被记录在一个参数列表中。可以有多个参数列表：默认情况下所有参数都被放在全局参数列表下，但是你可以使用 "),s("code",[e._v(":arglocal")]),e._v(" 命令去创建一个新的本地窗口的参数列表。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":args")]),e._v(" 命令可以列出当前参数。使用 "),s("code",[e._v(":next")]),e._v("，"),s("code",[e._v(":previous")]),e._v("，"),s("code",[e._v(":first")]),e._v("，"),s("code",[e._v(":last")]),e._v(" 命令可以在切换在参数列表中的文件。通过使用 "),s("code",[e._v(":argadd")]),e._v("，"),s("code",[e._v(":argdelete")]),e._v(" 或者 "),s("code",[e._v(":args")]),e._v(" 等命令加上一个文件列表可以改变参数列表。")]),e._v(" "),s("p",[e._v("偏爱缓冲区列表还是参数列表完全是个人选择，我的印象中大多数人都是使用缓冲区列表的。")]),e._v(" "),s("p",[e._v("然而参数列表在有些情况下被大量使用：批处理 使用 "),s("code",[e._v(":argdo")]),e._v("！ 一个简单的重构例子：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":args **/*."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("ch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n:argdo %s/foo/bar/ge "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" update\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这条命令将替换掉当前目录下以及当前目录的子目录中所有的 C 源文件和头文件中的“foo”，并用“bar”代替。")]),e._v(" "),s("p",[e._v("相关帮助："),s("code",[e._v(":h argument-list")])]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"按键映射-按键映射"}},[s("code",[e._v("[](#按键映射)按键映射")])]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":map")]),e._v(" 命令家族你可以定义属于你自己的快捷键。该家族的每一个命令都限定在特定的模式下。从技术上来说 Vim 自带高达 12 中模式，其中 6 种可以被映射。另外一些命令作用于多种模式：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("递归")]),e._v(" "),s("th",[e._v("非递归")]),e._v(" "),s("th",[e._v("模式")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v(":map")])]),e._v(" "),s("td",[s("code",[e._v(":noremap")])]),e._v(" "),s("td",[e._v("normal, visual, operator-pending")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":nmap")])]),e._v(" "),s("td",[s("code",[e._v(":nnoremap")])]),e._v(" "),s("td",[e._v("normal")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":xmap")])]),e._v(" "),s("td",[s("code",[e._v(":xnoremap")])]),e._v(" "),s("td",[e._v("visual")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":cmap")])]),e._v(" "),s("td",[s("code",[e._v(":cnoremap")])]),e._v(" "),s("td",[e._v("command-line")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":omap")])]),e._v(" "),s("td",[s("code",[e._v(":onoremap")])]),e._v(" "),s("td",[e._v("operator-pending")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":imap")])]),e._v(" "),s("td",[s("code",[e._v(":inoremap")])]),e._v(" "),s("td",[e._v("insert")])])])]),e._v(" "),s("p",[e._v("例如：这个自定义的快捷键只在普通模式下工作。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":nmap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("space"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" :echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("使用 "),s("code",[e._v(":nunmap <space>")]),e._v(" 可以取消这个映射。")]),e._v(" "),s("p",[e._v("对于更少数，不常见的模式（或者他们的组合），查看 "),s("code",[e._v(":h map-modes")]),e._v("。")]),e._v(" "),s("p",[e._v("到现在为止还好，对新手而言有一个问题会困扰他们："),s("code",[e._v(":nmap")]),e._v(" 是"),s("strong",[e._v("递归执行")]),e._v("的！结果是，右边执行可能的映射。")]),e._v(" "),s("p",[e._v("你自定义了一个简单的映射去输出“Foo”：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":nmap b :echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Foo"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("但是如果你想要映射 "),s("code",[e._v("b")]),e._v(" （回退一个单词）的默认功能到一个键上呢？")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":nmap a b\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果你敲击a，我们期望着光标回退到上一个单词，但是实际情况是“Foo”被输出到命令行里！因为在右边，"),s("code",[e._v("b")]),e._v(" 已经被映射到别的行为上了，换句话说就是 "),s("code",[e._v(':echo "Foo"<cr>')]),e._v("。")]),e._v(" "),s("p",[e._v("解决此问题的正确方法是使用一种 "),s("em",[e._v("非递归")]),e._v(" 的映射代替：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":nnoremap a b\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("经验法则：除非递归是必须的，否则总是使用非递归映射。")]),e._v(" "),s("p",[e._v("通过不给一个右值来检查你的映射。比如"),s("code",[e._v(":nmap")]),e._v(" 显示所以普通模式下的映射，"),s("code",[e._v(":nmap <leader>")]),e._v(" 显示所有以 "),s("code",[e._v("<leader>")]),e._v(" 键开头的普通模式下的映射。")]),e._v(" "),s("p",[e._v("如果你想禁止用标准映射，把他们映射到特殊字符 "),s("code",[e._v("<nop>")]),e._v(" 上，例如："),s("code",[e._v(":noremap <left> <nop>")]),e._v("。")]),e._v(" "),s("p",[e._v("相关帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h key-notation\n:h mapping\n:h 05.3\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"映射前置键-映射前置键"}},[s("code",[e._v("[](#映射前置键)映射前置键")])]),e._v(" "),s("p",[e._v("映射前置键（Leader 键）本身就是一个按键映射，默认为 \\。我们可以通过在 "),s("code",[e._v("map")]),e._v(" 中调用 "),s("code",[e._v("<leader>")]),e._v(" 来为把它添加到其他按键映射中。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("h :helpgrep"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("space"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样，我们只需要先按 \\ 然后连续按 \\h 就可以激活这个映射 "),s("code",[e._v(":helpgrep<space>")]),e._v("。如果你想通过先按 空格 键来触发，只需要这样做：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" g:mapleader "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("h :helpgrep"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("space"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("此处建议使用 "),s("code",[e._v("g:mapleader")]),e._v("，因为在 Vim 脚本中，函数外的变量缺省的作用域是全局变量，但是在函数内缺省作用域是局部变量，而设置快捷键前缀需要修改全局变量 "),s("code",[e._v("g:mapleader")]),e._v(" 的值。")]),e._v(" "),s("p",[e._v("另外，还有一个叫 "),s("code",[e._v("<localleader>")]),e._v(" 的，可以把它理解为局部环境中的 "),s("code",[e._v("<leader>")]),e._v("，默认值依然为 \\。当我们需要只对某一个条件下（比如，特定文件类型的插件）的缓冲区设置特别的 "),s("code",[e._v("<leader>")]),e._v(" 键，那么我们就可以通过修改当前环境下的 "),s("code",[e._v("<localleader>")]),e._v(" 来实现。")]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：如果你打算设置 Leader 键，请确保在设置按键映射之前，先设置好 Leader 键。如果你先设置了含有 Leader 键的映射，然后又修改了 Leader 键，那么之前映射内的 Leader 键是不会因此而改变的。你可以通过执行 "),s("code",[e._v(":nmap <leader>")]),e._v(" 来查看普通模式中已绑定给 Leader 键的所有映射。")]),e._v(" "),s("p",[e._v("请参阅 "),s("code",[e._v(":h mapleader")]),e._v(" 与 "),s("code",[e._v(":h maploacalleader")]),e._v(" 来获取更多帮助。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"寄存器-寄存器"}},[s("code",[e._v("[](#寄存器)寄存器")])]),e._v(" "),s("p",[e._v("寄存器就是存储文本的地方。我们常用的「复制」操作就是把文本存储到寄存器，「 粘贴」 操作就是把文本从寄存器中读出来。顺便，在 Vim 中复制的快捷键是 y，粘贴的快捷键是 p。")]),e._v(" "),s("p",[e._v("Vim 为我们提供了如下的寄存器：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("类型")]),e._v(" "),s("th",[e._v("标识")]),e._v(" "),s("th",[e._v("读写者")]),e._v(" "),s("th",[e._v("是否为只读")]),e._v(" "),s("th",[e._v("包含的字符来源")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Unnamed")]),e._v(" "),s("td",[s("code",[e._v('"')])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("最近一次的复制或删除操作 ("),s("code",[e._v("d")]),e._v(", "),s("code",[e._v("c")]),e._v(", "),s("code",[e._v("s")]),e._v(", "),s("code",[e._v("x")]),e._v(", "),s("code",[e._v("y")]),e._v(")")])]),e._v(" "),s("tr",[s("td",[e._v("Numbered")]),e._v(" "),s("td",[s("code",[e._v("0")]),e._v("至"),s("code",[e._v("9")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("寄存器 "),s("code",[e._v("0")]),e._v(": 最近一次复制。寄存器 "),s("code",[e._v("1")]),e._v(": 最近一次删除。寄存器 "),s("code",[e._v("2")]),e._v(": 倒数第二次删除，以此类推。对于寄存器 "),s("code",[e._v("1")]),e._v(" 至 "),s("code",[e._v("9")]),e._v("，他们其实是只读的最多包含 9 个元素的队列。这里的队列即为数据类型 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)",target:"_blank",rel:"noopener noreferrer"}},[e._v("queue"),s("OutboundLink")],1)])]),e._v(" "),s("tr",[s("td",[e._v("Small delete")]),e._v(" "),s("td",[s("code",[e._v("-")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("最近一次行内删除")])]),e._v(" "),s("tr",[s("td",[e._v("Named")]),e._v(" "),s("td",[s("code",[e._v("a")]),e._v("至"),s("code",[e._v("z")]),e._v(", "),s("code",[e._v("A")]),e._v("至"),s("code",[e._v("Z")])]),e._v(" "),s("td",[e._v("用户")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("如果你通过复制操作存储文本至寄存器 "),s("code",[e._v("a")]),e._v("，那么 "),s("code",[e._v("a")]),e._v(" 中的文本就会被完全覆盖。如果你存储至 "),s("code",[e._v("A")]),e._v("，那么会将文本添加给寄存器 "),s("code",[e._v("a")]),e._v("，不会覆盖之前已有的文本")])]),e._v(" "),s("tr",[s("td",[e._v("Read-only")]),e._v(" "),s("td",[s("code",[e._v(":")]),e._v("与"),s("code",[e._v(".")]),e._v("和"),s("code",[e._v("%")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("是")]),e._v(" "),s("td",[s("code",[e._v(":")]),e._v(": 最近一次使用的命令，"),s("code",[e._v(".")]),e._v(": 最近一次添加的文本，"),s("code",[e._v("%")]),e._v(": 当前的文件名")])]),e._v(" "),s("tr",[s("td",[e._v("Alternate buffer")]),e._v(" "),s("td",[s("code",[e._v("#")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("大部分情况下，这个寄存器是当前窗口中，上一次访问的缓冲区。请参阅 "),s("code",[e._v(":h alternate-file")]),e._v(" 来获取更多帮助")])]),e._v(" "),s("tr",[s("td",[e._v("Expression")]),e._v(" "),s("td",[s("code",[e._v("=")])]),e._v(" "),s("td",[e._v("用户")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("复制 shell 代码时，这个寄存器用于存储代码片段的执行结果。比如，在插入模式下复制 "),s("code",[e._v("<c-r>=5+5<cr>")]),e._v("，那么这个寄存器就会存入 10")])]),e._v(" "),s("tr",[s("td",[e._v("Selection")]),e._v(" "),s("td",[s("code",[e._v("+")]),e._v("和"),s("code",[e._v("*")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[s("code",[e._v("*")]),e._v(" 和 "),s("code",[e._v("+")]),e._v(" 是 "),s("a",{attrs:{href:"#%E5%89%AA%E8%B4%B4%E6%9D%BF"}},[e._v("剪贴板")]),e._v(" 寄存器")])]),e._v(" "),s("tr",[s("td",[e._v("Drop")]),e._v(" "),s("td",[s("code",[e._v("~")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("是")]),e._v(" "),s("td",[e._v('最后一次拖拽添加至 Vim 的文本（需要 "+dnd" 支持，暂时只支持 GTK GUI。请参阅 '),s("code",[e._v(":help dnd")]),e._v(" 及 "),s("code",[e._v(":help quote~")]),e._v("）")])]),e._v(" "),s("tr",[s("td",[e._v("Black hole")]),e._v(" "),s("td",[s("code",[e._v("_")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("一般称为黑洞寄存器。对于当前操作，如果你不希望在其他寄存器中保留文本，那就在命令前加上 "),s("code",[e._v("_")]),e._v("。比如，"),s("code",[e._v('"_dd')]),e._v(" 命令不会将文本放到寄存器 "),s("code",[e._v('"')]),e._v("、"),s("code",[e._v("1")]),e._v("、"),s("code",[e._v("+")]),e._v(" 或 "),s("code",[e._v("*")]),e._v(" 中")])]),e._v(" "),s("tr",[s("td",[e._v("Last search pattern")]),e._v(" "),s("td",[s("code",[e._v("/")])]),e._v(" "),s("td",[e._v("vim")]),e._v(" "),s("td",[e._v("否")]),e._v(" "),s("td",[e._v("最近一次通过 "),s("code",[e._v("/")]),e._v("、"),s("code",[e._v("?")]),e._v(" 或 "),s("code",[e._v(":global")]),e._v(" 等命令调用的匹配条件")])])])]),e._v(" "),s("p",[e._v("只要不是只读的寄存器，用户都有权限修改它的内容，比如：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":let @/ "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'register'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('这样，我们按 n 的时候就会跳转到单词"register" 出现的地方。')]),e._v(" "),s("p",[e._v("有些时候，你的操作可能已经修改了寄存器，而你没有察觉到。请参阅 "),s("code",[e._v(":h registers")]),e._v(" 获取更多帮助。")]),e._v(" "),s("p",[e._v("上面提到过，复制的命令是 y，粘贴的命令是 p 或者 P。但请注意，Vim 会区分「字符选取」与「行选取」。请参阅 "),s("code",[e._v(":h linewise")]),e._v(" 获取更多帮助。")]),e._v(" "),s("p",[s("strong",[e._v("行选取")]),e._v("： 命令 "),s("code",[e._v("yy")]),e._v(" 或 "),s("code",[e._v("Y")]),e._v(" 都是复制当前行。这时移动光标至其他位置，按下 "),s("code",[e._v("p")]),e._v(" 就可以在光标下方粘贴复制的行，按下 "),s("code",[e._v("P")]),e._v(" 就可以在光标上方粘贴至复制的行。")]),e._v(" "),s("p",[s("strong",[e._v("字符选取")]),e._v("： 命令 "),s("code",[e._v("0yw")]),e._v(" 可以复制第一个单词。这时移动光标至其他位置，按下 "),s("code",[e._v("p")]),e._v(" 就可以在当前行、光标后的位置粘贴单词，按下 "),s("code",[e._v("P")]),e._v(" 就可以在当前行、光标前的位置粘贴单词。")]),e._v(" "),s("p",[s("strong",[e._v("将文本存到指定的寄存器中")]),e._v("： 命令 "),s("code",[e._v('"aY')]),e._v(" 可以将当前行复制，并存储到寄存器 "),s("code",[e._v("a")]),e._v(" 中。这时移动光标至其他位置，通过命令 "),s("code",[e._v('"AY')]),e._v(" 就可以把这一行的内容扩展到寄存器 "),s("code",[e._v("a")]),e._v(" 中，而之前存储的内容也不会丢失。")]),e._v(" "),s("p",[e._v("为了便于理解和记忆，建议大家现在就试一试上面提到的这些操作。操作过程中，你可以随时通过 "),s("code",[e._v(":reg")]),e._v(" 来查看寄存器的变化。")]),e._v(" "),s("p",[s("strong",[e._v("有趣的是")]),e._v("： 在 Vim 中，"),s("code",[e._v("y")]),e._v(' 是复制命令，源于单词 "yanking"。而在 Emacs 中，"yanking" 代表的是粘贴（或者说，重新插入刚才删掉的内容），而并不是复制。')]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"范围-范围"}},[s("code",[e._v("[](#范围)范围")])]),e._v(" "),s("p",[e._v("范围 (Ranges) 其实很好理解，但很多 Vim 用户的理解不到位。")]),e._v(" "),s("ul",[s("li",[e._v("很多命令都可以加一个数字，用于指明操作范围")]),e._v(" "),s("li",[e._v("范围可以是一个行号，用于指定某一行")]),e._v(" "),s("li",[e._v("范围也可以是一对通过 "),s("code",[e._v(",")]),e._v(" 或 "),s("code",[e._v(";")]),e._v(" 分割的行号")]),e._v(" "),s("li",[e._v("大部分命令，默认只作用于当前行")]),e._v(" "),s("li",[e._v("只有 "),s("code",[e._v(":write")]),e._v(" 和 "),s("code",[e._v(":global")]),e._v(" 是默认作用于所有行的")])]),e._v(" "),s("p",[e._v("范围的使用是十分直观的。以下为一些例子（其中，"),s("code",[e._v(":d")]),e._v(" 为 "),s("code",[e._v(":delete")]),e._v(" 的缩写）：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("命令")]),e._v(" "),s("th",[e._v("操作的行")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v(":d")])]),e._v(" "),s("td",[e._v("当前行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":.d")])]),e._v(" "),s("td",[e._v("当前行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":1d")])]),e._v(" "),s("td",[e._v("第一行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":$d")])]),e._v(" "),s("td",[e._v("最后一行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":1,$d")])]),e._v(" "),s("td",[e._v("所有行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":%d")])]),e._v(" "),s("td",[e._v("所有行（这是 "),s("code",[e._v("1,$")]),e._v(" 的语法糖）")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":.,5d")])]),e._v(" "),s("td",[e._v("当前行至第 5 行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":,5d")])]),e._v(" "),s("td",[e._v("同样是当前行至第 5 行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":,+3d")])]),e._v(" "),s("td",[e._v("当前行及接下来的 3 行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":1,+3d")])]),e._v(" "),s("td",[e._v("第一行至当前行再加 3 行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":,-3d")])]),e._v(" "),s("td",[e._v("当前行及向上的 3 行（Vim 会弹出提示信息，因为这是一个保留的范围）")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":3,'xdelete")])]),e._v(" "),s("td",[e._v("第三行至"),s("a",{attrs:{href:"#%E6%A0%87%E6%B3%A8"}},[e._v("标注")]),e._v(" 为 x 的那一行")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":/^foo/,$delete")])]),e._v(" "),s("td",[e._v('当前行以下，以字符 "foo" 开头的那一行至结尾')])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":/^foo/+1,$delete")])]),e._v(" "),s("td",[e._v('当前行以下，以字符 "foo" 开头的那一行的下一行至结尾')])])])]),e._v(" "),s("p",[e._v("需要注意的是，"),s("code",[e._v(";")]),e._v(" 也可以用于表示范围。区别在于，"),s("code",[e._v("a,b")]),e._v(" 的 "),s("code",[e._v("b")]),e._v(" 是以当前行作为参考的。而 "),s("code",[e._v("a;b")]),e._v(" 的 "),s("code",[e._v("b")]),e._v(" 是以 "),s("code",[e._v("a")]),e._v(" 行作为参考的。举个例子，现在你的光标在第 5 行。这时 "),s("code",[e._v(":1,+1d")]),e._v(" 会删除第 1 行至第 6 行，而 "),s("code",[e._v(":1;+1d")]),e._v(" 会删除第 1 行和第 2 行。")]),e._v(" "),s("p",[e._v("如果你想设置多个寻找条件，只需要在条件前加上 "),s("code",[e._v("/")]),e._v("，比如：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":/foo//bar//quux/d\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('这就会删除当前行之后的某一行。定位方式是，先在当前行之后寻找第一个包含 "foo" 字符的那一行，然后在找到的这一行之后寻找第一个包含 "bar" 字符的那一行，然后再在找到的这一行之后寻找第一个包含 "quux" 的那一行。删除的就是最后找到的这一行。')]),e._v(" "),s("p",[e._v("有时，Vim 会在命令前自动添加范围。举个例子，如果你先通过 "),s("code",[e._v("V")]),e._v(" 命令进入行选取模式，选中一些行后按下 "),s("code",[e._v(":")]),e._v(" 进入命令模式，这时候你会发现 Vim 自动添加了 "),s("code",[e._v("'<,'>")]),e._v(" 范围。这表示，接下来的命令会使用之前选取的行号作为范围。但如果后续命令不支持范围，Vim 就会报错。为了避免这样的情况发生，有些人会设置这样的按键映射："),s("code",[e._v(":vnoremap foo :<c-u>command")]),e._v("，组合键 Ctrl + u 可以清除当前命令行中的内容。")]),e._v(" "),s("p",[e._v("另一个例子是在普通模式中按下 "),s("code",[e._v("!!")]),e._v("，命令行中会出现 "),s("code",[e._v(":.!")]),e._v("。如果这时你如果输入一个外部命令，那么当前行的内容就会被这个外部命令的输出替换。你也可以通过命令 "),s("code",[e._v(":?^$?+1,/^$/-1!ls")]),e._v(" 把当前段落的内容替换成外部命令 "),s("code",[e._v("ls")]),e._v(" 的输出，原理是向前和向后各搜索一个空白行，删除这两个空白行之间的内容，并将外部命令 "),s("code",[e._v("ls")]),e._v(" 的输出放到这两个空白行之间。")]),e._v(" "),s("p",[e._v("请参阅以下两个命令来获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h cmdline-ranges\n:h "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10.3")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"标注-标注"}},[s("code",[e._v("[](#标注)标注")])]),e._v(" "),s("p",[e._v("你可以使用标注功能来标记一个位置，也就是记录文件某行的某个位置。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("标注")]),e._v(" "),s("th",[e._v("设置者")]),e._v(" "),s("th",[e._v("使用")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v("a")]),e._v("-"),s("code",[e._v("z")])]),e._v(" "),s("td",[e._v("用户")]),e._v(" "),s("td",[e._v("仅对当前的一个文件生效，也就意味着只可以在当前文件中跳转")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("A")]),e._v("-"),s("code",[e._v("Z")])]),e._v(" "),s("td",[e._v("用户")]),e._v(" "),s("td",[e._v("全局标注，可以作用于不同文件。大写标注也称为「文件标注」。跳转时有可能会切换到另一个缓冲区")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("0")]),e._v("-"),s("code",[e._v("9")])]),e._v(" "),s("td",[e._v("viminfo")]),e._v(" "),s("td",[s("code",[e._v("0")]),e._v(" 代表 viminfo 最后一次被写入的位置。实际使用中，就代表 Vim 进程最后一次结束的位置。"),s("code",[e._v("1")]),e._v(" 代表 Vim 进程倒数第二次结束的位置，以此类推")])])])]),e._v(" "),s("p",[e._v("如果想跳转到指定的标注，你可以先按下 "),s("code",[e._v("'")]),e._v(" / "),s("code",[e._v("g'")]),e._v(" 或者 "),s("code",[e._v("`")]),e._v(" / "),s("code",[e._v("g`")]),e._v(" 然后按下标注名。")]),e._v(" "),s("p",[e._v("如果你想定义当前文件中的标注，可以先按下 "),s("code",[e._v("m")]),e._v(" 再按下标注名。比如，按下 "),s("code",[e._v("mm")]),e._v(" 就可以把当前位置标注为 "),s("code",[e._v("m")]),e._v("。在这之后，如果你的光标切换到了文件的其他位置，只需要通过 "),s("code",[e._v("'m")]),e._v(" 或者 "),s("code",[e._v("`m")]),e._v("即可回到刚才标注的行。区别在于，"),s("code",[e._v("'m")]),e._v("会跳转回被标记行的第一个非空字符，而"),s("code",[e._v("`m")]),e._v("会跳转回被标记行的被标记列。根据 viminfo 的设置，你可以在退出 Vim 的时候保留小写字符标注。请参阅"),s("code",[e._v(":h viminfo-'")]),e._v(" 来获取更多帮助。")]),e._v(" "),s("p",[e._v("如果你想定义全局的标注，可以先按下 "),s("code",[e._v("m")]),e._v(" 再按下大写英文字符。比如，按下 "),s("code",[e._v("mM")]),e._v(" 就可以把当前文件的当前位置标注为 "),s("code",[e._v("M")]),e._v("。在这之后，就算你切换到其他的缓冲区，依然可以通过 "),s("code",[e._v("'M")]),e._v(" 或 "),s("code",[e._v("`M")]),e._v(" 跳转回来。")]),e._v(" "),s("p",[e._v("关于跳转，还有以下的方式：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("按键")]),e._v(" "),s("th",[e._v("跳转至")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v("'[")]),e._v(" 与 "),s("code",[e._v("`[")])]),e._v(" "),s("td",[e._v("上一次修改或复制的第一行或第一个字符")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("']")]),e._v(" 与 "),s("code",[e._v("`]")])]),e._v(" "),s("td",[e._v("上一次修改或复制的最后一行或最后一个字符")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'<")]),e._v(" 与 "),s("code",[e._v("`<")])]),e._v(" "),s("td",[e._v("上一次在可视模式下选取的第一行或第一个字符")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'>")]),e._v(" 与 "),s("code",[e._v("`>")])]),e._v(" "),s("td",[e._v("上一次在可视模式下选取的最后一行或最后一个字符")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("''")]),e._v(" 与 "),s("code",[e._v("`'")])]),e._v(" "),s("td",[e._v("上一次跳转之前的光标位置")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'\"")]),e._v(" 与 "),s("code",[e._v('`"')])]),e._v(" "),s("td",[e._v("上一次关闭当前缓冲区时的光标位置")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'^")]),e._v(" 与 "),s("code",[e._v("`^")])]),e._v(" "),s("td",[e._v("上一次插入字符后的光标位置")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'.")]),e._v(" 与 "),s("code",[e._v("`.")])]),e._v(" "),s("td",[e._v("上一次修改文本后的光标位置")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'(")]),e._v(" 与 "),s("code",[e._v("`(")])]),e._v(" "),s("td",[e._v("当前句子的开头")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("')")]),e._v(" 与 "),s("code",[e._v("`)")])]),e._v(" "),s("td",[e._v("当前句子的结尾")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'{")]),e._v(" 与 "),s("code",[e._v("`{")])]),e._v(" "),s("td",[e._v("当前段落的开头")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("'}")]),e._v(" 与 "),s("code",[e._v("`}")])]),e._v(" "),s("td",[e._v("当前段落的结尾")])])])]),e._v(" "),s("p",[e._v("标注也可以搭配 "),s("a",{attrs:{href:"#%E8%8C%83%E5%9B%B4"}},[e._v("范围")]),e._v(" 一起使用。前面提到过，如果你在可视模式下选取一些文本，然后按下 "),s("code",[e._v(":")]),e._v("，这时候你会发现命令行已经被填充了 "),s("code",[e._v(":'<,'>")]),e._v("。对照上面的表格，现在你应该明白了，这段代表的就是可视模式下选取的范围。")]),e._v(" "),s("p",[e._v("请使用 "),s("code",[e._v(":marks")]),e._v(" 命令来显示所有的标注，参阅 "),s("code",[e._v(":h mark-motions")]),e._v(" 来获取关于标注的更多帮助。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"补全-补全"}},[s("code",[e._v("[](#补全)补全")])]),e._v(" "),s("p",[e._v("Vim 在插入模式中为我们提供了多种补全方案。如果有多个补全结果，Vim 会弹出一个菜单供你选择。")]),e._v(" "),s("p",[e._v("常见的补全有标签、项目中引入的模块或库中的方法名、文件名、字典及当前缓冲区的字段。")]),e._v(" "),s("p",[e._v("针对不同的补全方案，Vim 为我们提供了不同的按键映射。这些映射都是在"),s("strong",[e._v("插入模式中")]),e._v("通过 Ctrl + x 来触发：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("映射")]),e._v(" "),s("th",[e._v("类型")]),e._v(" "),s("th",[e._v("帮助文档")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v("<c-x><c-l>")])]),e._v(" "),s("td",[e._v("整行")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^l")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-n>")])]),e._v(" "),s("td",[e._v("当前缓冲区中的关键字")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^n")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-k>")])]),e._v(" "),s("td",[e._v("字典（请参阅 "),s("code",[e._v(":h 'dictionary'")]),e._v("）中的关键字")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^k")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-t>")])]),e._v(" "),s("td",[e._v("同义词字典（请参阅 "),s("code",[e._v(":h 'thesaurus'")]),e._v("）中的关键字")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^t")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-i>")])]),e._v(" "),s("td",[e._v("当前文件以及包含的文件中的关键字")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^i")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-]>")])]),e._v(" "),s("td",[e._v("标签")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^]")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-f>")])]),e._v(" "),s("td",[e._v("文件名")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^f")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-d>")])]),e._v(" "),s("td",[e._v("定义或宏定义")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^d")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-v>")])]),e._v(" "),s("td",[e._v("Vim 命令")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^v")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-u>")])]),e._v(" "),s("td",[e._v("用户自定义补全（通过 "),s("code",[e._v("'completefunc'")]),e._v(" 定义）")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^u")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x><c-o>")])]),e._v(" "),s("td",[e._v("Omni Completion（通过 "),s("code",[e._v("'omnifunc'")]),e._v(" 定义）")]),e._v(" "),s("td",[s("code",[e._v(":h i^x^o")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("<c-x>s")])]),e._v(" "),s("td",[e._v("拼写建议")]),e._v(" "),s("td",[s("code",[e._v(":h i^Xs")])])])])]),e._v(" "),s("p",[e._v("尽管用户自定义补全与 Omni Completion 是不同的，但他们做的事情基本一致。共同点在于，他们都是一个监听当前光标位置的函数，返回值为一系列的补全建议。用户自定义补全是由用户定义的，基于用户的个人用途，因此你可以根据自己的喜好和需求随意定制。而 Omni Completion 是针对文件类型的补全，比如在 C 语言中补全一个结构体（struct）的成员（members），或者补全一个类的方法，因而它通常都是由文件类型插件设置和调用的。")]),e._v(" "),s("p",[e._v("如果你设置了 "),s("code",[e._v("'complete'")]),e._v(" 选项，那么你就可以在一次操作中采用多种补全方案。这个选项默认包含了多种可能性，因此请按照自己的需求来配置。你可以通过 "),s("code",[e._v("<c-n>")]),e._v(" 来调用下一个补全建议，或通过 "),s("code",[e._v("<c-p>")]),e._v(" 来调用上一个补全建议。当然，这两个映射同样可以直接调用补全函数。请参阅 "),s("code",[e._v(":h i^n")]),e._v(" 与 "),s("code",[e._v(":h 'complete'")]),e._v(" 来获得更多帮助。")]),e._v(" "),s("p",[e._v("如果你想配置弹出菜单的行为，请一定要看一看 "),s("code",[e._v(":h 'completeopt'")]),e._v(' 这篇帮助文档。默认的配置已经不错了，但我个人（原作者）更倾向于把 "noselect" 加上。')]),e._v(" "),s("p",[e._v("请参阅以下文档获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h ins-completion\n:h popupmenu-keys\n:h new-omni-completion\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"动作操作符文本对象-动作，操作符，文本对象"}},[s("code",[e._v("[](#动作操作符文本对象)动作，操作符，文本对象")])]),e._v(" "),s("p",[s("strong",[e._v("动作")]),e._v("也就是指移动光标的操作，你肯定很熟悉 "),s("code",[e._v("h")]),e._v("、"),s("code",[e._v("j")]),e._v("、"),s("code",[e._v("k")]),e._v(" 和 "),s("code",[e._v("l")]),e._v("，以及 "),s("code",[e._v("w")]),e._v(" 和 "),s("code",[e._v("b")]),e._v("。但其实，"),s("code",[e._v("/")]),e._v(" 也是一个动作。他们都可以搭配数字使用，比如 "),s("code",[e._v("2?the<cr>")]),e._v(' 可以将光标移动到倒数第二个 "the" 出现的位置。')]),e._v(" "),s("p",[e._v("以下会列出一些常用的动作。你也可以通过 "),s("code",[e._v(":h navigation")]),e._v(" 来获取更多的帮助。")]),e._v(" "),s("p",[s("strong",[e._v("操作符")]),e._v("是对某个区域文本执行的操作。比如，"),s("code",[e._v("d")]),e._v("、"),s("code",[e._v("~")]),e._v("、"),s("code",[e._v("gU")]),e._v(" 和 "),s("code",[e._v(">")]),e._v(" 都是操作符。这些操作符既可以在普通模式下使用，也可以在可视模式下使用。在普通模式中，顺序是先按操作符，再按动作指令，比如 "),s("code",[e._v(">j")]),e._v("。在可视模式中，选中区域后直接按操作符就可以，比如 "),s("code",[e._v("Vjd")]),e._v("。")]),e._v(" "),s("p",[e._v("与动作一样，操作符也可以搭配数字使用，比如 "),s("code",[e._v("2gUw")]),e._v(" 可以将当前单词以及下一个单词转成大写。由于动作和操作符都可以搭配数字使用，因此 "),s("code",[e._v("2gU2w")]),e._v(" 与执行两次 "),s("code",[e._v("gU2w")]),e._v(" 效果是相同的。")]),e._v(" "),s("p",[e._v("请参阅 "),s("code",[e._v(":h operator")]),e._v(" 来查看所有的操作符。你也可以通过 "),s("code",[e._v(":set tildeop")]),e._v(" 命令把 "),s("code",[e._v("~")]),e._v(" 也变成一个操作符")]),e._v(" "),s("p",[e._v("值得注意的是，动作是单向的，而"),s("strong",[e._v("文本对象")]),e._v("是双向的。文本对象不仅作用于符号（比如括号、中括号和大括号等）标记的范围内，也作用于整个单词、整个句子等其他情况。")]),e._v(" "),s("p",[e._v("文本对象不能用于普通模式中移动光标的操作，因为光标还没有智能到可以向两个方向同时跳转。但这个功能可以在可视模式中实现，因为在对象的一端选中的情况下，光标只需要跳转到另一端就可以了。")]),e._v(" "),s("p",[e._v("文本对象操作一般用 "),s("code",[e._v("i")]),e._v(" 或 "),s("code",[e._v("a")]),e._v(" 加上对象标识符操作，其中 "),s("code",[e._v("i")]),e._v(" 表示在对象内（英文 inner）操作，"),s("code",[e._v("a")]),e._v(" 表示对整个对象（英文 around）操作，这时开头和结尾的空格都会被考虑进来。举个例子，"),s("code",[e._v("diw")]),e._v(" 可以删除当前单词，"),s("code",[e._v("ci(")]),e._v(" 可以改变括号中的内容。")]),e._v(" "),s("p",[e._v("文本对象同样可以与数字搭配使用。比如，像 "),s("code",[e._v("((( )))")]),e._v(" 这样的文本，假如光标位于最内层的括号上或最内层的括号内，那么 "),s("code",[e._v("d2a(")]),e._v(" 将会删除从最内层开始的两对括号，以及他们之间的所有内容。其实，"),s("code",[e._v("d2a(")]),e._v(" 这个操作等同于 "),s("code",[e._v("2da(")]),e._v("。在 Vim 的命令中，如果有两处都可以接收数字作为参数，那么最终结果就等同于两个数字相乘。在这里，"),s("code",[e._v("d")]),e._v(" 与 "),s("code",[e._v("a(")]),e._v(" 都是可以接收参数的，一个参数是 1，另一个是 2，我们可以把它们相乘然后放到最前面。")]),e._v(" "),s("p",[e._v("请参阅 "),s("code",[e._v(":h text-objects")]),e._v(" 来获取更多关于文本对象的帮助。")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"自动命令-自动命令"}},[s("code",[e._v("[](#自动命令)自动命令")])]),e._v(" "),s("p",[e._v("在特定的情况下，Vim 会传出事件。如果你想针对这些事件执行回调方法，那么就需要用到自动命令这个功能。")]),e._v(" "),s("p",[e._v("如果没有了自动命令，那你基本上是用不了 Vim 的。自动命令一直都在执行，只是很多时候你没有注意到。不信的话，可以执行命令 "),s("code",[e._v(":au")]),e._v(" ，不要被结果吓到，这些是当前有效的所有自动命令。")]),e._v(" "),s("p",[e._v("请使用 "),s("code",[e._v(":h {event}")]),e._v(" 来查看 Vim 中所有事件的列表，你也可以参考 "),s("code",[e._v(":h autocmd-events-abc")]),e._v(" 来获取关于事件的更多帮助。")]),e._v(" "),s("p",[e._v("一个很常用的例子，就是针对文件类型执行某些设置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd FileType ruby setlocal "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("shiftwidth")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("softtabstop")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" comments-"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(":"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("但是缓冲区是如何知道当前的文件中包含 Ruby 代码呢？这其实是另一个自动命令检测的到的，然后把文件类型设置成为 Ruby，这样就触发了上面的 "),s("code",[e._v("FileType")]),e._v(" 事件。")]),e._v(" "),s("p",[e._v("在配置 vimrc 的时候，一般第一行加进去的就是 "),s("code",[e._v("filetype on")]),e._v("。这就意味着，Vim 启动时会读取 "),s("code",[e._v("filetype.vim")]),e._v(" 文件，然后根据文件类型来触发相应的自动命令。")]),e._v(" "),s("p",[e._v("如果你勇于尝试，可以查看下 "),s("code",[e._v(":e $VIMRUNTIME/filetype.vim")]),e._v('，然后在输出中搜索 "Ruby"。这样，你就会发现其实 Vim 只是通过文件扩展名 '),s("code",[e._v(".rb")]),e._v(" 判断某个文件是不是 Ruby 的。")]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：对于相同事件，如果有多个自动命令，那么自动命令会按照定义时的顺序执行。通过 "),s("code",[e._v(":au")]),e._v(" 就可以查看它们的执行顺序。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("au BufNewFile,BufRead *.rb,*.rbw setf ruby\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("code",[e._v("BufNewFile")]),e._v(" 与 "),s("code",[e._v("BufRead")]),e._v(" 事件是被写在 Vim 源文件中的。因此，每当你通过 "),s("code",[e._v(":e")]),e._v(" 或者类似的命令打开文件，这两个事件都会触发。然后，就是读取 "),s("code",[e._v("filetype.vim")]),e._v(" 文件来判断打开的文件类型。")]),e._v(" "),s("p",[e._v("简单来说，事件和自动命令在 Vim 中的应用十分广泛。而且，Vim 为我们留出了一些易用的接口，方便用户配置适合自己的事件驱动回调。")]),e._v(" "),s("p",[e._v("请参阅 "),s("code",[e._v(":h autocommand")]),e._v(" 来获取更多帮助")]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"变更历史跳转历史-变更历史，跳转历史"}},[s("code",[e._v("[](#变更历史跳转历史)变更历史，跳转历史")])]),e._v(" "),s("p",[e._v("在 Vim 中，用户最近 100 次的文字改动都会被保存在"),s("strong",[e._v("变更历史")]),e._v("中。如果在同一行有多个小改动，那么 Vim 会把它们合并成一个。尽管内容改动会合并，但作用的位置还是会只记录下最后一次改动的位置。")]),e._v(" "),s("p",[e._v("在你移动光标或跳转的时候，每一次的移动或跳转前的位置会被记录到"),s("strong",[e._v("跳转历史")]),e._v("中。类似地，跳转历史也可以最多保存 100 条记录。对于每个窗口，跳转记录是独立的。但当你分离窗口时（比如使用 "),s("code",[e._v(":split")]),e._v(" 命令），跳转历史会被复制过去。")]),e._v(" "),s("p",[e._v("Vim 中的跳转命令，包括 "),s("code",[e._v("'")]),e._v("、"),s("code",[e._v("`")]),e._v("、"),s("code",[e._v("G")]),e._v("、"),s("code",[e._v("/")]),e._v("、"),s("code",[e._v("?")]),e._v("、"),s("code",[e._v("n")]),e._v("、"),s("code",[e._v("N")]),e._v("、"),s("code",[e._v("%")]),e._v("、"),s("code",[e._v("(")]),e._v("、"),s("code",[e._v(")")]),e._v("、"),s("code",[e._v("[[")]),e._v("、"),s("code",[e._v("]]")]),e._v("、"),s("code",[e._v("{")]),e._v("、"),s("code",[e._v("}")]),e._v("、"),s("code",[e._v(":s")]),e._v("、"),s("code",[e._v(":tag")]),e._v("、"),s("code",[e._v("L")]),e._v("、"),s("code",[e._v("M")]),e._v("、"),s("code",[e._v("H")]),e._v(" 以及开始编辑一个新文件的命令。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("列表")]),e._v(" "),s("th",[e._v("显示所有条目")]),e._v(" "),s("th",[e._v("跳转到上一个位置")]),e._v(" "),s("th",[e._v("跳转到下一个位置")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("跳转历史")]),e._v(" "),s("td",[s("code",[e._v(":jumps")])]),e._v(" "),s("td",[s("code",[e._v("[count]<c-o>")])]),e._v(" "),s("td",[s("code",[e._v("[count]<c-i>")])])]),e._v(" "),s("tr",[s("td",[e._v("变更历史")]),e._v(" "),s("td",[s("code",[e._v(":changes")])]),e._v(" "),s("td",[s("code",[e._v("[count]g;")])]),e._v(" "),s("td",[s("code",[e._v("[count]g,")])])])])]),e._v(" "),s("p",[e._v("如果你执行第二列的命令显示所有条目，这时 Vim 会用 "),s("code",[e._v(">")]),e._v(" 标记来为你指示当前位置。通常这个标记位于 1 的下方，也就代表最后一次的位置。")]),e._v(" "),s("p",[e._v("如果你希望关闭 Vim 之后还保留这些条目，请参阅 "),s("code",[e._v(":h viminfo-'")]),e._v(" 来获取更多帮助。")]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：上面提到过，最后一次跳转前的位置也会记录在"),s("a",{attrs:{href:"#%E6%A0%87%E6%B3%A8"}},[e._v("标注")]),e._v("中，也可以通过连按 `` 或 '' 跳转到那个位置")]),e._v(" "),s("p",[e._v("请参阅以下两个命令来获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h changelist\n:h jumplist\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"内容变更历史记录-内容变更历史记录"}},[s("code",[e._v("[](#内容变更历史记录)内容变更历史记录")])]),e._v(" "),s("p",[e._v("Vim 会记录文本改变之前的状态。因此，你可以使用「撤销」操作 u 来取消更改，也可以通过「重做」操作 Ctrl + r 来恢复更改。")]),e._v(" "),s("p",[e._v("值得注意的是，Vim 采用 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Tree_(data_structure)",target:"_blank",rel:"noopener noreferrer"}},[e._v("tree"),s("OutboundLink")],1),e._v(" 数据结构来存储内容变更的历史记录，而不是采用 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)",target:"_blank",rel:"noopener noreferrer"}},[e._v("queue"),s("OutboundLink")],1),e._v("。你的每次改动都会成为存储为树的节点。而且，除了第一次改动（根节点），之后的每次改动都可以找到一个对应的父节点。每一个节点都会记录改动的内容和时间。其中，「分支」代表从任一节点到根节点的路径。当你进行了撤销操作，然后又输入了新的内容，这时候就相当于创建了分支。这个原理和 git 中的 branch（分支）十分类似。")]),e._v(" "),s("p",[e._v("考虑以下这一系列按键操作：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("ifoo"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("esc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nobar"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("esc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nobaz"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("esc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nu\noquux"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("exc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v('那么现在，Vim 中会显示三行文本，分别是 "foo"、"bar" 和 "quux"。这时候，存储的树形结构如下：')]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("     foo(1)\n       /\n    bar(2)\n   /      \\\nbaz(3)   quux(4)\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[e._v("这个树形结构共包含四次改动，括号中的数字就代表时间顺序。")]),e._v(" "),s("p",[e._v("现在，我们有两种方式遍历这个树结构。一种叫「按分支遍历」，一种叫「按时间遍历」。")]),e._v(" "),s("p",[e._v('撤销 u 与重做 Ctrl + r 操作是按分支遍历。对于上面的例子，现在我们有三行字符。这时候按 u 会回退到 "bar" 节点，如果再按一次 u 则会回退到 "foo" 节点。这时，如果我们按下 Ctrl + r 就会前进至 "bar" 节点，再按一次就回前进至 "quux" 节点。在这种方式下，我们无法访问到兄弟节点（即 "baz" 节点）。')]),e._v(" "),s("p",[e._v("与之对应的是按时间遍历，对应的按键是 "),s("code",[e._v("g-")]),e._v(" 和 "),s("code",[e._v("g+")]),e._v("。对于上面的例子，按下 "),s("code",[e._v("g-")]),e._v(' 会首先回退到 "baz" 节点。再次按下 '),s("code",[e._v("g-")]),e._v(' 会回退到 "bar" 节点。')]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("命令/按键")]),e._v(" "),s("th",[e._v("执行效果")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v("[count]u")]),e._v(" 或 "),s("code",[e._v(":undo [count]")])]),e._v(" "),s("td",[e._v("回退到 "),s("code",[e._v("[count]")]),e._v(" 次改动之前")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("[count]<c-r>")]),e._v(" 或 "),s("code",[e._v(":redo [count]")])]),e._v(" "),s("td",[e._v("重做 "),s("code",[e._v("[count]")]),e._v(" 次改动")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("U")])]),e._v(" "),s("td",[e._v("回退至最新的改动")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("[count]g-")]),e._v(" 或 "),s("code",[e._v(":earlier [count]?")])]),e._v(" "),s("td",[e._v("根据时间回退到 "),s("code",[e._v("[count]")]),e._v(' 次改动之前。"?" 为 "s"、"m"、"h"、"d" 或 "f"之一。例如，'),s("code",[e._v(":earlier 2d")]),e._v(" 会回退到两天之前。"),s("code",[e._v(":earlier 1f")]),e._v(" 则会回退到最近一次文件保存时的内容")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("[count]g+")]),e._v(" 或 "),s("code",[e._v(":later [count]?")])]),e._v(" "),s("td",[e._v("类似 "),s("code",[e._v("g-")]),e._v("，但方向相反")])])])]),e._v(" "),s("p",[e._v("内容变更记录会储存在内存中，当 Vim 退出时就会清空。如果需要持久化存储内容变更记录，请参阅"),s("a",{attrs:{href:"#%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%BA%A4%E6%8D%A2%E6%96%87%E4%BB%B6%E6%92%A4%E9%94%80%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8Aviminfo%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86"}},[e._v("备份文件，交换文件，撤销文件以及 viminfo 文件的处理")]),e._v("章节的内容。")]),e._v(" "),s("p",[e._v("如果你觉得这一部分的内容难以理解，请参阅 "),s("a",{attrs:{href:"https://github.com/mbbill/undotree",target:"_blank",rel:"noopener noreferrer"}},[e._v("undotree"),s("OutboundLink")],1),e._v("，这是一个可视化管理内容变更历史记录的插件。类似的还有 "),s("a",{attrs:{href:"https://github.com/simnalamburt/vim-mundo",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim-mundo"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("请参阅以下链接获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h undo.txt\n:h usr_32\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"全局位置信息表局部位置信息表-全局位置信息表，局部位置信息表"}},[s("code",[e._v("[](#全局位置信息表局部位置信息表)全局位置信息表，局部位置信息表")])]),e._v(" "),s("p",[e._v("在某一个动作返回一系列「位置」的时候，我们可以利用「全局位置信息表」和「局部位置信息表」来存储这些位置信息，方便以后跳转回对应的位置。每一个存储的位置包括文件名、行号和列号。")]),e._v(" "),s("p",[e._v("比如，编译代码是出现错误，这时候我们就可以把错误的位置直接显示在全局位置信息表，或者通过外部抓取工具使位置显示在局部位置信息表中。")]),e._v(" "),s("p",[e._v("尽管我们也可以把这些信息显示到一个空格缓冲区中，但用这两个信息表显示的好处在于接口调用很方便，而且也便于浏览输出。")]),e._v(" "),s("p",[e._v("Vim 中，全局位置信息表只能有一个，但每一个窗口都可以有自己的局部位置信息表。这两个信息表的外观看上去很类似，但在操作上会稍有不同。")]),e._v(" "),s("p",[e._v("以下为两者的操作比较：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("动作")]),e._v(" "),s("th",[e._v("全局位置信息表")]),e._v(" "),s("th",[e._v("局部位置信息表")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("打开窗口")]),e._v(" "),s("td",[s("code",[e._v(":copen")])]),e._v(" "),s("td",[s("code",[e._v(":lopen")])])]),e._v(" "),s("tr",[s("td",[e._v("关闭窗口")]),e._v(" "),s("td",[s("code",[e._v(":cclose")])]),e._v(" "),s("td",[s("code",[e._v(":lclose")])])]),e._v(" "),s("tr",[s("td",[e._v("下一个条目")]),e._v(" "),s("td",[s("code",[e._v(":cnext")])]),e._v(" "),s("td",[s("code",[e._v(":lnext")])])]),e._v(" "),s("tr",[s("td",[e._v("上一个条目")]),e._v(" "),s("td",[s("code",[e._v(":cprevious")])]),e._v(" "),s("td",[s("code",[e._v(":lprevious")])])]),e._v(" "),s("tr",[s("td",[e._v("第一个条目")]),e._v(" "),s("td",[s("code",[e._v(":cfirst")])]),e._v(" "),s("td",[s("code",[e._v(":lfirst")])])]),e._v(" "),s("tr",[s("td",[e._v("最后一个条目")]),e._v(" "),s("td",[s("code",[e._v(":clast")])]),e._v(" "),s("td",[s("code",[e._v(":llast")])])])])]),e._v(" "),s("p",[e._v("请参阅 "),s("code",[e._v(":h :cc")]),e._v(" 以及底下的内容，来获取更多命令的帮助。")]),e._v(" "),s("p",[s("strong",[e._v("应用实例")]),e._v("： 如果我们想用 "),s("code",[e._v("grep")]),e._v(" 递归地在当前文件夹中寻找某个关键词，然后把输出结果放到全局位置信息表中，只需要这样：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":let "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("grepprg "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'grep -Rn "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$*")]),e._v(" .'")]),e._v("\n:grep"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" foo\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("grep output - hit enter"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n:copen\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v('执行了上面的代码，你就能看到所有包含字符串 "foo" 的文件名以及匹配到的相关字段都会显示在全局位置信息表中。')]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"宏-宏"}},[s("code",[e._v("[](#宏)宏")])]),e._v(" "),s("p",[e._v("你可以在 Vim 中录制一系列按键，并把他们存储到"),s("a",{attrs:{href:"#%E5%AF%84%E5%AD%98%E5%99%A8"}},[e._v("寄存器")]),e._v("中。对于一些需要临时使用多次的一系列操作，把它们作为宏保存起来会显著地提升效率。对于一些复杂的操作，建议使用 Vim 脚本来实现。")]),e._v(" "),s("ul",[s("li",[e._v("首先，按下 q，然后按下你想要保存的寄存器，任何小写字母都可以。比如我们来把它保存到 "),s("code",[e._v("q")]),e._v(" 这个寄存器中。按下 "),s("code",[e._v("qq")]),e._v('，你会发现命令行里已经显示了 "recording @q"。')]),e._v(" "),s("li",[e._v("如果你已经录制完成，那么只需要再按一次 q 就可以结束录制。")]),e._v(" "),s("li",[e._v("如果你想调用刚才录制的宏，只需要 "),s("code",[e._v("[count]@q")])]),e._v(" "),s("li",[e._v("如果你想调用上一次使用的宏，只需要 "),s("code",[e._v("[count]@@")])])]),e._v(" "),s("p",[s("strong",[e._v("实例 1")]),e._v("：")]),e._v(" "),s("p",[e._v('一个插入字符串 "abc" 后换行的宏，重复调用十次：')]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("qq\niabc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("esc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nq\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("@q\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("（对于上面这个功能，你同样可以通过如下的按键： oabc 然后 ESC 然后 10. 来实现）。")]),e._v(" "),s("p",[s("strong",[e._v("实例 2")]),e._v("：")]),e._v(" "),s("p",[e._v("一个在每行前都加上行号的宏。从第一行开始，行号为 1，后面依次递增。我们可以通过 Ctrl + a 来实现递增的行号，在定义宏的时候，它会显示成 "),s("code",[e._v("^A")]),e._v("。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("qq\n0yf jP0^A\nq\n"),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v(" @q\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("这里能实现功能，是因为我们假定了文件最多只有 1000 行。但更好的方式是使用「递归」宏，它会一直执行，知道不能执行为止：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("qq\n0yf jP0^A@q\nq\n@q\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("（对于上面这个插入行号的功能，如果你不愿意使用宏，同样可以通过这段按键操作来实现："),s("code",[e._v(":%s/^/\\=line('.') . '. '")]),e._v("）。")]),e._v(" "),s("p",[e._v("这里向大家展示了如何不用宏来达到相应的效果，但要注意，这些不用宏的实现方式只适用于这些简单的示例。对于一些比较复杂的自动化操作，你确实应该考虑使用宏。")]),e._v(" "),s("p",[e._v("请参阅以下文档获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h recording\n:h "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'lazyredraw'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"颜色主题-颜色主题"}},[s("code",[e._v("[](#颜色主题)颜色主题")])]),e._v(" "),s("p",[e._v("颜色主题可以把你的 Vim 变得更漂亮。Vim 是由多个组件构成的，我们可以给每一个组件都设置不同的文字颜色、背景颜色以及文字加粗等等。比如，我们可以通过这个命令来设置背景颜色：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":highlight Normal "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ctermbg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("guibg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("red\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("执行后你会发现，现在背景颜色变成红色了。请参阅 "),s("code",[e._v(":h :highlight")]),e._v(" 来获取更多帮助。")]),e._v(" "),s("p",[e._v("其实，颜色主题就是一系列的 "),s("code",[e._v(":highlight")]),e._v(" 命令的集合。")]),e._v(" "),s("p",[e._v("事实上，大部分颜色主题都包含两套配置。一套适用于例如 xterm 和 iTerm 这样的终端环境（使用前缀 "),s("code",[e._v("cterm")]),e._v("），另一套适用于例如 gvim 和 MacVim 的图形界面环境（使用前缀 "),s("code",[e._v("gui")]),e._v("）。对于上面的例子，"),s("code",[e._v("ctermbg")]),e._v(" 就是针对终端环境的，而 "),s("code",[e._v("guibg")]),e._v(" 就是针对图形界面环境的。")]),e._v(" "),s("p",[e._v("如果你下载了一个颜色主题，并且在终端环境中打开了 Vim，然后发现显示的颜色与主题截图中差别很大，那很可能是配置文件只设置了图形界面环境的颜色。反之同理，如果你使用的是图形界面环境，发现显示颜色有问题，那就很可能是配置文件只设置了终端环境的颜色。")]),e._v(" "),s("p",[e._v("第二种情况（图形界面环境的显示问题）其实不难解决。如果你使用的是 Neovim 或者 Vim 7.4.1830 的后续版本，可以通过打开"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9C%9F%E5%BD%A9%E8%89%B2",target:"_blank",rel:"noopener noreferrer"}},[e._v("真彩色"),s("OutboundLink")],1),e._v("设置来解决显示问题。这就可以让终端环境的 Vim 使用 GUI 的颜色定义，但首先，你要确认一下你的终端环境和环境内的组件（比如 tmux）是否都支持真彩色。可以看一下"),s("a",{attrs:{href:"https://gist.github.com/XVilka/8346728",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇文档"),s("OutboundLink")],1),e._v("，描述的十分详细。")]),e._v(" "),s("p",[e._v("请参阅以下文档或链接来获取更多帮助：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v(":h 'termguicolors'")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%BB%E9%A2%98%E5%88%97%E8%A1%A8"}},[e._v("主题列表")])]),e._v(" "),s("li",[s("a",{attrs:{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98%E4%B8%AD%E7%9A%84%E9%A2%9C%E8%89%B2"}},[e._v("自定义主题中的颜色")])])]),e._v(" "),s("p",[e._v("返回主目录 "),s("a",{attrs:{href:"#%E5%9F%BA%E7%A1%80"}},[e._v("⤴️")])]),e._v(" "),s("h2",{attrs:{id:"折叠-折叠"}},[s("code",[e._v("[](#折叠)折叠")])]),e._v(" "),s("p",[e._v("每一部分文字（或者代码）都会有特定的结构。对于存在结构的文字和代码，也就意味着它们可以按照一定的逻辑分割成不同区域。Vim 中的折叠功能，就是按照特定的逻辑把文字和代码折叠成一行，并显示一些简短的描述。折叠功能涉及到很多操作，而且折叠功能可以嵌套使用。")]),e._v(" "),s("p",[e._v("在 Vim 中，有以下 6 中折叠类型：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("折叠方式")]),e._v(" "),s("th",[e._v("概述")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("diff")]),e._v(" "),s("td",[e._v("在「比较窗口」中折叠未改变的文本")])]),e._v(" "),s("tr",[s("td",[e._v("expr")]),e._v(" "),s("td",[e._v("使用 "),s("code",[e._v("'foldexpr'")]),e._v(" 来创建新的折叠逻辑")])]),e._v(" "),s("tr",[s("td",[e._v("indent")]),e._v(" "),s("td",[e._v("基于缩进折叠")])]),e._v(" "),s("tr",[s("td",[e._v("manual")]),e._v(" "),s("td",[e._v("使用 "),s("code",[e._v("zf")]),e._v("、"),s("code",[e._v("zF")]),e._v(" 或 "),s("code",[e._v(":fold")]),e._v(" 来自定义折叠")])]),e._v(" "),s("tr",[s("td",[e._v("marker")]),e._v(" "),s("td",[e._v("根据特定的文本标记折叠（通常用于代码注释）")])]),e._v(" "),s("tr",[s("td",[e._v("syntax")]),e._v(" "),s("td",[e._v("根据语法折叠，比如折叠 "),s("code",[e._v("if")]),e._v(" 代码块")])])])]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：折叠功能可能会显著地影响性能。如果你在使用折叠功能的时候出现了打字卡顿之类的问题，请考虑使用 "),s("a",{attrs:{href:"https://github.com/Konfekt/FastFold",target:"_blank",rel:"noopener noreferrer"}},[e._v("FastFold 插件"),s("OutboundLink")],1),e._v("。这个插件可以让 Vim 按需更新折叠内容，而不是一直调用。")]),e._v(" "),s("p",[e._v("请参阅以下文档获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h usr_28\n:h folds\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"会话-会话"}},[s("code",[e._v("[](#会话)会话")])]),e._v(" "),s("p",[e._v("如果你保存了当前的「视图」（请参阅 "),s("code",[e._v(":h :mkview")]),e._v("），那么当前窗口、配置和按键映射都会被保存下来（请参阅 "),s("code",[e._v(":h :loadview")]),e._v("）。")]),e._v(" "),s("p",[e._v("「会话」就是存储所有窗口的相关设置，以及全局设置。简单来说，就是给当前的 Vim 运行实例拍个照，然后把相关信息存储到会话文件中。存储之后的改动就不会在会话文件中显示，你只需要在改动后更新一下会话文件就可以了。")]),e._v(" "),s("p",[e._v("你可以把当前工作的「项目」存储起来，然后可以在不同的「项目」之间切换。")]),e._v(" "),s("p",[e._v("现在就来试试吧。打开几个窗口和标签，然后执行 "),s("code",[e._v(":mksession Foo.vim")]),e._v("。如果你没有指定文件名，那就会默认保存为 "),s("code",[e._v("Session.vim")]),e._v("。这个文件会保存在当前的目录下，你可以通过 "),s("code",[e._v(":pwd")]),e._v(" 来显示当前路径。重启 Vim 之后，你只需要执行 "),s("code",[e._v(":source Foo.vim")]),e._v("，就可以恢复刚才的会话了。所有的缓冲区、窗口布局、按键映射以及工作路径都会恢复到保存时的状态。")]),e._v(" "),s("p",[e._v("其实 Vim 的会话文件就只是 Vim 命令的集合。你可以通过命令 "),s("code",[e._v(":vs Foo.vim")]),e._v(" 来看看会话文件中究竟有什么。")]),e._v(" "),s("p",[e._v("你可以决定 Vim 会话中究竟要保存哪些配置，只需要设置一下 "),s("code",[e._v("'sessionoptions'")]),e._v(" 就可以了。")]),e._v(" "),s("p",[e._v("为了方便开发，Vim 把最后一次调用或写入的会话赋值给了一个内部变量 "),s("code",[e._v("v:this_session")]),e._v("。")]),e._v(" "),s("p",[e._v("请参阅以下文档来获取更多帮助：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h Session\n:h "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'sessionoptions'")]),e._v("\n:h v:this_session\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h2",{attrs:{id:"局部化-局部化"}},[s("code",[e._v("[](#局部化)局部化")])]),e._v(" "),s("p",[e._v("以上提到的很多概念，都有一个局部化（非全局）的版本：")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("全局")]),e._v(" "),s("th",[e._v("局部")]),e._v(" "),s("th",[e._v("作用域")]),e._v(" "),s("th",[e._v("帮助文档")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v(":set")])]),e._v(" "),s("td",[s("code",[e._v(":setlocal")])]),e._v(" "),s("td",[e._v("缓冲区或窗口")]),e._v(" "),s("td",[s("code",[e._v(":h local-options")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":map")])]),e._v(" "),s("td",[s("code",[e._v(":map <buffer>")])]),e._v(" "),s("td",[e._v("缓冲区")]),e._v(" "),s("td",[s("code",[e._v(":h :map-local")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":autocmd")])]),e._v(" "),s("td",[s("code",[e._v(":autocmd * <buffer>")])]),e._v(" "),s("td",[e._v("缓冲区")]),e._v(" "),s("td",[s("code",[e._v(":h autocmd-buflocal")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":cd")])]),e._v(" "),s("td",[s("code",[e._v(":lcd")])]),e._v(" "),s("td",[e._v("窗口")]),e._v(" "),s("td",[s("code",[e._v(":h :lcd")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":<leader>")])]),e._v(" "),s("td",[s("code",[e._v(":<localleader>")])]),e._v(" "),s("td",[e._v("缓冲区")]),e._v(" "),s("td",[s("code",[e._v(":h maploacalleader")])])])])]),e._v(" "),s("p",[e._v("变量也有不同的作用域，详细内容请参考 "),s("a",{attrs:{href:"http://vimdoc.sourceforge.net/htmldoc/usr_41.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim scripting 的文档"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h1",{attrs:{id:"用法-用法"}},[s("code",[e._v("[](#用法)用法")])]),e._v(" "),s("h2",{attrs:{id:"获取离线帮助-获取离线帮助"}},[s("code",[e._v("[](#获取离线帮助)获取离线帮助")])]),e._v(" "),s("p",[e._v("Vim 自带了一套很完善的帮助文档，它们是一个个有固定排版格式的文本文件，通过标签可以访问这些文件的特定位置。")]),e._v(" "),s("p",[e._v("在开始之前先读一下这个章节："),s("code",[e._v(":help :help")]),e._v("。执行这个命令以后会在新窗口打开 "),s("code",[e._v("$VIMRUNTIME/doc/helphelp.txt")]),e._v(" 文件并跳转到这个文件中 "),s("code",[e._v(":help")]),e._v(" 标签的位置。")]),e._v(" "),s("p",[e._v("一些关于帮助主题的简单规则：")]),e._v(" "),s("ul",[s("li",[e._v("用单引号把文本包起来表示选项，如："),s("code",[e._v(":h 'textwidth'")])]),e._v(" "),s("li",[e._v("以小括号结尾表示 shell 函数，如："),s("code",[e._v(":h reverse()")])]),e._v(" "),s("li",[e._v("以英文冒号开头表示命令，如："),s("code",[e._v(":h :echo")])])]),e._v(" "),s("p",[e._v("使用快捷键 "),s("code",[e._v("<c-d>")]),e._v(" （这是 ctrl+d）来列出所有包含你当前输入的内容的帮助主题。如："),s("code",[e._v(":h tab<c-d>")]),e._v(" 会列出所有包含 "),s("code",[e._v("tab")]),e._v(" 主题，从 "),s("code",[e._v("softtabstop")]),e._v(" 到 "),s("code",[e._v("setting-guitablabel")]),e._v(" （译者注：根据安装的插件不同列出的选项也会不同）。")]),e._v(" "),s("p",[e._v("你想查看所有的 shell 方法吗？很简单，只要输入："),s("code",[e._v(":h ()<c-d>")]),e._v(" 就可以了。你想查看所有与窗口相关的函数吗？输入 "),s("code",[e._v(":h win*()<c-d>")]),e._v("。")]),e._v(" "),s("p",[e._v("相信你很快就能掌握这些技巧，但是在刚开始的时候，你可能对于该通过什么进行查找一点线索都没有。这时你可以想象一些与要查找的内容相关的关键字，再让 "),s("code",[e._v(":helpgrep")]),e._v(" 来帮忙。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":helpgrep backwards\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("上面的命令会在所有的帮助文件中搜索“backwards”，然后跳转到第一个匹配的位置。所有的匹配位置都会被添加到全局位置信息表，用 "),s("code",[e._v(":cp / :cn")]),e._v(" 可以在匹配位置之间进行切换。或者用 "),s("code",[e._v(":copen")]),e._v(" 命令来打开全局位置信息表，将光标定位到你想要的位置，再按 回车就可以跳转到该匹配项。详细说明请参考 "),s("code",[e._v(":h quickfix")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"获取离线帮助补充-获取离线帮助（补充）"}},[s("code",[e._v("[](#获取离线帮助补充)获取离线帮助（补充）")])]),e._v(" "),s("p",[e._v("这个列表最初发表在 "),s("a",{attrs:{href:"https://groups.google.com/forum/#!forum/vim_dev",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim_dev"),s("OutboundLink")],1),e._v("，由 @chrisbra 编辑的，他是 Vim 开发人员中最活跃的一个。")]),e._v(" "),s("p",[e._v("经过一些微小的改动后，重新发布到了这里。")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("如果你知道你想要找什么，使用帮助系统的搜索会更简单一些，因为搜索出的主题都带有固定的格式。")]),e._v(" "),s("p",[e._v("而且帮助系统中的主题包含了你当前使用的 Vim 版本的所特有特性，而网上那些已经过时或者是早期发布的话题是不会包含这些的。")]),e._v(" "),s("p",[e._v("因此学习使用帮助系统以及它所用的语言是很有必要的。这里是一些例子（不一定全，我有可能忘了一些什么）。")]),e._v(" "),s("p",[e._v("（译者注：下面列表中提及的都是如何指定搜索主题以便快速准确的找到你想要的帮助）")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("选项要用单引号引起来。用 "),s("code",[e._v(":h 'list'")]),e._v(" 来查看列表选项帮助。只有你明确的知道你要找这么一个选项的时候才可以这么做，不然的话你可以用 "),s("code",[e._v(":h options.txt")]),e._v(" 来打开所有选项的帮助页面，再用正则表达式进行搜索，如："),s("code",[e._v("/width")]),e._v("。某些选项有它们自己的命名空间，如："),s("code",[e._v(":h cpo-a")]),e._v("，"),s("code",[e._v(":h cpo-A")]),e._v("， "),s("code",[e._v(":h cpo-b")]),e._v(" 等等。")])]),e._v(" "),s("li",[s("p",[e._v("普通模式的命令不能用冒号作为前缀。使用 "),s("code",[e._v(":h gt")]),e._v(" 来转到“gt”命令的帮助页面。")])]),e._v(" "),s("li",[s("p",[e._v("正则表达式以“/”开头，所以 "),s("code",[e._v(":h /\\+")]),e._v(" 会带你到正则表达式中量词“+”的帮助页面。")])]),e._v(" "),s("li",[s("p",[e._v("组合键经常以一个字母开头表示它们可以在哪些模式中使用。如："),s("code",[e._v(":h i_CTRL-X")]),e._v(" 会带你到插入模式下的 CTRL-X 命令的用法帮助页面，这是一个自动完成类的组合键。需要注意的是某些键是有固定写法的，如 Control 键写成 CTRL。还有，查找普通模式下的组合键帮助时，可以省略开头的字母“n”，如："),s("code",[e._v(":h CTRL-A")]),e._v("。而 "),s("code",[e._v(":h c_CTRL-A")]),e._v("（译者注：原文为 "),s("code",[e._v(":h c_CRTL-R")]),e._v("，感觉改为 A 更符合上下文语境）会解释 CTRL-A 在命令模式下输入命令时的作用；"),s("code",[e._v(":h v_CTRL-A")]),e._v(" 说的是在可见模式下把光标所在处的数字加 1；"),s("code",[e._v(":h g_CTRL-A")]),e._v(' 则说的是 g 命令（你需要先按 "g" 的命令）。这里的 "g" 代表一个普通的命令，这个命令总是与其它的按键组合使用才生效，与 "z" 开始的命令相似。')])]),e._v(" "),s("li",[s("p",[e._v('寄存器是以 "quote" 开头的。如：'),s("code",[e._v(":h quote:")]),e._v(" （译者注：原文为"),s("code",[e._v(":h quote")]),e._v('，感觉作者想以":"来举例）来查看关于":"寄存器的说明。')])]),e._v(" "),s("li",[s("p",[e._v("关于 Vim 脚本（shell）的帮助都在 "),s("code",[e._v(":h eval.txt")]),e._v(" 里。而某些方面的语言可以使用 "),s("code",[e._v(":h expr-X")]),e._v(" 获取帮助，其中的 'X' 是一个特定的字符，如："),s("code",[e._v(":h expr-!")]),e._v(" 会跳转到描述 shell 中'!'（非）的章节。另外一个重要提示，可以使用 "),s("code",[e._v(":h function-list")]),e._v(" 来查看所有函数的简要描述，列表中包括函数名和一句话描述。")])]),e._v(" "),s("li",[s("p",[e._v("关于映射都可以在 "),s("code",[e._v(":h map.txt")]),e._v(" 中找到。通过 "),s("code",[e._v(":h mapmode-i")]),e._v(" 来查找 "),s("code",[e._v(":imap")]),e._v(" 命令的相关信息；通过 "),s("code",[e._v(":h map-topic")]),e._v(" 来查找专门针对映射的帮助（译者注：topic 为一个占位符，正如上面的字符 'X' 一样，在实际使用中需要替换成相应的单词）（如："),s("code",[e._v(":h :map-local")]),e._v(" 查询本地 buffer 的映射，"),s("code",[e._v(":h map-bar")]),e._v(" 查询如何在映射中处理'|')。")])]),e._v(" "),s("li",[s("p",[e._v('命令定义用 "command-" 开头，如用 '),s("code",[e._v(":h command-bar")]),e._v(" 来查看自定义命令中'!'的作用。")])]),e._v(" "),s("li",[s("p",[e._v('窗口管理类的命令是以 "CTRL-W" 开头的，所以你可以用 '),s("code",[e._v(":h CTRL-W_*")]),e._v(" 来查找相应的帮助（译者注：'*'同样为占位符）（如："),s("code",[e._v(":h CTRL-W_p")]),e._v(" 查看切换到之前访问的窗口命令的解释）。如果你想找窗口处理的命令，还可以通过访问 "),s("code",[e._v(":h windows.txt")]),e._v(" 并逐行向下浏览，所有窗口管理的命令都在这里了。")])]),e._v(" "),s("li",[s("p",[e._v('执行类的命令以":"开头，即：'),s("code",[e._v(":h :s")]),e._v(' 讲的是 "😒" 命令。')])]),e._v(" "),s("li",[s("p",[e._v("在输入某个话题时按 CTRL-D，让 Vim 列出所有的近似项辅助你输入。")])]),e._v(" "),s("li",[s("p",[e._v("用 "),s("code",[e._v(":helpgrep")]),e._v(" 在所有的帮助页面（通常还包括了已安装的插件的帮助页面）中进行搜索。参考 "),s("code",[e._v(":h :helpgrep")]),e._v(" 来了解如何使用。当你搜索了一个话题之后，所有的匹配结果都被保存到了全局位置信息表（或局部位置信息表）当中，可以通过 "),s("code",[e._v(":copen")]),e._v(" 或 "),s("code",[e._v(":lopen")]),e._v(" 打开。在打开的窗口中可能通过 "),s("code",[e._v("/")]),e._v(" 对搜索结果进行进一步的过滤。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v(":h helphelp")]),e._v(" 里介绍了如何使用帮助系统。")])]),e._v(" "),s("li",[s("p",[e._v("用户手册。它采用了一种对初学者更加友好的方式来展示帮助话题。用 "),s("code",[e._v(":h usr_toc.txt")]),e._v(" 打开目录（你可能已经猜到这个命令的用处了）。浏览用户手册能帮助你找出某些你想了解的话题，如你可以在第 24 章看到关于“复合字符”以及“输入特殊字符”的讲解（用 "),s("code",[e._v(":h usr_24.txt")]),e._v(" 可以快速打开相关章节）。")])]),e._v(" "),s("li",[s("p",[e._v("高亮分组的帮助以 "),s("code",[e._v("hl-")]),e._v(" 开头。如："),s("code",[e._v(":h hl-WarningMsg")]),e._v(" 说的是警告信息分组的高亮。")])]),e._v(" "),s("li",[s("p",[e._v("语法高亮以"),s("code",[e._v(":syc-")]),e._v(" 开头，如："),s("code",[e._v(":h :syn-conceal")]),e._v(" 讲的是 "),s("code",[e._v(":syn")]),e._v(" 命令的对于隐藏字符是如何显示的。")])]),e._v(" "),s("li",[s("p",[e._v("快速修复命令以 "),s("code",[e._v(":c")]),e._v(" 开头，而位置列表命令以 "),s("code",[e._v(":l")]),e._v(" 开头。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v(":h BufWinLeave")]),e._v(" 讲的是 BufWinLeave 自动命令。还有，"),s("code",[e._v(":h autocommand-events")]),e._v(" （译者注：原文是 "),s("code",[e._v(":h autocommands-events")]),e._v("，但是没有该帮助）讲的是所有可用的事件。")])]),e._v(" "),s("li",[s("p",[e._v("启动参数都以“-”开头，如："),s("code",[e._v(":h -f")]),e._v(" 会告诉你 Vim 中 “-f” 参数的作用。")])]),e._v(" "),s("li",[s("p",[e._v("额外的特性都以“+”开头，如："),s("code",[e._v(":h +conceal")]),e._v(" 讲的是关于隐藏字符的支持。")])]),e._v(" "),s("li",[s("p",[e._v("错误代码可以在帮助系统中直接查到。"),s("code",[e._v(":h E297")]),e._v(" 会带你到关于这一错误的详细解释。但是有时并没有转到错误描述，而是列出了经常导出这一错误的 Vim 命令，如 "),s("code",[e._v(":h E128")]),e._v(" （译者注：原文为"),s("code",[e._v(":h hE128")]),e._v("，但是并没有该帮助）会直接跳转到 "),s("code",[e._v(":function")]),e._v(" 命令。")])]),e._v(" "),s("li",[s("p",[e._v("关于包含的语法文件的文档的帮助话题格式是 "),s("code",[e._v(":h ft-*-syntax")]),e._v("。如："),s("code",[e._v(":h ft-c-syntax")]),e._v(" 说的就是 C 语言语法文件以及它所提供的选项。有的语法文件还会带有自动完成（"),s("code",[e._v(":h ft-php-omni")]),e._v("）或文件类型插件（"),s("code",[e._v(":h ft-tex-plugin")]),e._v("）相关的章节可以查看。")])])]),e._v(" "),s("p",[e._v("另外在每个帮助页的顶端通常会包含一个用户文档链接（更多的从从用户的角度出发来主角命令的功能和用法，不涉及那么多细节）。如："),s("code",[e._v(":h pattern.txt")]),e._v(" 里包含了 "),s("code",[e._v(":h 03.9")]),e._v(" 和 "),s("code",[e._v(":h usr_27")]),e._v(" 两个章节的链接。")]),e._v(" "),s("h2",{attrs:{id:"获取在线帮助-获取在线帮助"}},[s("code",[e._v("[](#获取在线帮助)获取在线帮助")])]),e._v(" "),s("p",[e._v("如果你遇到了无法解决的问题，或者需要指引的话，可以参考 "),s("a",{attrs:{href:"https://groups.google.com/forum/#!forum/vim_use",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim 使用"),s("OutboundLink")],1),e._v("邮件列表。 "),s("a",{attrs:{href:"https://de.wikipedia.org/wiki/Internet_Relay_Chat",target:"_blank",rel:"noopener noreferrer"}},[e._v("IRC"),s("OutboundLink")],1),e._v(" 也是一个很不错的资源。 "),s("a",{attrs:{href:"https://freenode.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Freenode"),s("OutboundLink")],1),e._v(" 上的 "),s("code",[e._v("#vim")]),e._v(" 频道很庞大，并且里面有许多乐于助人的人。")]),e._v(" "),s("p",[e._v("如果你想给 Vim 提交 Bug 的话，可以使用 "),s("a",{attrs:{href:"https://groups.google.com/forum/#!forum/vim_dev",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim_dev"),s("OutboundLink")],1),e._v(" 邮件列表。")]),e._v(" "),s("h2",{attrs:{id:"执行自动命令-执行自动命令"}},[s("code",[e._v("[](#执行自动命令)执行自动命令")])]),e._v(" "),s("p",[e._v("你可以触发任何事件，如："),s("code",[e._v(":doautocmd BufRead")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"用户自定义事件-用户自定义事件"}},[s("code",[e._v("[](#用户自定义事件)用户自定义事件")])]),e._v(" "),s("p",[e._v("对于插件而言，创建你自己的自定义事件有时非常有用。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("function"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" Chibby"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" A lot of stuff is happening here.\n    "')]),e._v(" And at last"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n    doautocmd User ChibbyExit\nendfunction\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("现在你插件的用户可以在 Chibby 执行完成之后做任何他想做的事情：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd User ChibbyExit call ChibbyCleanup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("顺便提一句，如果在使用 "),s("code",[e._v(":autocmd")]),e._v(" 或 "),s("code",[e._v(":doautocmd")]),e._v(' 时没有捕捉异常，那么会输出 "No matching autocommands" 信息。这也是为什么许多插件用 '),s("code",[e._v("silent doautocmd ...")]),e._v(" 的原因。但是这也会有不足，那就是你不能再在 :autocmd 中使用 "),s("code",[e._v('echo "foo"')]),e._v(" 了，取而代之的是你要使用 "),s("code",[e._v('unsilent echo "foo"')]),e._v(" 来输出。")]),e._v(" "),s("p",[e._v("这就是为什么要在触发事件之前先判断事件是否存在的原因，")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" exists"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'#User#ChibbyExit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  doautocmd User ChibbyExit\nendif\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("帮助文档："),s("code",[e._v(":h User")])]),e._v(" "),s("h3",{attrs:{id:"事件嵌套-事件嵌套"}},[s("code",[e._v("[](#事件嵌套)事件嵌套")])]),e._v(" "),s("p",[e._v("默认情况下，自动命令不能嵌套！如果某个自动命令执行了一个命令，这个命令再依次触发其它的事件，这是不可能的。")]),e._v(" "),s("p",[e._v("例如你想在每次启动 Vim 的时候自动打开你的 vimrc 文件：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd VimEnter * edit "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MYVIMRC")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("当你启动 Vim 的时候，它会帮你打开你的 vimrc 文件，但是你很快会注意到这个文件没有任何的高亮，尽管平时它是正常可以高亮的。")]),e._v(" "),s("p",[e._v("问题在于你的非嵌套自动命令 "),s("code",[e._v(":edit")]),e._v(" 不会触发“BufRead”事件，所以并不会把文件类型设置成“vim”，进而 "),s("code",[e._v("$VIMRUNTIME/syntax/vim.vim")]),e._v(" 永远不会被引入。详细信息请参考："),s("code",[e._v(":au BufRead *.vim")]),e._v("。要想完成上面所说的需求，使用下面这个命令：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd VimEnter * nested edit "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MYVIMRC")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("帮助文档："),s("code",[e._v(":h autocmd-nested")])]),e._v(" "),s("h2",{attrs:{id:"剪切板-剪切板"}},[s("code",[e._v("[](#剪切板)剪切板")])]),e._v(" "),s("p",[e._v("如果你想在没有 GUI 支持的 Unix 系统中使用 Vim 的 "),s("code",[e._v("'clipboard'")]),e._v(" 选项，则需要 "),s("code",[e._v("+clipboard")]),e._v(" 以及可选的 "),s("code",[e._v("+xterm_clipboard")]),e._v(" 两个"),s("a",{attrs:{href:"#what-kind-of-vim-am-i-running"}},[e._v("特性")]),e._v("支持。")]),e._v(" "),s("p",[e._v("帮助文档：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'clipboard'")]),e._v("\n:h gui-clipboard\n:h gui-selections\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("另外请参考："),s("a",{attrs:{href:"#%E6%8C%81%E7%BB%AD%E7%B2%98%E8%B4%B4%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E8%AE%BE%E7%BD%AE-paste-%E6%A8%A1%E5%BC%8F"}},[e._v("持续粘贴（为什么我每次都要设置 'paste' 模式")])]),e._v(" "),s("h3",{attrs:{id:"剪贴板的使用windows-osx-剪贴板的使用（windows-osx）"}},[s("code",[e._v("[](#剪贴板的使用windows-osx)剪贴板的使用（Windows, OSX）")])]),e._v(" "),s("p",[e._v("Windows 自带了"),s("a",{attrs:{href:"https://msdn.microsoft.com/en-us/library/windows/desktop/ms649012(v=vs.85).aspx",target:"_blank",rel:"noopener noreferrer"}},[e._v("剪贴板"),s("OutboundLink")],1),e._v("，OSX 则带了一个"),s("a",{attrs:{href:"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PasteboardGuide106/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008100-SW1",target:"_blank",rel:"noopener noreferrer"}},[e._v("粘贴板"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("在这两个系统中都可以用大家习惯用的 "),s("code",[e._v("ctrl+c / cmd+c")]),e._v(" 复制选择的文本，然后在另外一个应用中用 "),s("code",[e._v("ctrl+v / cmd+v")]),e._v(" 进行粘贴。")]),e._v(" "),s("p",[e._v("需要注意的是复制的文本已经被发送到了剪贴板，所以你在粘贴复制的内容之前关闭这个应用是没有任何问题的。")]),e._v(" "),s("p",[e._v("每次复制的时候，都会向剪贴板寄存器 "),s("code",[e._v("*")]),e._v(" 中写入数据。 而在 Vim 中分别使用 "),s("code",[e._v('"*y')]),e._v(" 和 "),s("code",[e._v('"*p')]),e._v(" 来进行复制（yank) 和 粘贴（paste)。")]),e._v(" "),s("p",[e._v("如果你不想每次操作都要指定 "),s("code",[e._v("*")]),e._v(" 寄存器，可以在你的 vimrc 中添加如下配置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clipboard")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("unnamed\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("通常情况下复制/删除/放入操作会往 "),s("code",[e._v('"')]),e._v(" 寄存器中写入数据，而加上了上面的配置之后 "),s("code",[e._v("*")]),e._v(" 寄存器也会被写入同样数据，因此简单的使用 "),s("code",[e._v("y")]),e._v(" 和 "),s("code",[e._v("p")]),e._v(" 就可以复制粘贴了。")]),e._v(" "),s("p",[e._v("我再说一遍：使用上面的选项意味着每一次的复制/粘贴，即使在同一个 Vim 窗口里，都会修改剪贴板的内容。你自己决定上面的选项是否适合。")]),e._v(" "),s("p",[e._v("如果你觉得输入 "),s("code",[e._v("y")]),e._v(" 还是太麻烦的话，可以使用下面的设置把在可视模式下选择的内容发送到剪贴板：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("clipboard")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("unnamed,autoselect\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("guioptions")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+=")]),e._v("a\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("帮助文档：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h clipboard-unnamed\n:h autoselect\n:h "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'go_a'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"剪贴板的使用linux-bsd-剪贴板的使用（linux-bsd-）"}},[s("code",[e._v("[](#剪贴板的使用linux-bsd-)剪贴板的使用（Linux, BSD, ...）")])]),e._v(" "),s("p",[e._v("如果你的系统使用了 "),s("a",{attrs:{href:"http://www.x.org/wiki",target:"_blank",rel:"noopener noreferrer"}},[e._v("X 图形界面"),s("OutboundLink")],1),e._v("，事情会变得有一点不同。X 图形界面实现了 "),s("a",{attrs:{href:"http://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("X 窗口系统协议"),s("OutboundLink")],1),e._v(", 这个协议在 1987 年发布的主版本 11，因此 X 也通常被称为 X11。")]),e._v(" "),s("p",[e._v("在 X10 版本中，"),s("a",{attrs:{href:"http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Cut_Buffers",target:"_blank",rel:"noopener noreferrer"}},[e._v("剪贴缓冲区"),s("OutboundLink")],1),e._v("被用来实现像 "),s("em",[e._v("clipboard")]),e._v(" 一样由 X 来复制文本，并且可以被所有的程序访问。现在这个机制在 X 中还存在，但是已经过时了，很多程序都不再使用这一机制。")]),e._v(" "),s("p",[e._v("近年来数据在程序之间是通过"),s("a",{attrs:{href:"http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Selections",target:"_blank",rel:"noopener noreferrer"}},[e._v("选择"),s("OutboundLink")],1),e._v("进行传递的。一共有三种选择，经常用到的有两种：PRIMARY 和 CLIPBOARD。")]),e._v(" "),s("p",[e._v("选择的工作工模大致是这样的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Program A：<ctrl+c>\nProgram A：声称对 CLIPBOARD 的所有权\nProgram B：<ctrl+v>\nProgram B：发现CLIPBOARD的所有权被Program A持有\nProgram B：从Program A请求数据\nProgram A：响应这个请求并发送数据给Program B\nProgram B：从Program A接收数据并插入到窗口中\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[e._v("选择")]),e._v(" "),s("th",[e._v("何时使用")]),e._v(" "),s("th",[e._v("如何粘贴")]),e._v(" "),s("th",[e._v("如何在 Vim 中访问")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("PRIMARY")]),e._v(" "),s("td",[e._v("选择文本")]),e._v(" "),s("td",[e._v("鼠标中键, shift+insert")]),e._v(" "),s("td",[s("code",[e._v("*")]),e._v(" 寄存器")])]),e._v(" "),s("tr",[s("td",[e._v("CLIPBOARD")]),e._v(" "),s("td",[e._v("选择文本并按 "),s("code",[e._v("ctrl+c")])]),e._v(" "),s("td",[s("code",[e._v("ctrl+v")])]),e._v(" "),s("td",[s("code",[e._v("+")]),e._v("寄存器")])])])]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：X 服务器并不会保存选择（不仅仅是 CLIPBOARD 选择）！因此在关闭了相应的程序后，你用 "),s("code",[e._v("ctrl+c")]),e._v(" 复制的内容将丢失。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v('"*p')]),e._v(" 来贴粘 PRIMARY 选择中的内容，或者使用 "),s("code",[e._v('"+y1G')]),e._v(" 来将整个文件的内容复制到 CLIPBOARD 选择。")]),e._v(" "),s("p",[e._v("如果你需要经常访问这两个寄存器，可以考虑使用如下配置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" clipboard^"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("unnamed          "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" * 寄存器\n"')]),e._v(" 或者\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" clipboard^"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v('unnamedplus      " + 寄存器\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("（"),s("code",[e._v("^=")]),e._v(" 用来将设置的值加到默认值之前，详见："),s("code",[e._v(":h :set^=")]),e._v("）")]),e._v(" "),s("p",[e._v("这会使得所有复制/删除/放入操作使用 "),s("code",[e._v("*")]),e._v(" 或 "),s("code",[e._v("+")]),e._v(" 寄存器代替默认的未命令寄存器 "),s("code",[e._v('"')]),e._v("。之后你就可以直接使用 "),s("code",[e._v("y")]),e._v(" 或 "),s("code",[e._v("p")]),e._v(" 访问你的 X 选择了。")]),e._v(" "),s("p",[e._v("帮助文档：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h clipboard-unnamed\n:h clipboard-unnamedplus\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"打开文件时恢复光标位置-打开文件时恢复光标位置"}},[s("code",[e._v("[](#打开文件时恢复光标位置)打开文件时恢复光标位置")])]),e._v(" "),s("p",[e._v("如果没有这个设置，每次打开文件时光标都将定位在第一行。而加入了这个设置以后，你就可以恢复到上次关闭文件时光标所在的位置了。")]),e._v(" "),s("p",[e._v("将下面的配置添加到你的 vimrc 文件：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd BufReadPost *\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"'"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"'"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" line"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("   exe "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"normal! g`'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[e._v('\\"')]),e._v('"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" endif\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("这是通过判断之前的光标位置是否存在（文件可能被其它程序修改而导致所记录的位置已经不存在了），如果存在的话就执行 "),s("code",[e._v('g`"')]),e._v(" （转到你离开时的光标位置但是不更改跳转列表）。")]),e._v(" "),s("p",[e._v("这需要使用 viminfo 文件："),s("code",[e._v(":h viminfo-")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"临时文件-临时文件"}},[s("code",[e._v("[](#临时文件)临时文件")])]),e._v(" "),s("p",[e._v("根据选项的不同， Vim 最多会创建 4 种工作文件。")]),e._v(" "),s("h3",{attrs:{id:"备份文件-备份文件"}},[s("code",[e._v("[](#备份文件)备份文件")])]),e._v(" "),s("p",[e._v("你可以让 Vim 在将修改写入到文件之前先备份原文件。默认情况下， Vim 会保存一个备份文件但是当修改成功写入后会立即删除它（"),s("code",[e._v(":set writebackup")]),e._v("）。如果你想一直保留这个备份文件的话，可以使用 "),s("code",[e._v(":set backup")]),e._v("。而如果你想禁用备份功能的话，可以使用 "),s("code",[e._v(":set nobackup nowritebackup")]),e._v("。")]),e._v(" "),s("p",[e._v("咱们来看一下上次我在 vimrc 中改了什么：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("diff")]),e._v(" ~/.vim/vimrc ~/.vim/files/backup/vimrc-vimbackup\n390d389\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" command"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" -bar -nargs"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("* -complete"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("help H helpgrep "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("帮助文档："),s("code",[e._v(":h backup")])]),e._v(" "),s("h3",{attrs:{id:"交换文件-交换文件"}},[s("code",[e._v("[](#交换文件)交换文件")])]),e._v(" "),s("p",[e._v("假设你有一个非常棒的科幻小说的构思。在按照故事情节已经写了好几个小时几十万字的时候..忽然停电了！而那时你才想起来你上次保存 "),s("code",[e._v("~/来自外太空的邪恶入侵者.txt")]),e._v(" 是在.. 好吧，你从来没有保存过。")]),e._v(" "),s("p",[e._v("但是并非没有希望了！在编辑某个文件的时候， Vim 会创建一个交换文件，里面保存的是对当前文件所有未保存的修改。自己试一下，打开任意的文件，并使用 "),s("code",[e._v(":swapname")]),e._v(" 获得当前的交换文件的保存路径。你也可以将 "),s("code",[e._v(":set noswapfile")]),e._v(" 加入到 vimrc 中来禁用交换文件。")]),e._v(" "),s("p",[e._v("默认情况下，交换文件会自动保存在被编辑文件所在的目录下，文件名以 "),s("code",[e._v(".file.swp")]),e._v(" 后缀结尾，每当你修改了超过 200 个字符或是在之前 4 秒内没有任何动作时更新它的内容，在你不再编辑这个文件的时候会被删除。你可以自己修改这些数字，详见："),s("code",[e._v(":h 'updatecount'")]),e._v(" 和 "),s("code",[e._v(":h 'updatetime'")]),e._v("。")]),e._v(" "),s("p",[e._v("而在断电时，交换文件并不会被删除。当你再次打开 "),s("code",[e._v("vim ~/来自外太空的邪恶入侵者.txt")]),e._v(" 时， Vim 会提示你恢复这个文件。")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h swap-file")]),e._v(" 和 "),s("code",[e._v(":h usr_11")])]),e._v(" "),s("h3",{attrs:{id:"撤销文件-撤销文件"}},[s("code",[e._v("[](#撤销文件)撤销文件")])]),e._v(" "),s("p",[s("a",{attrs:{href:"#%E5%86%85%E5%AE%B9%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95"}},[e._v("内容变更历史记录")]),e._v("是保存在内存中的，并且会在 Vim 退出时清空。如果你想让它持久化到磁盘中，可以设置 "),s("code",[e._v(":set undofile")]),e._v("。这会把文件 "),s("code",[e._v("~/foo.c")]),e._v(" 的撤销文件保存在 "),s("code",[e._v("~/foo.c.un~")]),e._v("。")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h 'undofile'")]),e._v(" 和 "),s("code",[e._v(":h undo-persistence")])]),e._v(" "),s("h3",{attrs:{id:"viminfo-文件-viminfo-文件"}},[s("code",[e._v("[](#viminfo-文件)viminfo 文件")])]),e._v(" "),s("p",[e._v("备份文件、交换文件和撤销文件都是与文本状态相关的，而 viminfo 文件是用来保存在 Vim 退出时可能会丢失的其它的信息的。包括历史记录（命令历史、搜索历史、输入历史）、寄存器内容、标注、缓冲区列表、全局变量等等。")]),e._v(" "),s("p",[e._v("默认情况下，viminfo 被保存在 "),s("code",[e._v("~/.viminfo")]),e._v("。")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h viminfo")]),e._v(" 和 "),s("code",[e._v(":h 'viminfo'")])]),e._v(" "),s("h3",{attrs:{id:"临时文件管理设置示例-临时文件管理设置示例"}},[s("code",[e._v("[](#临时文件管理设置示例)临时文件管理设置示例")])]),e._v(" "),s("p",[e._v("如果你跟我一样，也喜欢把这些文件放到一个位置（如："),s("code",[e._v("~/.vim/files")]),e._v("）的话，可以使用下面的配置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" 如果文件夹不存在，则新建文件夹\nif !isdirectory('),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v(".'/.vim/files') && exists('*mkdir')\n  call mkdir("),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v(".'/.vim/files')\nendif\n\n\"")]),e._v(" 备份文件\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" backup\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" backupdir   "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.vim/files/backup/\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" backupext   "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("-vimbackup\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" backupskip  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" 交换文件\nset directory   ='),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v('/.vim/files/swap//\nset updatecount =100\n"')]),e._v(" 撤销文件\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" undofile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" undodir     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v('/.vim/files/undo/\n" viminfo 文件\n'),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" viminfo     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("'100,n"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.vim/files/info/viminfo\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("注意：如果你在一个多用户系统中编辑某个文件时， Vim 提示你交换文件已经存在的话，可能是因为有其他的用户此时正在编辑这个文件。而如果将交换文件放到自己的 home 目录的话，这个功能就失效了。因此服务器非常不建议将这些文件修改到 HOME 目录，避免多人同时编辑一个文件，却没有任何警告。")]),e._v(" "),s("h2",{attrs:{id:"编辑远程文件-编辑远程文件"}},[s("code",[e._v("[](#编辑远程文件)编辑远程文件")])]),e._v(" "),s("p",[e._v("Vim 自带的 netrw 插件支持对远程文件的编辑。实际上它将远程的文件通过 scp 复制到本地的临时文件中，再用那个文件打开一个缓冲区，然后在保存时把文件再复制回远程位置。")]),e._v(" "),s("p",[e._v("下面的命令在你本地的 VIM 配置与 SSH 远程服务器上管理员想让你使用的配置有冲突时尤其有用：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":e scp://bram@awesome.site.com/.vimrc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果你已经设置了 "),s("code",[e._v("~/.ssh/config")]),e._v("，SSH 会自动读取这里的配置：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Host awesome\n    HostName awesome.site.com\n    Port 1234\n    User bram\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("如果你的 "),s("code",[e._v("~/.ssh/config")]),e._v(" 中有以上的内容，那么下面的命令就可以正常执行了：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":e scp://awesome/.vimrc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("可以用同样的方法编辑 "),s("code",[e._v("~/.netrc")]),e._v(", 详见："),s("code",[e._v(":h netrc-netrc")]),e._v("。")]),e._v(" "),s("p",[e._v("确保你已经看过了 "),s("code",[e._v(":h netrw-ssh-hack")]),e._v(" 和 "),s("code",[e._v(":h g:netrw_ssh_cmd")]),e._v("。")]),e._v(" "),s("p",[e._v("另外一种编辑远程文件的方法是使用 "),s("a",{attrs:{href:"https://wiki.archlinux.org/index.php/Sshfs",target:"_blank",rel:"noopener noreferrer"}},[e._v("sshfs"),s("OutboundLink")],1),e._v("，它会用 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Filesystem_in_Userspace",target:"_blank",rel:"noopener noreferrer"}},[e._v("FUSE"),s("OutboundLink")],1),e._v(" 来挂载远程的文件系统到你本地的系统当中。")]),e._v(" "),s("h2",{attrs:{id:"插件管理-插件管理"}},[s("code",[e._v("[](#插件管理)插件管理")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tpope/vim-pathogen",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pathogen"),s("OutboundLink")],1),e._v("是第一个比较流行的插件管理工具。实际上它只是修改了 "),s("em",[e._v("runtimepath")]),e._v(" （"),s("code",[e._v(":h 'rtp'")]),e._v("） 来引入所有放到该目录下的文件。你需要自己克隆插件的代码仓库到那个目录。")]),e._v(" "),s("p",[e._v("真正的插件管理工具会在 Vim 中提供帮助你安装或更新插件的命令。以下是一些常用的插件管理工具：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/Shougo/dein.vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("dein"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/junegunn/vim-plug",target:"_blank",rel:"noopener noreferrer"}},[e._v("plug"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/MarcWeber/vim-addon-manager",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim-addon-manager"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/VundleVim/Vundle.vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("vundle"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"多行编辑-多行编辑"}},[s("code",[e._v("[](#多行编辑)多行编辑")])]),e._v(" "),s("p",[e._v("这是一种可以同时输入多行连续文本的技术。参考这个"),s("a",{attrs:{href:"https://raw.githubusercontent.com/mhinz/vim-galore/master/contents/images/content-block_insert.gif",target:"_blank",rel:"noopener noreferrer"}},[e._v("示例"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[e._v("用 "),s("code",[e._v("<c-v>")]),e._v(" 切换到可视块模式。然后向下选中几行，按 "),s("code",[e._v("I")]),e._v(" 或 "),s("code",[e._v("A")]),e._v(" （译者注：大写字母，即 shift+i 或 shift+a）然后开始输入你想要输入的文本。")]),e._v(" "),s("p",[e._v("在刚开始的时候可能会有些迷惑，因为文本只出现在了当前编辑的行，只有在当前的插入动作结束后，之前选中的其它行才会出现插入的文本。")]),e._v(" "),s("p",[e._v("举一个简单的例子："),s("code",[e._v("<c-v>3jItext<esc>")]),e._v("。")]),e._v(" "),s("p",[e._v("如果你要编辑的行长度不同，但是你想在他们后面追加相同的内容的话，可以试一下这个："),s("code",[e._v("<c-v>3j$Atext<esc>")]),e._v("。")]),e._v(" "),s("p",[e._v("有时你可能需要把光标放到当前行末尾之后，默认情况下你是不可能做到的，但是可能通过设置 "),s("code",[e._v("virtualedit")]),e._v(" 选项达到目的：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("virtualedit")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("all\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("设置之后 "),s("code",[e._v("$10l")]),e._v(" 或 "),s("code",[e._v("90|")]),e._v(" 都会生效，即使超过了行尾的长度。")]),e._v(" "),s("p",[e._v("详见 "),s("code",[e._v(":h blockwise-examples")]),e._v("。在开始的时候可能会觉得有些复杂，但是它很快就会成为你的第二天性的。")]),e._v(" "),s("p",[e._v("如果你想探索更有趣的事情，可以看看"),s("a",{attrs:{href:"https://github.com/terryma/vim-multiple-cursors",target:"_blank",rel:"noopener noreferrer"}},[e._v("多光标"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"使用外部程序和过滤器-使用外部程序和过滤器"}},[s("code",[e._v("[](#使用外部程序和过滤器)使用外部程序和过滤器")])]),e._v(" "),s("p",[e._v("免责声明：Vim 是单线程的，因此在 Vim 中以前端进程执行其它的程序时会阻止其它的一切。当然你可以使用 Vim 程序接口，如 Lua，并且使用它的多线程支持，但是在那期间， Vim 的处理还是被阻止了。Neovim 添加了任务 API 解决了此问题。")]),e._v(" "),s("p",[e._v("（据说 Bram 正在考虑在 Vim 中也添加任务控制。如果你使用了较新版本的的 Vim ，可以看一下 "),s("code",[e._v(":helpgrep startjob")]),e._v("。）")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":!")]),e._v(" 启动一个新任务。如果你想列出当前工作目录下的所有文件，可以使用 "),s("code",[e._v(":!ls")]),e._v("。 用 "),s("code",[e._v("|")]),e._v(" 来将结果通过管道重定向，如："),s("code",[e._v(":!ls -l | sort | tail -n5")]),e._v("。")]),e._v(" "),s("p",[e._v("没有使用范围时（译者注：范围就是 "),s("code",[e._v(":")]),e._v(" 和 "),s("code",[e._v("!")]),e._v(" 之间的内容，"),s("code",[e._v(".")]),e._v(" 表示当前行，"),s("code",[e._v("+4")]),e._v(" 表示向下偏移 4 行，"),s("code",[e._v("$")]),e._v(" 表示最末行等，多行时用 "),s("code",[e._v(",")]),e._v(" 将它们分开，如 "),s("code",[e._v(".,$")]),e._v(" 表示从当前行到末行），"),s("code",[e._v(":!")]),e._v(" 会显示在一个可滚动的窗口中（译者注：在 GVim 和在终端里运行的结果稍有不同）。相反的，如果指定了范围，这些行会被 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Filter_(software)",target:"_blank",rel:"noopener noreferrer"}},[e._v("过滤"),s("OutboundLink")],1),e._v("。这意味着它们会通过管道被重定向到过滤程序的 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29",target:"_blank",rel:"noopener noreferrer"}},[e._v("stdin"),s("OutboundLink")],1),e._v("，在处理后再通过过滤程序的 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29",target:"_blank",rel:"noopener noreferrer"}},[e._v("stdout"),s("OutboundLink")],1),e._v(" 输出，用输出结果替换范围内的文本。例如：为接下来的 5 行文本添加行号，可以使用：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":.,+4"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("nl -ba -w1 -s"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("由于手动添加范围很麻烦， Vim 提供了一些辅助方法以方便的添加范围。如果需要经常带着范围的话，你可以在可见模式中先选择，然后再按 "),s("code",[e._v(":")]),e._v(" （译者注：选中后再按 "),s("code",[e._v("!")]),e._v(" 更方便）。还可以使用 "),s("code",[e._v("!")]),e._v(" 来取用一个 motion 的范围，如 "),s("code",[e._v("!ipsort")]),e._v(" （译者注：原文为 "),s("code",[e._v("!ip!sort")]),e._v(" ，但经过实验发现该命令执行报错，可能是因为 Vim 版本的原因造成的，新版本使用 "),s("code",[e._v("ip")]),e._v(" 选择当前段落后自动在命令后添加了 "),s("code",[e._v("!")]),e._v(" ，按照作者的写法来看，可能之前的版本没有自动添加 "),s("code",[e._v("!")]),e._v(" ）可以将当前段落的所有行按字母表顺序进行排序。")]),e._v(" "),s("p",[e._v("一个使用过滤器比较好的案例是"),s("a",{attrs:{href:"https://golang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 语言"),s("OutboundLink")],1),e._v("。它的缩进语法非常个性，甚至还专门提供了一个名为 "),s("code",[e._v("gofmt")]),e._v(" 的过滤器来对 Go 语言的源文件进行正确的缩进。Go 语言的插件通常会提供一个名为 "),s("code",[e._v(":Fmt")]),e._v(" 的函数，这个函数就是执行了 "),s("code",[e._v(":%!gofmt")]),e._v(" 来对整个文件进行缩进。")]),e._v(" "),s("p",[e._v("人们常用 "),s("code",[e._v(":r !prog")]),e._v(" 将 prog 程序的插入放到当前行的下面，这对于脚本来说是很不错的选择，但是在使用的过程中我发现 "),s("code",[e._v("!!ls")]),e._v(" 更加方便，它会用输出结果替换当前行的内容。（译者注：前面命令中的 "),s("code",[e._v("prog")]),e._v(" 只是个占位符，在实际使用中需要替换成其它的程序，如 "),s("code",[e._v(":r !ls")]),e._v("，这就与后面的 "),s("code",[e._v("!!ls")]),e._v(" 相对应了，两者唯一的不同是第一个命令不会覆盖当前行内容，但是第二个命令会）")]),e._v(" "),s("p",[e._v("帮助文档：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h filter\n:h :read"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"cscope-cscope"}},[s("code",[e._v("[](#cscope)Cscope")])]),e._v(" "),s("p",[s("a",{attrs:{href:"http://cscope.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cscope"),s("OutboundLink")],1),e._v(" 的功能比 "),s("a",{attrs:{href:"http://ctags.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ctags"),s("OutboundLink")],1),e._v(" 要完善，但是只支持 C（通过设置 cscope.files 后同样支持 C++以及 Java）。")]),e._v(" "),s("p",[e._v("鉴于 Tag 文件只是知道某个符号是在哪里定义的，cscope 的数据库里的数据信息就多的多了：")]),e._v(" "),s("ul",[s("li",[e._v("符号是在哪里定义的？")]),e._v(" "),s("li",[e._v("符号是在哪里被使用的？")]),e._v(" "),s("li",[e._v("这个全局符号定义了什么？")]),e._v(" "),s("li",[e._v("这个变量是在哪里被赋值的？")]),e._v(" "),s("li",[e._v("这个函数在源文件的哪个位置？")]),e._v(" "),s("li",[e._v("哪些函数调用了这个函数？")]),e._v(" "),s("li",[e._v("这个函数调用了哪些函数？")]),e._v(" "),s("li",[e._v('"out of space"消息是从哪来的？')]),e._v(" "),s("li",[e._v("在目录结构中当前的源文件在哪个位置？")]),e._v(" "),s("li",[e._v("哪些文件引用了这个头文件？")])]),e._v(" "),s("h3",{attrs:{id:"_1-构建数据库-1-构建数据库"}},[s("code",[e._v("[](#1-构建数据库)1. 构建数据库")])]),e._v(" "),s("p",[e._v("在你项目的根目录执行下面的命令：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ cscope -bqR\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这条命令会在当前目录下创建三个文件："),s("code",[e._v("cscope{,.in,.po}.out")]),e._v(" 。把它们想象成你的数据库。")]),e._v(" "),s("p",[e._v("不幸的时 "),s("code",[e._v("cscope")]),e._v(" 默认只分析 "),s("code",[e._v("*.[c|h|y|l]")]),e._v(" 文件。如果你想在 Java 项目中使用 cscope ，需要这样做：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" -name "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*.java"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" cscope.files\n$ cscope -bq\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"_2-添加数据库-2-添加数据库"}},[s("code",[e._v("[](#2-添加数据库)2. 添加数据库")])]),e._v(" "),s("p",[e._v("打开你新创建的数据库连接：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":cs "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" cscope.out\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("检查连接已经创建成功：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":cs show\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("（当然你可以添加多个连接。）")]),e._v(" "),s("h3",{attrs:{id:"_3-查询数据库-3-查询数据库"}},[s("code",[e._v("[](#3-查询数据库)3. 查询数据库")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":cs "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("kind"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("query"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如："),s("code",[e._v(":cs find d foo")]),e._v(" 会列出 "),s("code",[e._v("foo(...)")]),e._v(" 调用的所有函数。")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Kind")]),e._v(" "),s("th",[e._v("说明")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("s")]),e._v(" "),s("td",[s("strong",[e._v("s")]),e._v("ymbol：查找使用该符号的引用")])]),e._v(" "),s("tr",[s("td",[e._v("g")]),e._v(" "),s("td",[s("strong",[e._v("g")]),e._v("lobal：查找该全局符号的定义")])]),e._v(" "),s("tr",[s("td",[e._v("c")]),e._v(" "),s("td",[s("strong",[e._v("c")]),e._v("alls：查找调用当前方法的位置")])]),e._v(" "),s("tr",[s("td",[e._v("t")]),e._v(" "),s("td",[s("strong",[e._v("t")]),e._v("ext：查找出现该文本的位置")])]),e._v(" "),s("tr",[s("td",[e._v("e")]),e._v(" "),s("td",[s("strong",[e._v("e")]),e._v("grep：使用 egrep 搜索当前单词")])]),e._v(" "),s("tr",[s("td",[e._v("f")]),e._v(" "),s("td",[s("strong",[e._v("f")]),e._v("ile：打开文件名")])]),e._v(" "),s("tr",[s("td",[e._v("i")]),e._v(" "),s("td",[s("strong",[e._v("i")]),e._v("ncludes：查询引入了当前文件的文件")])]),e._v(" "),s("tr",[s("td",[e._v("d")]),e._v(" "),s("td",[s("strong",[e._v("d")]),e._v("epends：查找当前方法调用的方法")])])])]),e._v(" "),s("p",[e._v("推荐一些比较方便的映射，如：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("cs :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" s  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("cg :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" g  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("cc :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" c  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("ct :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" t  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("ce :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" e  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("cf :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" f  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cfile>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("ci :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" i ^"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cfile>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("buffer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("cd :cscope "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" d  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'<cword>'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("p",[e._v("所以 "),s("code",[e._v(":tag")]),e._v(" （或 "),s("code",[e._v("<c-]>")]),e._v("）跳转到标签定义的文件，而 "),s("code",[e._v(":cstag")]),e._v(" 可以达到同样的目的，同时还会打开 cscope 的数据库连接。"),s("code",[e._v("'cscopetag'")]),e._v(" 选项使得 "),s("code",[e._v(":tag")]),e._v(" 命令自动的像 "),s("code",[e._v(":cstag")]),e._v(" 一样工作。这在你已经使用了基于标签的映射时会非常方便。")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h cscope")])]),e._v(" "),s("h2",{attrs:{id:"matchit-matchit"}},[s("code",[e._v("[](#matchit)MatchIt")])]),e._v(" "),s("p",[e._v("由于 Vim 是用 C 语言编写的，因此许多功能都假设使用类似 C 语言的语法。默认情况下，如果你的光标在 "),s("code",[e._v("{")]),e._v(" 或 "),s("code",[e._v("#endif")]),e._v(" , 就可以使用 "),s("code",[e._v("%")]),e._v(" 跳转到与之匹配的 "),s("code",[e._v("}")]),e._v(" 或 "),s("code",[e._v("#ifdef")]),e._v("。")]),e._v(" "),s("p",[e._v("Vim 自带了一个名为 matchit.vim 的插件，但是默认没有启用。启用后可以用 "),s("code",[e._v("%")]),e._v(" 在 HTML 相匹配的标签或 shell 的 if/else/endif 块之间进行跳转，它还带来了一些新的命令。")]),e._v(" "),s("h3",{attrs:{id:"在-vim-8-中安装-在-vim-8-中安装"}},[s("code",[e._v("[](#在-vim-8-中安装)在 Vim 8 中安装")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v('" vimrc\npackadd'),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" matchit\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"在-vim-7-或者更早的版本中安装-在-vim-7-或者更早的版本中安装"}},[s("code",[e._v("[](#在-vim-7-或者更早的版本中安装)在 Vim 7 或者更早的版本中安装")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v('"vimrc\nruntime macros/matchit.vim\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("由于 matchit 的文档很全面，我建议安装以后执行一次下面的命令：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("mkdir -p ~/.vim/doc\n:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("cp "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$VIMRUNTIME")]),e._v("/macros/matchit.vim ~/.vim/doc\n:helptags ~/.vim/doc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"简短的介绍-简短的介绍"}},[s("code",[e._v("[](#简短的介绍)简短的介绍")])]),e._v(" "),s("p",[e._v("至此这个插件已经可以使用了。 参考 "),s("code",[e._v(":h matchit-intro")]),e._v(" 来获得支持的命令以及 "),s("code",[e._v(":h matchit-languages")]),e._v(" 来获得支持的语言。")]),e._v(" "),s("p",[e._v("你可以很方便的定义自己的匹配对，如：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd FileType python "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" b:match_words "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\<if\\>:\\<elif\\>:\\<else\\>'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("之后你就可以在任何的 Python 文件中使用 "),s("code",[e._v("%")]),e._v(" （向前）或 "),s("code",[e._v("g%")]),e._v(" （向后）在这三个片断之间跳转了。")]),e._v(" "),s("p",[e._v("帮助文档：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":h matchit-install\n:h matchit\n:h b:match_words\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h1",{attrs:{id:"技巧-技巧"}},[s("code",[e._v("[](#技巧)技巧")])]),e._v(" "),s("h2",{attrs:{id:"跳至选择的区域另一端-跳至选择的区域另一端"}},[s("code",[e._v("[](#跳至选择的区域另一端)跳至选择的区域另一端")])]),e._v(" "),s("p",[e._v("在使用 "),s("code",[e._v("v")]),e._v(" 或者 "),s("code",[e._v("V")]),e._v(" 选择某段文字后，可以用 "),s("code",[e._v("o")]),e._v(" 或者 "),s("code",[e._v("O")]),e._v(" 按键跳至选择区域的开头或者结尾。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(":h v_o\n:h v_O\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h2",{attrs:{id:"聪明地使用-n-和-n-聪明地使用-n-和-n"}},[s("code",[e._v("[](#聪明地使用-n-和-n)聪明地使用 n 和 N")])]),e._v(" "),s("p",[e._v("n 与 N 的实际跳转方向取决于使用 "),s("code",[e._v("/")]),e._v(" 还是 "),s("code",[e._v("?")]),e._v(" 来执行搜索，其中 "),s("code",[e._v("/")]),e._v(" 是向后搜索，"),s("code",[e._v("?")]),e._v(" 是向前搜索。一开始我（原作者）觉得这里很难理解。")]),e._v(" "),s("p",[e._v("如果你希望 n 始终为向后搜索，N 始终为向前搜索，那么只需要这样设置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("expr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Nn'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("v:searchforward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("expr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" N  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'nN'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("v:searchforward"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"聪明地使用命令行历史-聪明地使用命令行历史"}},[s("code",[e._v("[](#聪明地使用命令行历史)聪明地使用命令行历史")])]),e._v(" "),s("p",[e._v("我（原作者）习惯用 Ctrl + p 和 Ctrl + n 来跳转到上一个/下一个条目。其实这个操作也可以用在命令行中，快速调出之前执行过的命令。")]),e._v(" "),s("p",[e._v("不仅如此，你会发现 上 和 下 其实更智能。如果命令行中已经存在了一些文字，我们可以通过按方向键来匹配已经存在的内容。比如，命令行中现在是 "),s("code",[e._v(":echo")]),e._v("，这时候我们按 上，就会帮我们补全成 "),s("code",[e._v(':echo "Vim rocks!"')]),e._v("（前提是，之前输入过这段命令）。")]),e._v(" "),s("p",[e._v("当然，Vim 用户都不愿意去按方向键，事实上我们也不需要去按，只需要设置这样的映射：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("cnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("down"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\ncnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-p"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("up"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这个功能，我（原作者）每天都要用很多次。")]),e._v(" "),s("h2",{attrs:{id:"智能-ctrl-l-智能-ctrl-l"}},[s("code",[e._v("[](#智能-ctrl-l)智能 Ctrl-l")])]),e._v(" "),s("p",[e._v("Ctrl + l 的默认功能是清空并「重新绘制」当前的屏幕，就和 "),s("code",[e._v(":redraw!")]),e._v(" 的功能一样。下面的这个映射就是执行重新绘制，并且取消通过 "),s("code",[e._v("/")]),e._v(" 和 "),s("code",[e._v("?")]),e._v(" 匹配字符的高亮，而且还可以修复代码高亮问题（有时候，由于多个代码高亮的脚本重叠，或者规则过于复杂，Vim 的代码高亮显示会出现问题）。不仅如此，还可以刷新「比较模式」（请参阅 "),s("code",[e._v(":help diff-mode")]),e._v("）的代码高亮：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("l :nohlsearch"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(":diffupdate"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(":syntax "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sync")]),e._v(" fromstart"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-l"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"禁用错误报警声音和图标-禁用错误报警声音和图标"}},[s("code",[e._v("[](#禁用错误报警声音和图标)禁用错误报警声音和图标")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" noerrorbells\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" novisualbell\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("t_vb")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("请参阅 "),s("a",{attrs:{href:"http://vim.wikia.com/wiki/Disable_beeping",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim Wiki: Disable beeping"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"快速移动当前行-快速移动当前行"}},[s("code",[e._v("[](#快速移动当前行)快速移动当前行")])]),e._v(" "),s("p",[e._v("有时，我（原作者）想要快速把当前行上移或下移一行，只需要这样设置映射：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("e  :"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("execute "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'move -1-'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" v:count"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("1")]),e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("e  :"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("execute "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'move +'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" v:count"),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("1")]),e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这个映射，同样可以搭配数字使用，比如连续按下 2 ] e 就可以把当前行向下移动两行。")]),e._v(" "),s("h2",{attrs:{id:"快速添加空行-快速添加空行"}},[s("code",[e._v("[](#快速添加空行)快速添加空行")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("space"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  :"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("put"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("repeat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nr2char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", v:count1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("'"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\nnnoremap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("space"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  :"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("put "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("repeat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("nr2char"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", v:count1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("设置之后，连续按下 5 [ 空格 在当前行上方插入 5 个空行。")]),e._v(" "),s("h3",{attrs:{id:"运行时检测-运行时检测"}},[s("code",[e._v("[](#运行时检测)运行时检测")])]),e._v(" "),s("p",[e._v("需要的特性：+profile")]),e._v(" "),s("p",[e._v("Vim 提供了一个内置的运行时检查功能，能够找出运行慢的代码。")]),e._v(" "),s("p",[s("code",[e._v(":profile")]),e._v(" 命令后面跟着子命令来确定要查看什么。")]),e._v(" "),s("p",[e._v("如果你想查看所有的：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":profile start /tmp/profile.log\n:profile "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" *\n:profile func *\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("do something "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" Vim"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("quit Vim"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("Vim 不断地在内存中检查信息，只在退出的时候输出出来。（Neovim 已经解决了这个问题用 "),s("code",[e._v(":profile dump")]),e._v(" 命令）")]),e._v(" "),s("p",[e._v("看一下 "),s("code",[e._v("/tmp/profile.log")]),e._v(" 文件，检查时运行的所有代码都会被显示出来，包括每一行代码运行的频率和时间。")]),e._v(" "),s("p",[e._v("大多数代码都是用户不熟悉的插件代码，如果你是在解决一个确切的问题， 直接跳到这个日志文件的末尾，那里有 "),s("code",[e._v("FUNCTIONS SORTED ON TOTAL TIME")]),e._v(" 和 "),s("code",[e._v("FUNCTIONS SORTED ON SELF TIME")]),e._v(" 两个部分，如果某个 function 运行时间过长一眼就可以看到。")]),e._v(" "),s("h3",{attrs:{id:"查看启动时间-查看启动时间"}},[s("code",[e._v("[](#查看启动时间)查看启动时间")])]),e._v(" "),s("p",[e._v("感觉 Vim 启动的慢？到了研究几个数字的时候了：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" --startuptime /tmp/startup.log +q "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" /tmp/startup.log\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("第一栏是最重要的因为它显示了"),s("strong",[e._v("绝对运行时间")]),e._v("，如果在前后两行之间时间差有很大的跳跃，那么是第二个文件太大或者含有需要检查的错误的 shell 代码。")]),e._v(" "),s("h2",{attrs:{id:"nul-符用新行表示-nul-符用新行表示"}},[s("code",[e._v("[](#nul-符用新行表示)NUL 符用新行表示")])]),e._v(" "),s("p",[e._v("文件中的 NUL 符 （"),s("code",[e._v("\\0")]),e._v("），在内存中被以新行（"),s("code",[e._v("\\n")]),e._v("）保存，在缓存空间中显示为 "),s("code",[e._v("^@")]),e._v("。")]),e._v(" "),s("p",[e._v("更多信息请参看 "),s("code",[e._v("man 7 ascii")]),e._v(" 和 "),s("code",[e._v(":h NL-used-for-Nul")]),e._v(" 。")]),e._v(" "),s("h2",{attrs:{id:"快速编辑自定义宏-快速编辑自定义宏"}},[s("code",[e._v("[](#快速编辑自定义宏)快速编辑自定义宏")])]),e._v(" "),s("p",[e._v("这个功能真的很实用！下面的映射，就是在一个新的命令行窗口中读取某一个寄存器（默认为 "),s("code",[e._v("*")]),e._v("）。当你设置完成后，只需要按下 回车 即可让它生效。")]),e._v(" "),s("p",[e._v("在录制宏的时候，我经常用这个来更改拼写错误。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("leader"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("m  :"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-u"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-r"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'let @'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" v:register "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("' = '")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("getreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("v:register"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("))")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-f"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("left"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('只需要连续按下 leader m 或者 " leader m 就可以调用了。')]),e._v(" "),s("p",[e._v("请注意，这里之所以要写成 "),s("code",[e._v("<c-r><c-r>")]),e._v(" 是为了确保 "),s("code",[e._v("<c-r>")]),e._v(" 执行了。请参阅 "),s("code",[e._v(":h c_^R^R")])]),e._v(" "),s("h2",{attrs:{id:"快速跳转到源头文件-快速跳转到源-头-文件"}},[s("code",[e._v("[](#快速跳转到源头文件)快速跳转到源(头)文件")])]),e._v(" "),s("p",[e._v("这个技巧可以用在多种文件类型中。当你从源文件或者头文件中切换到其他文件的时候，这个技巧可以设置「文件标记」（请参阅 "),s("code",[e._v(":h marks")]),e._v("），然后你就可以通过连续按下 ' C 或者 ' H 快速跳转回去（请参阅 "),s("code",[e._v(":h 'A")]),e._v("）。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd BufLeave *."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("c,cpp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" mark C\nautocmd BufLeave *.h       mark H\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("strong",[e._v("注意")]),e._v("：由于这个标记是设置在 viminfo 文件中，因此请先确认 "),s("code",[e._v(":set viminfo?")]),e._v(" 中包含了 "),s("code",[e._v(":h viminfo-'")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"在-gui-中快速改变字体大小-在-gui-中快速改变字体大小"}},[s("code",[e._v("[](#在-gui-中快速改变字体大小)在 GUI 中快速改变字体大小")])]),e._v(" "),s("p",[e._v("印象中，我（原作者）记得一下代码是来自 tpope's 的配置文件：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" Bigger  :let "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("guifont "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" substitute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("guifont, "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\d\\+$'")]),e._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\=submatch(0)+1'")]),e._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\ncommand"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" Smaller :let "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("guifont "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" substitute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("guifont, "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\d\\+$'")]),e._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\=submatch(0)-1'")]),e._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"根据模式改变光标类型-根据模式改变光标类型"}},[s("code",[e._v("[](#根据模式改变光标类型)根据模式改变光标类型")])]),e._v(" "),s("p",[e._v('我（原作者）习惯在普通模式下用块状光标，在插入模式下用条状光标（形状类似英文 "I" 的样子），然后在替换模式中使用下划线形状的光标。')]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$TMUX")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_SI "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>]50;CursorShape=1'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v('"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_EI "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>]50;CursorShape=0'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v('"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_SR "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>]50;CursorShape=2'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v('"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_SI "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>Ptmux;\\<Esc>\\<Esc>]50;CursorShape=1'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v("\\<Esc>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),e._v('"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_EI "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>Ptmux;\\<Esc>\\<Esc>]50;CursorShape=0'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v("\\<Esc>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),e._v('"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("t_SR "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"\\<Esc>Ptmux;\\<Esc>\\<Esc>]50;CursorShape=2'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\x7"}},[e._v("\\x7")]),e._v("\\<Esc>"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[e._v("\\\\")]),e._v('"')]),e._v("\nendif\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("原理很简单，就是让 Vim 在进入和离开插入模式的时候，输出一些序列，请参考 "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Escape_sequence",target:"_blank",rel:"noopener noreferrer"}},[e._v("escape sequence"),s("OutboundLink")],1),e._v("。Vim 与终端之间的中间层，比如 "),s("a",{attrs:{href:"https://tmux.github.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("tmux"),s("OutboundLink")],1),e._v(" 会处理并执行上面的代码。")]),e._v(" "),s("p",[e._v("但上面这个还是有一个缺点的。终端环境的内部原理不尽相同，对于序列的处理方式也稍有不同。因此，上面的代码可能无法在你的环境中运行。甚至，你的运行环境也有可能不支持其他光标形状，请参阅你的 Vim 运行环境的文档。")]),e._v(" "),s("p",[e._v("好消息是，上面这个代码，可以在 iTerm2 中完美运行。")]),e._v(" "),s("h2",{attrs:{id:"防止水平滑动的时候失去选择-防止水平滑动的时候失去选择"}},[s("code",[e._v("[](#防止水平滑动的时候失去选择)防止水平滑动的时候失去选择")])]),e._v(" "),s("p",[e._v("如果你选中了一行或多行，那么你可以用 < 或 > 来调整他们的缩进。但在调整之后就不会保持选中状态了。")]),e._v(" "),s("p",[e._v("你可以连续按下 g v 来重新选中他们，请参考 "),s("code",[e._v(":h gv")]),e._v("。因此，你可以这样来配置映射：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("xnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("gv\nxnoremap "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("gv\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("设置好之后，在可视模式中使用 "),s("code",[e._v(">>>>>")]),e._v(" 就不会再出现上面提到的问题了。")]),e._v(" "),s("h2",{attrs:{id:"选择当前行至结尾排除换行符-选择当前行至结尾，排除换行符"}},[s("code",[e._v("[](#选择当前行至结尾排除换行符)选择当前行至结尾，排除换行符")])]),e._v(" "),s("p",[e._v("在 Vim 里，我们可以同过 "),s("code",[e._v("v$")]),e._v(" 选择当前行至结尾，但此时会把最后一个换行符也选中，通常需要按额外的 "),s("code",[e._v("h")]),e._v(" 来取消最后选中最后一个换行符号。 Vim 提供了一个 "),s("code",[e._v("g_")]),e._v(" 快捷键，可以移动光标至最后一个非空字符。因此，为达到次效果，可以使用 "),s("code",[e._v("vg_")]),e._v("。当然，如果觉得按三个键比较麻烦， 可以添加一个映射：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("nnoremap L g_\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样就可以通过 "),s("code",[e._v("vL")]),e._v(" 达到一样的效果了。")]),e._v(" "),s("h2",{attrs:{id:"重新载入保存文件-重新载入保存文件"}},[s("code",[e._v("[](#重新载入保存文件)重新载入保存文件")])]),e._v(" "),s("p",[e._v("通过"),s("a",{attrs:{href:"#%E8%87%AA%E5%8A%A8%E5%91%BD%E4%BB%A4"}},[e._v("自动命令")]),e._v("，你可以在保存文件的同时触发一些其他功能。比如，如果这个文件是一个配置文件，那么就重新载入；或者你还可以对这个文件进行代码风格检查。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd BufWritePost "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MYVIMRC")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("source")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MYVIMRC")]),e._v("\nautocmd BufWritePost ~/.Xdefaults call system"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'xrdb ~/.Xdefaults'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"更加智能的当前行高亮-更加智能的当前行高亮"}},[s("code",[e._v("[](#更加智能的当前行高亮)更加智能的当前行高亮")])]),e._v(" "),s("p",[e._v("我（原作者）很喜欢「当前行高亮」（请参阅 "),s("code",[e._v(":h cursorline")]),e._v("）这个功能，但我只想让这个效果出现在当前窗口，而且在插入模式中关闭这个效果：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd InsertLeave,WinEnter * "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" cursorline\nautocmd InsertEnter,WinLeave * "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" nocursorline\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"更快的关键字补全-更快的关键字补全"}},[s("code",[e._v("[](#更快的关键字补全)更快的关键字补全")])]),e._v(" "),s("p",[e._v("关键字补全（"),s("code",[e._v("<c-n>")]),e._v(" 或 "),s("code",[e._v("<c-p>")]),e._v("）功能的工作方式是，无论 "),s("code",[e._v("'complete'")]),e._v(" 设置中有什么，它都会尝试着去补全。这样，一些我们用不到的标签也会出现在补全列表中。而且，它会扫描很多文件，有时候运行起来非常慢。如果你不需要这些，那么完全可以像这样把它们禁用掉：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" complete-"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("i   "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" disable scanning included files\nset complete-=t   "')]),e._v(" disable searching tags\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"改变颜色主题的默认外观-改变颜色主题的默认外观"}},[s("code",[e._v("[](#改变颜色主题的默认外观)改变颜色主题的默认外观")])]),e._v(" "),s("p",[e._v("如果你想让状态栏在颜色主题更改后依然保持灰色，那么只需要这样设置：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd ColorScheme * highlight StatusLine "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ctermbg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("darkgray "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("cterm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("NONE "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("guibg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("darkgray "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("gui")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("NONE\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v('同理，如果你想让某一个颜色主题（比如 "lucius"）的状态栏为灰色（请使用 '),s("code",[e._v(":echo color_name")]),e._v(" 来查看当前可用的所有颜色主题）：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("autocmd ColorScheme lucius highlight StatusLine "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ctermbg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("darkgray "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("cterm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("NONE "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("guibg")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("darkgray "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("gui")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("NONE\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"命令-命令"}},[s("code",[e._v("[](#命令)命令")])]),e._v(" "),s("p",[e._v("下面的命令都比较有用，最好了解一下。用 "),s("code",[e._v(":h :<command name>")]),e._v(" 来了解更多关于它们的信息，如："),s("code",[e._v(":h :global")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"global-和-vglobal-在所有匹配行执行命令-global-和-vglobal-在所有匹配行执行命令"}},[s("code",[e._v("[](#global-和-vglobal---在所有匹配行执行命令):global 和 :vglobal - 在所有匹配行执行命令")])]),e._v(" "),s("p",[e._v("在所有符合条件的行上执行某个命令。如： "),s("code",[e._v(":global /regexp/ print")]),e._v(' 会在所有包含 "regexp" 的行上执行 '),s("code",[e._v("print")]),e._v(" 命令（译者注：regexp 有正则表达式的意思，该命令同样支持正则表达式，在所有符合正则表达式的行上执行指定的命令）。")]),e._v(" "),s("p",[e._v("趣闻：你们可能都知道老牌的 grep 命令，一个由 Ken Thompson 编写的过滤程序。它是干什么用的呢？它会输出所有匹配指定正则表达式的行！现在猜一下 "),s("code",[e._v(":global /regexp/ print")]),e._v(" 的简写形式是什么？没错！就是 "),s("code",[e._v(":g/re/p")]),e._v(" 。 Ken Thompsom 在编写 grep 程序的时候是受了 vi "),s("code",[e._v(":global")]),e._v(" 的启发。（译者注： "),s("a",{attrs:{href:"https://robots.thoughtbot.com/how-grep-got-its-name%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://robots.thoughtbot.com/how-grep-got-its-name）"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("既然它的名字是 "),s("code",[e._v(":global")]),e._v("，理应仅作用在所有行上，但是它也是可以带范围限制的。假设你想使用 "),s("code",[e._v(":delete")]),e._v(" 命令删除从当前行到下一个空行（由正则表达式 "),s("code",[e._v("^$")]),e._v(' 匹配）范围内所有包含 "foo" 的行：')]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":,/^$/g/foo/d\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果要在所有 "),s("em",[e._v("不")]),e._v(" 匹配的行上执行命令的话，可以使用 "),s("code",[e._v(":global!")]),e._v(" 或是它的别名 "),s("code",[e._v(":vglobal")]),e._v(" （ V 代表的是 inVerse ）。")]),e._v(" "),s("h3",{attrs:{id:"normal-和-execute-脚本梦之队-normal-和-execute-脚本梦之队"}},[s("code",[e._v("[](#normal-和-execute---脚本梦之队):normal 和 :execute - 脚本梦之队")])]),e._v(" "),s("p",[e._v("这两个命令经常在 Vim 的脚本里使用。")]),e._v(" "),s("p",[e._v("借助于 "),s("code",[e._v(":normal")]),e._v(" 可以在命令行里进行普通模式的映射。如："),s("code",[e._v(":normal! 4j")]),e._v(' 会令光标下移 4 行（由于加了"!"，所以不会使用自定义的映射 "j"）。')]),e._v(" "),s("p",[e._v("需要注意的是 "),s("code",[e._v(":normal")]),e._v(" 同样可以使用范围数（译者注：参考 "),s("code",[e._v(":h range")]),e._v(" 和 "),s("code",[e._v(":h :normal-range")]),e._v(" 了解更多），故 "),s("code",[e._v(":%norm! Iabc")]),e._v(' 会在所有行前加上 "abc"。')]),e._v(" "),s("p",[e._v("借助于 "),s("code",[e._v(":execute")]),e._v(" 可以将命令和表达式混合在一起使用。假设你正在编辑一个 C 语言的文件，想切换到它的头文件：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":execute "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'edit'")]),e._v(" fnamemodify"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("':r'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'.h'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("（译者注：头文件为与与源文件同名但是扩展名为 "),s("code",[e._v(".h")]),e._v(" 的文件。上面的命令中 expand 获得当前文件的名称，fnamemodify 获取不带扩展名的文件名，再连上 '.h' 就是头文件的文件名了，最后在使用 edit 命令打开这个头文件。）")]),e._v(" "),s("p",[e._v("这两个命令经常一起使用。假设你想让光标下移 n 行：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":let n "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v("\n:execute "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'normal!'")]),e._v(" n "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'j'")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"重定向消息-重定向消息"}},[s("code",[e._v("[](#重定向消息)重定向消息")])]),e._v(" "),s("p",[e._v("许多命令都会输出消息，"),s("code",[e._v(":redir")]),e._v(" 用来重定向这些消息。它可以将消息输出到文件、"),s("a",{attrs:{href:"#%E5%AF%84%E5%AD%98%E5%99%A8"}},[e._v("寄存器")]),e._v("或是某个变量中。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" 将消息重定向到变量 '),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("neatvar"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(' 中\n:redir => neatvar\n"')]),e._v(" 打印所有寄存器的内容\n:reg\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" 结束重定向\n:redir END\n"')]),e._v(' 输出变量\n:echo neatvar\n" 恶搞一下，我们把它输出到当前缓冲区\n:put '),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("neatvar\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("再 Vim 8 中，可以更简单的方式即位：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(":put =execute('reg')\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("（译者注：原文最后一条命令是 "),s("code",[e._v(":put =nicevar")]),e._v(" 但是实际会报变量未定义的错误） （实测 neovim/vim8 下没问题）")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h :redir")])]),e._v(" "),s("h1",{attrs:{id:"调试-调试"}},[s("code",[e._v("[](#调试)调试")])]),e._v(" "),s("h2",{attrs:{id:"常规建议-常规建议"}},[s("code",[e._v("[](#常规建议)常规建议")])]),e._v(" "),s("p",[e._v("如果你遇到了奇怪的行为，尝试用这个命令重现它：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("vim -u NONE -N\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("这样会在不引用 vimrc（默认设置）的情况下重启 vim，并且在 "),s("strong",[e._v("nocompatible")]),e._v(" 模式下（使用 vim 默认设置而不是 vi 的）。（搜索 "),s("code",[e._v(":h --noplugin")]),e._v(" 命令了解更多启动加载方式）")]),e._v(" "),s("p",[e._v("如果仍旧能够出现该错误，那么这极有可能是 vim 本身的 bug，请给 vim_dev 发送邮件反馈错误，多数情况下问题不会立刻解决，你还需要进一步研究")]),e._v(" "),s("p",[e._v("许多插件经常会提供新的（默认的/自动的）操作。如果在保存的时候发生了，那么请用 "),s("code",[e._v(":verb au BufWritePost")]),e._v(" 命令检查潜在的问题")]),e._v(" "),s("p",[e._v("如果你在使用一个插件管理工具，将插件行注释调，再进行调试。")]),e._v(" "),s("p",[e._v("问题还没有解决？如果不是插件的问题，那么肯定是你的自定义的设置的问题，可能是你的 options 或 autocmd 等等。")]),e._v(" "),s("p",[e._v("到了一行行代码检查的时候了，不断地排除缩小检查范围知道你找出错误，根据二分法的原理你不会花费太多时间的。")]),e._v(" "),s("p",[e._v("在实践过程中，可能就是这样，把 "),s("code",[e._v(":finish")]),e._v(" 放在你的 "),s("strong",[e._v("vimrc")]),e._v(" 文件中间，Vim 会跳过它之后的设置。如果问题还在，那么问题就出在"),s("code",[e._v(":finish")]),e._v("之前的设置中，再把"),s("code",[e._v(":finish")]),e._v("放到前一部分设置的中间位置。否则问题就出现在它后面的半部分设置，那么就把"),s("code",[e._v(":finish")]),e._v("放到后半部分的中间位置。不断的重复即可找到。")]),e._v(" "),s("h2",{attrs:{id:"调整日志等级-调整日志等级"}},[s("code",[e._v("[](#调整日志等级)调整日志等级")])]),e._v(" "),s("p",[e._v("Vim 现在正在使用的另一个比较有用的方法是增加 debug 信息输出详细等级。现在 Vim 支持 9 个等级，可以用"),s("code",[e._v(":h 'verbose'")]),e._v("命令查看。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":e /tmp/foo\n:set "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("verbose")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n:w\n:set "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("verbose")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("这可以显示出所有引用的文件、没有变化的文件或者各种各样的作用于保存的插件。")]),e._v(" "),s("p",[e._v("如果你只是想用简单的命令来提高等级，也是用 "),s("code",[e._v(":verbose")]),e._v(" ，放在其他命令之前，通过计数来指明等级，默认是 1.")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":verb "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" verbose\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"  verbose=1\n:10verb set verbose\n"')]),e._v("  "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("verbose")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("通常用等级 1 来显示上次从哪里设置的选项")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":verb "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(' ai?\n"      Last '),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" from ~/.vim/vimrc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("一般等级越高输出信息月详细。但是不要害怕，亦可以把输出导入到文件中：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":set "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("verbosefile")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/tmp/foo "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" 15verbose "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"foo"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" vsplit /tmp/foo\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("你可以一开始的时候就打开 verbosity，用 "),s("code",[e._v("-V")]),e._v(" 选项，它默认设置调试等级为 10。 例如："),s("code",[e._v("vim -V5")])]),e._v(" "),s("h2",{attrs:{id:"查看启动日志-查看启动日志"}},[s("code",[e._v("[](#查看启动日志)查看启动日志")])]),e._v(" "),s("h2",{attrs:{id:"查看运行时日志-查看运行时日志"}},[s("code",[e._v("[](#查看运行时日志)查看运行时日志")])]),e._v(" "),s("h2",{attrs:{id:"vim-脚本调试-vim-脚本调试"}},[s("code",[e._v("[](#vim-脚本调试)Vim 脚本调试")])]),e._v(" "),s("p",[e._v("如果你以前使用过命令行调试器的话，对于"),s("code",[e._v(":debug")]),e._v("命令你很快就会感到熟悉。")]),e._v(" "),s("p",[e._v("只需要在任何其他命令之前加上"),s("code",[e._v(":debug")]),e._v("就会让你进入调试模式。也就是，被调试的 Vim 脚本会在第一行停止运行，同时该行会被显示出来。")]),e._v(" "),s("p",[e._v("想了解可用的 6 个调试命令，可以查阅"),s("code",[e._v(":h >cont")]),e._v("和阅读下面内容。需要指出的是，类似 gdb 和其他相似调试器，调试命令可以使用它们的简短形式："),s("code",[e._v("c")]),e._v("、 "),s("code",[e._v("q")]),e._v("、"),s("code",[e._v("n")]),e._v("、"),s("code",[e._v("s")]),e._v("、 "),s("code",[e._v("i")]),e._v("和 "),s("code",[e._v("f")]),e._v("。")]),e._v(" "),s("p",[e._v("除了上面的之外，你还可以自由地使用任何 Vim 的命令。比如，"),s("code",[e._v(":echo myvar")]),e._v("，该命令会在当前的脚本代码位置和上下文上被执行。")]),e._v(" "),s("p",[e._v("只需要简单使用"),s("code",[e._v(":debug 1")]),e._v("，你就获得了"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("REPL"),s("OutboundLink")],1),e._v("调试特性。")]),e._v(" "),s("p",[e._v("当然，调试模式下是可以定义断点的，不然的话每一行都去单步调试就会十分痛苦。（断点之所以被叫做断点，是因为运行到它们的时候，运行就会停止下来。因此，你可以利用断点跳过自己不感兴趣的代码区域）。请查阅"),s("code",[e._v(":h :breakadd")]),e._v("、 "),s("code",[e._v(":h :breakdel")]),e._v("和 "),s("code",[e._v(":h :breaklist")]),e._v("获取更多细节。")]),e._v(" "),s("p",[e._v("假设你需要知道你每次在保存一个文件的时候有哪些代码在运行：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":au BufWritePost\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" signify  BufWritePost\n"')]),e._v("     *         call sy"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#start()")]),e._v("\n:breakadd func *start\n:w\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" Breakpoint in "')]),e._v("sy"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#start" line 1')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" Entering Debug mode.  Type "')]),e._v("cont"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" to continue.\n"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" sy"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#start")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" line 1: if g:signify_locked\n>s\n"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" sy"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#start")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" line 3: endif\n>\n"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" sy"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#start")]),e._v('\n" line '),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(": "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" sy_path "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("expand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%:p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("))")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("q\n:breakdel *\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("正如你所见，使用"),s("code",[e._v("<cr>")]),e._v("命令会重复之前的调试命令，也就是在该例子中的"),s("code",[e._v("s")]),e._v("命令。")]),e._v(" "),s("p",[s("code",[e._v(":debug")]),e._v("命令可以和"),s("a",{attrs:{href:"#verbosity"}},[e._v("verbose")]),e._v("选项一起使用。")]),e._v(" "),s("h2",{attrs:{id:"语法文件调试-语法文件调试"}},[s("code",[e._v("[](#语法文件调试)语法文件调试")])]),e._v(" "),s("p",[e._v("语法文件由于包含错误的或者复制的正则表达式，常常会使得 Vim 的运行较慢。如果 Vim 在编译的时候包含了"),s("code",[e._v("+profile")]),e._v(" "),s("a",{attrs:{href:"#what-kind-of-vim-am-i-running"}},[e._v("feature")]),e._v("特性，就可以给用户提供一个超级好用的"),s("code",[e._v(":syntime")]),e._v("命令。")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(':syntime on\n" 多次敲击'),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("c-l"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("来重绘窗口，这样的话就会使得相应的语法规则被重新应用一次\n:syntime off\n:syntime report\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("输出结果包含了很多的度量维度。比如，你可以通过结果知道哪些正则表达式耗时太久需要被优化；哪些正则表达式一直在别使用但重来没有一次成功匹配。")]),e._v(" "),s("p",[e._v("请查阅"),s("code",[e._v(":h :syntime")]),e._v("。")]),e._v(" "),s("h1",{attrs:{id:"杂项-杂项"}},[s("code",[e._v("[](#杂项)杂项")])]),e._v(" "),s("h2",{attrs:{id:"附加资源-附加资源"}},[s("code",[e._v("[](#附加资源)附加资源")])]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("资源名称")]),e._v(" "),s("th",[e._v("简介")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("a",{attrs:{href:"http://www.moolenaar.net/habits.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("七个高效的文本编辑习惯"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("作者：Bram Moolenaar（即 Vim 的作者）")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://www.moolenaar.net/habits_2007.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("七个高效的文本编辑习惯 2.0（PDF 版）"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("同上")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://www.ibm.com/developerworks/views/linux/libraryview.jsp?sort_order=asc&sort_by=Title&search_by=scripting+the+vim+editor",target:"_blank",rel:"noopener noreferrer"}},[e._v("IBM DeveloperWorks: 使用脚本编写 Vim 编辑器"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("Vim 脚本编写五辑")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://learnvimscriptthehardway.stevelosh.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("《漫漫 Vim 路》"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("使用魔抓定制 Vim 插件")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/",target:"_blank",rel:"noopener noreferrer"}},[e._v("《 Vim 实践 (第 2 版)》"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("轻取 Vim 最佳书籍")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://vimcasts.org/episodes/archive",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vimcasts.org"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("Vim 录屏演示")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://www.viemu.com/a-why-vi-vim.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("为什么是个脚本都用 vi？"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("常见误区释疑")])]),e._v(" "),s("tr",[s("td",[s("a",{attrs:{href:"http://stackoverflow.com/a/1220118",target:"_blank",rel:"noopener noreferrer"}},[e._v("你不爱 vi，所以你不懂 Vim"),s("OutboundLink")],1)]),e._v(" "),s("td",[e._v("简明,扼要,准确的干货")])])])]),e._v(" "),s("h2",{attrs:{id:"vim-配置集合-vim-配置集合"}},[s("code",[e._v("[](#vim-配置集合)Vim 配置集合")])]),e._v(" "),s("p",[e._v("目前，网上有很多流行 Vim 配置集合，对于 Vim 配置集合，个人认为有利有弊。 对于维护的比较好的配置，比如 "),s("a",{attrs:{href:"http://spacevim.org/cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SpaceVim"),s("OutboundLink")],1),e._v(" 还是值得尝试的，可以节省很多自行配置的时间。 当然，网上还有很多其他很流行的配置，比如：")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/wklken/k-vim",target:"_blank",rel:"noopener noreferrer"}},[e._v("k-vim"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/amix/vimrc",target:"_blank",rel:"noopener noreferrer"}},[e._v("amix's vimrc"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/carlhuda/janus",target:"_blank",rel:"noopener noreferrer"}},[e._v("janus"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"常见问题-常见问题"}},[s("code",[e._v("[](#常见问题)常见问题")])]),e._v(" "),s("h3",{attrs:{id:"编辑小文件时很慢-编辑小文件时很慢"}},[s("code",[e._v("[](#编辑小文件时很慢)编辑小文件时很慢")])]),e._v(" "),s("p",[e._v("有两个因素对性能影响非常大：")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("过于复杂的 "),s("strong",[e._v("正则表达式")]),e._v(" 。尤其是 Ruby 的语法文件，以前会造成性能下降。（见"),s("a",{attrs:{href:"#debugging-syntax-files"}},[e._v("调试语法文件")]),e._v("）")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("屏幕重绘")]),e._v(" 。有一些功能会强制重绘所有行。")])])]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("典型肇事者")]),e._v(" "),s("th",[e._v("原因")]),e._v(" "),s("th",[e._v("解决方案")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v(":set cursorline")])]),e._v(" "),s("td",[e._v("会导致所有行重绘")]),e._v(" "),s("td",[s("code",[e._v(":set nocursorline")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":set cursorcolumn")])]),e._v(" "),s("td",[e._v("会导致所有行重绘")]),e._v(" "),s("td",[s("code",[e._v(":set nocursorcolumn")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":set relativenumber")])]),e._v(" "),s("td",[e._v("会导致所有行重绘")]),e._v(" "),s("td",[s("code",[e._v(":set norelativenumber")])])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":set foldmethod=syntax")])]),e._v(" "),s("td",[e._v("如果语法文件已经很慢了，这只会变得更慢")]),e._v(" "),s("td",[s("code",[e._v(":set foldmethod=manual")]),e._v("，"),s("code",[e._v(":set foldmethod=marker")]),e._v(" 或者使用"),s("a",{attrs:{href:"https://github.com/Konfekt/FastFold",target:"_blank",rel:"noopener noreferrer"}},[e._v("快速折叠"),s("OutboundLink")],1),e._v("插件")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v(":set synmaxcol=3000")])]),e._v(" "),s("td",[e._v("由于内部表示法，Vim 处理比较长的行时会有问题。让它高亮到 3000 列……")]),e._v(" "),s("td",[s("code",[e._v(":set synmaxcol=200")])])]),e._v(" "),s("tr",[s("td",[e._v("matchparen.vim")]),e._v(" "),s("td",[e._v("Vim 默认加载的插件，用正则表达式查找配对的括号")]),e._v(" "),s("td",[e._v("禁用插件："),s("code",[e._v(":h matchparen")])])])])]),e._v(" "),s("p",[s("strong",[e._v("注意")]),e._v("：只有在你真正遇到性能问题的时候才需要做上面的调整。在大多数情况下使用上面提到的选项是完全没有问题的。")]),e._v(" "),s("h3",{attrs:{id:"编辑大文件的时候很慢-编辑大文件的时候很慢"}},[s("code",[e._v("[](#编辑大文件的时候很慢)编辑大文件的时候很慢")])]),e._v(" "),s("p",[e._v("Vim 处理大文件最大的问题就是它会一次性读取整个文件。这么做是由于缓冲区的内部机理导致的（在 "),s("a",{attrs:{href:"https://groups.google.com/forum/#!topic/vim_dev/oY3i8rqYGD4/discussion",target:"_blank",rel:"noopener noreferrer"}},[e._v("vim_dev"),s("OutboundLink")],1),e._v(" 中讨论）。")]),e._v(" "),s("p",[e._v("如果只是想查看的话，"),s("code",[e._v("tail hugefile | vim -")]),e._v(" 是一个不错的选择。")]),e._v(" "),s("p",[e._v("如果你能接受没有语法高亮，并且禁用所有插件和设置的话，使用：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" -u NONE -N\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这将会使得跳转变快很多，尤其是省去了基于很耗费资源的正则表达式的语法高亮。你还可以告诉 Vim 不要使用交换文件和 viminfo 文件，以避免由于写这些文件而造成的延时：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("vim")]),e._v(" -n -u NONE -i NONE -N\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("简而言之，尽量避免使用 Vim 写过大的文件。")]),e._v(" "),s("h3",{attrs:{id:"持续粘贴为什么我每次都要设置-paste-模式-持续粘贴（为什么我每次都要设置-paste-模式）"}},[s("code",[e._v("[](#持续粘贴为什么我每次都要设置-paste-模式)持续粘贴（为什么我每次都要设置 'paste' 模式）")])]),e._v(" "),s("p",[e._v("持续粘贴模式让终端模拟器可以区分输入内容与粘贴内容。")]),e._v(" "),s("p",[e._v("你有没有遇到过往 Vim 里粘贴代码之后被搞的一团糟？")]),e._v(" "),s("p",[e._v("这在你使用 "),s("code",[e._v("cmd+v")]),e._v("、"),s("code",[e._v("shirt-insert")]),e._v("、"),s("code",[e._v("middle-click")]),e._v(" 等进行粘贴的时候才会发生。 因为那样的话你只是向终端模拟器扔了一大堆的文本。 Vim 并不知道你刚刚是粘贴的文本，它以为你在飞速的输入。 于是它想缩进这些行但是失败了。")]),e._v(" "),s("p",[e._v("这明显不是个问题，如果你用 Vim 的寄存器粘贴，如："),s("code",[e._v('"+p')]),e._v(" ，这时 Vim 就知道了你在粘贴，就不会导致格式错乱了。")]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v(":set paste")]),e._v(" 就可以解决这个问题正常进行粘贴。见 "),s("code",[e._v(":h 'paste'")]),e._v(" 和 "),s("code",[e._v(":h 'pastetoggle'")]),e._v(" 获取更多信息。")]),e._v(" "),s("p",[e._v("如果你受够了每次都要设置 "),s("code",[e._v("'paste'")]),e._v(" 的话，看看这个能帮你自动设置的插件："),s("a",{attrs:{href:"https://github.com/ConradIrwin/vim-bracketed-paste",target:"_blank",rel:"noopener noreferrer"}},[e._v("bracketed-paste"),s("OutboundLink")],1),e._v("。")]),e._v(" "),s("p",[s("a",{attrs:{href:"http://cirw.in/blog/bracketed-paste",target:"_blank",rel:"noopener noreferrer"}},[e._v("点此"),s("OutboundLink")],1),e._v("查看该作者对于这个插件的更多描述。")]),e._v(" "),s("p",[e._v("Neovim 尝试把这些变得更顺畅，如果终端支持的话，它会自动开启持续粘贴模式，无须再手动进行切换。")]),e._v(" "),s("h3",{attrs:{id:"在终端中按-esc-后有延时-在终端中按-esc-后有延时"}},[s("code",[e._v("[](#在终端中按-esc-后有延时)在终端中按 ESC 后有延时")])]),e._v(" "),s("p",[e._v("如果你经常使用命令行，那么肯定要接触 "),s("em",[e._v("终端模拟器")]),e._v(" ，如 xterm、gnome-terminal、iTerm2 等等（与实际的"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Computer_terminal",target:"_blank",rel:"noopener noreferrer"}},[e._v("终端"),s("OutboundLink")],1),e._v("不同）。")]),e._v(" "),s("p",[e._v("终端模拟器与他们的祖辈一样，使用 "),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[e._v("转义序列"),s("OutboundLink")],1),e._v(" （也叫 "),s("em",[e._v("控制序列")]),e._v(" ）来控制光标移动、改变文本颜色等。转义序列就是以转义字符开头的 ASCII 字符串（用"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%84%B1%E5%AD%97%E7%AC%A6%E8%A1%A8%E7%A4%BA%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("脱字符表示法"),s("OutboundLink")],1),e._v("表示成 "),s("code",[e._v("^[")]),e._v(" ）。当遇到这样的字符串后，终端模拟器会从"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Terminfo",target:"_blank",rel:"noopener noreferrer"}},[e._v("终端信息"),s("OutboundLink")],1),e._v("数据库中查找对应的动作。")]),e._v(" "),s("p",[e._v("为了使用问题更加清晰，我会先来解释一下什么是映射超时。在映射存在歧义的时候就会产生映射超时：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v(":nnoremap ,a :echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'foo'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n:nnoremap ,ab :echo "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'bar'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("cr"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面的例子中两个映射都能正常工作，但是当输入 "),s("code",[e._v(",a")]),e._v(" 之后，Vim 会延时 1 秒，因为它要确认用户是否还要输入那个 "),s("code",[e._v("b")]),e._v("。")]),e._v(" "),s("p",[e._v("转义序列会产生同样的问题：")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("<esc>")]),e._v(" 作为返回普通模式或取消某个动作的按键而被大量使用")]),e._v(" "),s("li",[e._v("光标键使用转义序列进行的编码")]),e._v(" "),s("li",[e._v("Vim 期望 Alt （也叫作 "),s("em",[e._v("Mate Key")]),e._v(" ）会发送一个正确的 8-bit 编码的高位，但是许多终端模拟器并不支持这个（也可能默认没有启用），而只是发送一个转义序列作为代替。")])]),e._v(" "),s("p",[e._v("你可以这样测试上面所提到的事情： "),s("code",[e._v("vim -u NONE -N")]),e._v(" 然后输入 "),s("code",[e._v("i<c-v><left>")]),e._v(" ，你会看到一个以 "),s("code",[e._v("^[")]),e._v(" 开头的字符串，表明这是一个转义序列，"),s("code",[e._v("^[")]),e._v(" 就是转义字符。")]),e._v(" "),s("p",[e._v("简而言之，Vim 在区分录入的 "),s("code",[e._v("<esc>")]),e._v(" 和转义序列的时候需要一定的时间。")]),e._v(" "),s("p",[e._v("默认情况下，Vim 用 "),s("code",[e._v(":set timeout timeoutlen=1000")]),e._v("，就是说它会用 1 秒的时间来区分有歧义的映射 "),s("em",[e._v("以及")]),e._v(" 按键编码。这对于映射来说是一个比较合理的值，但是你可以自行定义按键延时的长短，这是解决该问题最根本的办法：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v("           "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" for mappings\nset timeoutlen=1000   "')]),e._v(" default value\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" ttimeout          "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" for key codes\nset ttimeoutlen=10    "')]),e._v(" unnoticeable small value\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("在 "),s("code",[e._v(":h ttimeout")]),e._v(" 里你可以找到一个关于这些选项之间关系的小表格。")]),e._v(" "),s("p",[e._v("而如果你在 tmux 中使用 Vim 的话，别忘了把下面的配置加入到你的 "),s("code",[e._v("~/.tmux.conf")]),e._v("文件中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("set -sg escape-time 0\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"无法重复函数中执行的搜索-无法重复函数中执行的搜索"}},[s("code",[e._v("[](#无法重复函数中执行的搜索)无法重复函数中执行的搜索")])]),e._v(" "),s("ul",[s("li",[e._v("在命令中的搜索（"),s("code",[e._v("/")]),e._v("、"),s("code",[e._v(":substitute")]),e._v(" 等）内容会改变“上次使用的搜索内容”。（它保存在"),s("code",[e._v("/")]),e._v("寄存器中，用 "),s("code",[e._v(":echo @/")]),e._v(" 可以输出它里面的内容）")]),e._v(" "),s("li",[e._v("简单的文本变化可以通过 "),s("code",[e._v(".")]),e._v(" 重做。（它保存在 "),s("code",[e._v(".")]),e._v(" 寄存器，用 "),s("code",[e._v(":echo @.")]),e._v(" 可以输出它的内容）")])]),e._v(" "),s("p",[e._v("而在你在函数中进行这些操作的时候，一切就会变得不同。因此你不能用 N/n 查找某个函数刚刚查找的内容，也不能重做函数中对文本的修改。")]),e._v(" "),s("p",[e._v("帮助文档："),s("code",[e._v(":h function-search-undo")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"进阶阅读-进阶阅读"}},[s("code",[e._v("[](#进阶阅读)进阶阅读")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/wsdjeg/vim-plugin-dev-guide",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vim 插件开发指南"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/wsdjeg/vim-galore-zh_cn/blob/master/PLUGINS.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("常用插件列表"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"加入我们-加入我们"}},[s("code",[e._v("[](#加入我们)加入我们")])]),e._v(" "),s("p",[e._v("可以协助我们核对翻译，或者从"),s("a",{attrs:{href:"https://github.com/wsdjeg/vim-galore-zh_cn/blob/master/CONTRIBUTING.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("章节列表"),s("OutboundLink")],1),e._v("中认领章节进行翻译。")]),e._v(" "),s("h2",{attrs:{id:"参考资料-参考资料"}},[s("code",[e._v("[](#参考资料)参考资料")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Nifty Little Nvim Techniques to Make My Life Easier -- Series 1"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);