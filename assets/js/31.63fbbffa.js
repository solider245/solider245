(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{382:function(t,a,n){"use strict";n.r(a);var e=n(25),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#基本的python-main（）"}},[t._v("基本的Python main（）")])]),n("li",[n("a",{attrs:{href:"#python中的执行模式"}},[t._v("Python中的执行模式")]),n("ul",[n("li",[n("a",{attrs:{href:"#从命令行执行"}},[t._v("从命令行执行")])]),n("li",[n("a",{attrs:{href:"#导入模块或交互式解释器"}},[t._v("导入模块或交互式解释器")])])])]),n("li",[n("a",{attrs:{href:"#python主要功能的最佳做法"}},[t._v("Python主要功能的最佳做法")]),n("ul",[n("li",[n("a",{attrs:{href:"#将大多数代码放入函数或类中"}},[t._v("将大多数代码放入函数或类中")])]),n("li",[n("a",{attrs:{href:"#使用-if-name-main-来控制你的代码的执行"}},[t._v('使用 if __name__ == "__main__" 来控制你的代码的执行')])]),n("li",[n("a",{attrs:{href:"#创建一个名为main（）的函数以包含要运行的代码"}},[t._v("创建一个名为main（）的函数以包含要运行的代码")])]),n("li",[n("a",{attrs:{href:"#从main（）调用其他函数"}},[t._v("从main（）调用其他函数")])]),n("li",[n("a",{attrs:{href:"#python主要功能最佳作法摘要"}},[t._v("Python主要功能最佳作法摘要")])])])]),n("li",[n("a",{attrs:{href:"#结论"}},[t._v("结论")])]),n("li",[n("a",{attrs:{href:"#引用文献"}},[t._v("引用文献")])])])]),n("p"),t._v(" "),n("p",[n("a",{attrs:{href:"https://srv.realpython.net/click/4625663842/?c=46248962562&p=58946116052&r=98712",target:"_blank",rel:"noopener noreferrer"}},[n("img",{attrs:{src:"https://img.realpython.net/ea57fbacafb72406e9c9909517fb1c79",alt:""}}),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("立即观看 本教程有一个由Real Python团队创建的相关视频课程。 与书面教程一起观看，以加深您的理解： "),n("a",{attrs:{href:"https://realpython.com/courses/python-main-function/",target:"_blank",rel:"noopener noreferrer"}},[n("strong",[t._v("在Python中定义主要功能")]),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("许多编程语言都有一个特殊功能，当操作系统开始运行程序时，该功能会自动执行。 通常会调用此函数， "),n("code",[t._v("main()")]),t._v(" 并且必须根据语言标准具有特定的返回类型和参数。 另一方面，Python解释器从文件顶部开始执行脚本，并且Python没有自动执行的特定功能。")]),t._v(" "),n("p",[t._v("但是，为执行程序定义一个起点对于理解程序的工作原理很有用。 Python程序员提出了几种约定来定义此起点。")]),t._v(" "),n("p",[n("strong",[t._v("到本文结尾，您将了解：")])]),t._v(" "),n("ul",[n("li",[t._v("什么是特殊 "),n("code",[t._v("__name__")]),t._v(" 变量以及Python如何定义它")]),t._v(" "),n("li",[t._v("为什么要 "),n("code",[t._v("main()")]),t._v(" 在Python中使用")]),t._v(" "),n("li",[n("code",[t._v("main()")]),t._v(" 在Python中 定义有哪些约定")]),t._v(" "),n("li",[t._v("将哪种代码放入您的最佳实践是什么 "),n("code",[t._v("main()")])])]),t._v(" "),n("p",[n("strong",[t._v("免费下载：")]),t._v(" "),n("a",{attrs:{href:"https://realpython.com/bonus/python-tricks-sample-pdf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从Python技巧中获取示例章节：这本书"),n("OutboundLink")],1),t._v(" 通过简单的示例向您展示了Python的最佳实践，您可以立即应用这些示例编写更漂亮的+ Pythonic代码。")]),t._v(" "),n("h2",{attrs:{id:"基本的python-main（）"}},[t._v("基本的Python main（）")]),t._v(" "),n("p",[t._v("在某些Python脚本中，您可能会看到一个函数定义和一个条件语句，如下例所示：")]),t._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("在此代码中，有一个称为的函数 "),n("code",[t._v("main()")]),t._v(" ， 该函数 "),n("code",[t._v("Hello World!")]),t._v(" 在Python解释器执行 该短语 时将 其打印 出来。 还有一条条件（或 "),n("code",[t._v("if")]),t._v(" ）语句，用于检查的值 "),n("code",[t._v("__name__")]),t._v(" 并将其与字符串进行比较 "),n("code",[t._v('"__main__"')]),t._v(" 。 当该 "),n("code",[t._v("if")]),t._v(" 语句求值时 "),n("code",[t._v("True")]),t._v(" ，将执行Python解释器 "),n("code",[t._v("main()")]),t._v(" 。 您可以 "),n("a",{attrs:{href:"https://realpython.com/python-conditional-statements/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在Python"),n("OutboundLink")],1),t._v(" 中的 "),n("a",{attrs:{href:"https://realpython.com/python-conditional-statements/",target:"_blank",rel:"noopener noreferrer"}},[t._v("条件语句中"),n("OutboundLink")],1),t._v(" 了解有关条件语句的更多信息 。")]),t._v(" "),n("p",[t._v("这种代码模式在要 "),n("strong",[t._v("作为脚本执行")]),t._v(" 并 "),n("strong",[t._v("导入到另一个模块的")]),t._v(" Python文件中非常常见 。 为了帮助理解该代码的执行方式，您首先应该了解Python解释器 "),n("code",[t._v("__name__")]),t._v(" 如何根据代码的执行方式进行设置。")]),t._v(" "),n("h2",{attrs:{id:"python中的执行模式"}},[t._v("Python中的执行模式")]),t._v(" "),n("p",[t._v("您可以通过两种主要方式来指示Python解释器执行或使用代码：")]),t._v(" "),n("ol",[n("li",[t._v("您可以 使用命令行将 Python文件作为 "),n("strong",[t._v("脚本")]),t._v(" 执行。")]),t._v(" "),n("li",[t._v("您可以 "),n("strong",[t._v("将")]),t._v(" 代码从一个Python文件导入另一个文件或交互式解释器。")])]),t._v(" "),n("p",[t._v("您可以在 "),n("a",{attrs:{href:"https://realpython.com/run-python-scripts/",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何运行Python脚本中"),n("OutboundLink")],1),t._v(" 阅读有关这些方法的更多信息 。 无论使用哪种方式运行代码，Python都会定义一个特殊的变量 "),n("code",[t._v("__name__")]),t._v(" ，该 变量 包含一个字符串，其值取决于代码的使用方式。")]),t._v(" "),n("p",[t._v("我们将使用此示例文件（另存为 "),n("code",[t._v("execution_methods.py")]),t._v(" ）来探索代码的行为如何根据上下文而变化：")]),t._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is my file to test Python\'s execution methods."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The variable __name__ tells me which context this file is running in."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"The value of __name__ is:"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("repr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__name__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("在此文件中， "),n("a",{attrs:{href:"https://realpython.com/python-print/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("print()")]),n("OutboundLink")],1),t._v(" 定义了 三个调用 。 前两个打印一些介绍性短语。 第三个 "),n("code",[t._v("print()")]),t._v(" 将首先打印该短语 "),n("code",[t._v("The value of __name__ is")]),t._v(" ，然后将 "),n("code",[t._v("__name__")]),t._v(" 使用Python的内置命令 打印 变量 的表示形式 "),n("code",[t._v("repr()")]),t._v(" 。")]),t._v(" "),n("p",[t._v("在Python中， "),n("code",[t._v("repr()")]),t._v(" 显示对象的可打印表示形式。 这个例子 "),n("code",[t._v("repr()")]),t._v(" 用来强调的值 "),n("code",[t._v("__name__")]),t._v(" 是一个字符串。 您可以 "),n("code",[t._v("repr()")]),t._v(" 在 "),n("a",{attrs:{href:"https://docs.python.org/3/library/functions.html#repr",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python文档中"),n("OutboundLink")],1),t._v(" 了解更多信息 。")]),t._v(" "),n("p",[t._v("您会看到 本文中使用的 "),n("strong",[t._v("文件file")]),t._v(" ， "),n("strong",[t._v("module")]),t._v(" 和 "),n("strong",[t._v("script")]),t._v(" 。 实际上，它们之间没有太大区别。 但是，在含义上有一些细微的差异，这些差异强调了一段代码的目的：")]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("文件：")]),t._v(" 通常，Python文件是包含代码的任何文件。 大多数Python文件都有扩展名 "),n("code",[t._v(".py")]),t._v(" 。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("脚本：")]),t._v(" Python脚本是您打算从命令行执行以完成任务的文件。")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("模块：")]),t._v(" Python模块是您要从另一个模块或脚本或交互式解释器中导入的文件。 您可以在 "),n("a",{attrs:{href:"https://docs.python.org/3/tutorial/modules.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python文档中"),n("OutboundLink")],1),t._v(" 阅读有关模块的更多信息 。")])])]),t._v(" "),n("p",[t._v("在 "),n("a",{attrs:{href:"https://realpython.com/run-python-scripts/",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何运行Python脚本中"),n("OutboundLink")],1),t._v(" 也讨论了这种区别 。")]),t._v(" "),n("h3",{attrs:{id:"从命令行执行"}},[t._v("从命令行执行")]),t._v(" "),n("p",[t._v("在这种方法中，您想从命令行执行Python脚本。")]),t._v(" "),n("p",[t._v("执行脚本时，将无法交互式定义Python解释器正在执行的代码。 对于本文而言，如何从命令行执行Python的细节并不重要，但是您可以展开以下框以了解有关Windows，Linux和macOS上命令行之间差异的更多信息。")]),t._v(" "),n("p",[t._v("命令行环境显示隐藏")]),t._v(" "),n("p",[t._v("告诉计算机从命令行执行代码的方式因操作系统而异。")]),t._v(" "),n("p",[t._v("在Linux和macOS上，命令行通常类似于以下示例：")]),t._v(" "),n("p",[n("code",[t._v("eleanor@realpython:~/Documents$")])]),t._v(" "),n("p",[t._v("美元符号（ "),n("code",[t._v("$")]),t._v(" ） 之前的部分 可能看起来有所不同，具体取决于您的用户名和计算机名称。 您键入的命令将在后面 "),n("code",[t._v("$")]),t._v(" 。 在Linux或macOS上，Python 3可执行文件的名称为 "),n("code",[t._v("python3")]),t._v(" ，因此您应在 "),n("code",[t._v("python3 script_name.py")]),t._v(" 后面 键入来运行Python脚本 "),n("code",[t._v("$")]),t._v(" 。")]),t._v(" "),n("p",[t._v("在Windows上，命令提示符通常类似于以下示例：")]),t._v(" "),n("p",[n("code",[t._v("C:\\Users\\Eleanor\\Documents>")])]),t._v(" "),n("blockquote",[n("p",[t._v("The part before the "),n("code",[t._v(">")]),t._v(" may look different, depending on your username. The commands that you type will go after the "),n("code",[t._v(">")]),t._v(". On Windows, the name of the Python 3 executable is typically "),n("code",[t._v("python")]),t._v(", so you should run Python scripts by typing "),n("code",[t._v("python script_name.py")]),t._v(" after the "),n("code",[t._v(">")]),t._v(".")])]),t._v(" "),n("blockquote",[n("p",[t._v("Regardless of your operating system, the output from the Python scripts that you use in this article will be the same, so only the Linux and macOS style of input is shown in this article, and the input line will start at the "),n("code",[t._v("$")]),t._v(".")])]),t._v(" "),n("p",[t._v("现在，您应该 "),n("code",[t._v("execution_methods.py")]),t._v(" 从命令行 执行 脚本，如下所示：")]),t._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("$ python3 execution_methods.py\nThis is my "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" to "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" Python"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s execution methods.\nThe variable __name__ tells me which context this file is running in.\nThe value of __name__ is: '")]),t._v("__main__'\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("在此示例中，您可以看到 "),n("code",[t._v("__name__")]),t._v(" 具有值 "),n("code",[t._v("'__main__'")]),t._v(" ，其中的引号（ "),n("code",[t._v("'")]),t._v(" ）告诉您该值具有字符串类型。")]),t._v(" "),n("p",[t._v("请记住，在Python中，用单引号（ "),n("code",[t._v("'")]),t._v(" ）和双引号（ "),n("code",[t._v('"')]),t._v(" ） 定义的字符串之间没有区别 。 您可以阅读有关 "),n("a",{attrs:{href:"https://realpython.com/python-data-types/#strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("在Python的基本数据类型中"),n("OutboundLink")],1),t._v(" 定义字符串的更多信息 。")]),t._v(" "),n("p",[t._v("如果您 在脚本中 包含 "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Shebang_(Unix)",target:"_blank",rel:"noopener noreferrer"}},[t._v("shebang行"),n("OutboundLink")],1),t._v(" 并直接执行（ "),n("code",[t._v("./execution_methods.py")]),t._v(" ），或者 "),n("code",[t._v("%run")]),t._v(" 在IPython或Jupyter Notebook中 使用 魔术， 您将找到相同的输出 。")]),t._v(" "),n("p",[t._v("通过将 "),n("code",[t._v("-m")]),t._v(" 参数 添加 到命令中， 您还可能会看到从包内执行的Python脚本 。 在大多数情况下，您会在使用时看到此建议 "),n("code",[t._v("pip")]),t._v(" ： "),n("code",[t._v("python3 -m pip install package_name")]),t._v(" 。")]),t._v(" "),n("p",[t._v("添加 "),n("code",[t._v("-m")]),t._v(" 参数将在程序 "),n("code",[t._v("__main__.py")]),t._v(" 包模块中 运行代码 。 您可以 "),n("code",[t._v("__main__.py")]),t._v(" 在 "),n("a",{attrs:{href:"https://realpython.com/pypi-publish-python-package/#different-ways-of-calling-a-package",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何将开源Python软件包发布到PyPI中"),n("OutboundLink")],1),t._v(" 找到有关 文件的 更多信息 。")]),t._v(" "),n("p",[t._v("在这三种情况下， "),n("code",[t._v("__name__")]),t._v(" 其值均相同：string "),n("code",[t._v("'__main__'")]),t._v(" 。")]),t._v(" "),n("p",[n("strong",[t._v("技术细节：")]),t._v(" Python文档专门定义了何时 "),n("code",[t._v("__name__")]),t._v(" 将具有以下值 "),n("code",[t._v("'__main__'")]),t._v(" ：")]),t._v(" "),n("blockquote",[n("p",[t._v("从标准输入，脚本或交互式提示中读取时， 模块的 "),n("code",[t._v("__name__")]),t._v(" 设置等于 "),n("code",[t._v("'__main__'")]),t._v(" 。 （ "),n("a",{attrs:{href:"https://docs.python.org/3/library/__main__.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("来源"),n("OutboundLink")],1),t._v(" ）")])]),t._v(" "),n("p",[n("code",[t._v("__name__")]),t._v(" 存储在模块的全局命名空间与一起 "),n("code",[t._v("__doc__")]),t._v(" ， "),n("code",[t._v("__package__")]),t._v(" 和其他属性。 您可以在 "),n("a",{attrs:{href:"https://docs.python.org/3/reference/datamodel.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python数据模型文档中"),n("OutboundLink")],1),t._v(" ，特别是对于模块和包，在 "),n("a",{attrs:{href:"https://docs.python.org/3/reference/import.html#import-related-module-attributes",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python导入文档中"),n("OutboundLink")],1),t._v(" 阅读有关这些属性的更多信息 。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Remove ads"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"导入模块或交互式解释器"}},[t._v("导入模块或交互式解释器")]),t._v(" "),n("p",[t._v("现在，让我们看一下Python解释器执行代码的第二种方式：导入。 在开发模块或脚本时，您很可能希望利用别人已经构建的模块，您可以使用 "),n("code",[t._v("import")]),t._v(" 关键字来完成。")]),t._v(" "),n("p",[t._v("在导入过程中，Python执行在指定模块中定义的语句（但仅在 您 "),n("em",[t._v("首次")]),t._v(" 导入模块时执行）。 为了演示导入 "),n("code",[t._v("execution_methods.py")]),t._v(" 文件 的结果，请 启动交互式Python解释器，然后导入 "),n("code",[t._v("execution_methods.py")]),t._v(" 文件：")]),t._v(" "),n("p",[t._v(">>>")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(">>> import execution_methods\nThis is my file to test Python's execution methods.\nThe variable __name__ tells me which context this file is running in.\nThe value of __name__ is: 'execution_methods'\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("p",[t._v("在此代码输出中，您可以看到Python解释器执行了对的三个调用 "),n("a",{attrs:{href:"https://realpython.com/courses/python-print/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("print()")]),n("OutboundLink")],1),t._v(" 。 输出的前两行与在命令行上作为脚本执行文件时完全相同，因为前两行中没有变量。 但是，第三者的输出有所不同 "),n("code",[t._v("print()")]),t._v(" 。")]),t._v(" "),n("p",[t._v("当Python解释器导入代码时，的值将 "),n("code",[t._v("__name__")]),t._v(" 设置为与要导入的模块的名称相同。 您可以在上面的第三行输出中看到这一点。 "),n("code",[t._v("__name__")]),t._v(" 的值为 "),n("code",[t._v("'execution_methods'")]),t._v(" ，这是 "),n("code",[t._v(".py")]),t._v(" Python要从中导入文件 的名称 。")]),t._v(" "),n("p",[t._v("请注意，如果 "),n("code",[t._v("import")]),t._v(" 再次使用该模块而不退出Python，将不会有输出。")]),t._v(" "),n("p",[n("strong",[t._v("注意：")]),t._v(" 有关如何在Python中进行导入的更多信息，请查看 "),n("a",{attrs:{href:"https://realpython.com/python-import/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python导入：高级技术和技巧"),n("OutboundLink")],1),t._v(" 以及 "),n("a",{attrs:{href:"https://realpython.com/absolute-vs-relative-python-imports/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python中的绝对导入和相对导入"),n("OutboundLink")],1),t._v(" 。")]),t._v(" "),n("h2",{attrs:{id:"python主要功能的最佳做法"}},[t._v("Python主要功能的最佳做法")]),t._v(" "),n("p",[t._v("现在您可以看到Python处理不同执行模式的方式有所不同，这对您了解一些最佳实践很有用。 只要您想编写可以作为脚本运行 "),n("em",[t._v("并")]),t._v(" 导入到另一个模块或交互式会话中的 代码，这些方法都将适用 。")]),t._v(" "),n("p",[t._v("您将学习四种最佳实践，以确保您的代码可以达到双重目的：")]),t._v(" "),n("ol",[n("li",[t._v("将大多数代码放入函数或类中。")]),t._v(" "),n("li",[t._v("使用 "),n("code",[t._v("__name__")]),t._v(" 你的控制代码的执行。")]),t._v(" "),n("li",[t._v("创建一个名为的函数， "),n("code",[t._v("main()")]),t._v(" 以包含要运行的代码。")]),t._v(" "),n("li",[t._v("从中调用其他函数 "),n("code",[t._v("main()")]),t._v(" 。")])]),t._v(" "),n("h3",{attrs:{id:"将大多数代码放入函数或类中"}},[t._v("将大多数代码放入函数或类中")]),t._v(" "),n("p",[t._v("请记住，Python解释器在导入模块时会执行模块中的所有代码。 有时，您编写的代码将具有您希望用户控制的副作用，例如：")]),t._v(" "),n("ul",[n("li",[t._v("运行需要很长时间的计算")]),t._v(" "),n("li",[t._v("写入磁盘上的文件")]),t._v(" "),n("li",[t._v("打印会干扰用户终端的信息")])]),t._v(" "),n("p",[t._v("在这些情况下，您希望用户控制触发此代码的执行，而不是让Python解释器在导入模块时执行该代码。")]),t._v(" "),n("p",[t._v("因此，最佳实践是将 "),n("strong",[t._v("大多数代码包含在一个函数或一个类中")]),t._v(" 。 这是因为当Python解释器遇到 "),n("code",[t._v("def")]),t._v(" or "),n("code",[t._v("class")]),t._v(" 关键字时，它仅存储这些定义供以后使用，并且直到您告知时才真正执行它们。")]),t._v(" "),n("p",[t._v("将下面的代码保存到一个文件中， "),n("code",[t._v("best_practices.py")]),t._v(" 以演示这个想法：")]),t._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" time "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sleep\n\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is my file to demonstrate best practices."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beginning data processing..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" that has been modified"')]),t._v("\n    sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Data processing finished."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modified_data\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br")])]),n("p",[t._v("在此代码中，您首先 "),n("code",[t._v("sleep()")]),t._v(" 要从 "),n("a",{attrs:{href:"https://realpython.com/python-time-module/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("time")]),t._v("module"),n("OutboundLink")],1),t._v(" 导入 。")]),t._v(" "),n("p",[n("code",[t._v("sleep()")]),t._v(" 您将解释器暂停多少秒作为您提供的参数，并将生成一个函数，此示例将花费很长时间运行该函数。 接下来，您使用 "),n("code",[t._v("print()")]),t._v(" 打印描述此代码用途的句子。")]),t._v(" "),n("p",[t._v("然后，定义一个函数 "),n("code",[t._v("process_data()")]),t._v(" ， 该函数 执行五项操作：")]),t._v(" "),n("ol",[n("li",[t._v("打印一些输出以告知用户数​​据处理正在开始")]),t._v(" "),n("li",[t._v("修改输入数据")]),t._v(" "),n("li",[t._v("使用暂停执行三秒钟 "),n("code",[t._v("sleep()")])]),t._v(" "),n("li",[t._v("打印一些输出以告知用户处理已完成")]),t._v(" "),n("li",[t._v("返回修改后的数据")])]),t._v(" "),n("p",[n("strong",[t._v("在命令行上执行最佳实践文件")])]),t._v(" "),n("p",[t._v("现在，当您在命令行中以脚本形式执行此文件时会发生什么？")]),t._v(" "),n("p",[t._v("Python解释器将执行 函数定义之外 的 "),n("code",[t._v("from time import sleep")]),t._v(" 和 "),n("code",[t._v("print()")]),t._v(" 行，然后将创建名为的函数的定义 "),n("code",[t._v("process_data()")]),t._v(" 。 然后，该脚本将不做任何进一步操作而退出，因为该脚本没有任何执行的代码 "),n("code",[t._v("process_data()")]),t._v(" 。")]),t._v(" "),n("p",[t._v("下面的代码块显示了将该文件作为脚本运行的结果：")]),t._v(" "),n("p",[n("code",[t._v("$ python3 best_practices.py This is my file to demonstrate best practices.")])]),t._v(" "),n("p",[t._v("我们在这里看到的输出是first的结果 "),n("code",[t._v("print()")]),t._v(" 。 请注意，从导入 "),n("code",[t._v("time")]),t._v(" 和定义 "),n("code",[t._v("process_data()")]),t._v(" 不会产生任何输出。 具体来说， 不会打印 "),n("code",[t._v("print()")]),t._v(" 定义中 的调用输出 "),n("code",[t._v("process_data()")]),t._v(" ！")]),t._v(" "),n("p",[n("strong",[t._v("在另一个模块或交互式解释器中导入最佳实践文件")])]),t._v(" "),n("p",[t._v("在交互式会话（或其他模块）中导入该文件时，Python解释器将执行与将文件作为脚本执行时完全相同的步骤。")]),t._v(" "),n("p",[t._v("Python解释器导入文件后，您就可以使用在导入模块中定义的任何变量，类或函数。 为了演示这一点，我们将使用交互式Python解释器。 启动交互式解释器，然后键入 "),n("code",[t._v("import best_practices")]),t._v(" ：")]),t._v(" "),n("p",[t._v(">>>")]),t._v(" "),n("p",[n("code",[t._v(">>> import best_practices This is my file to demonstrate best practices.")])]),t._v(" "),n("p",[t._v("导入 "),n("code",[t._v("best_practices.py")]),t._v(" 文件 的唯一输出 是来自 "),n("code",[t._v("print()")]),t._v(" outside定义 的第一个 调用 "),n("code",[t._v("process_data()")]),t._v(" 。 从导入 "),n("code",[t._v("time")]),t._v(" 和定义都 "),n("code",[t._v("process_data()")]),t._v(" 不会产生任何输出，就像从命令行执行代码时一样。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Remove ads"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"使用-if-name-main-来控制你的代码的执行"}},[t._v("使用 "),n("code",[t._v('if __name__ == "__main__"')]),t._v(" 来控制你的代码的执行")]),t._v(" "),n("p",[t._v("如果要 "),n("code",[t._v("process_data()")]),t._v(" 从命令行运行脚本而不是Python解释器导入文件时执行该怎么办？")]),t._v(" "),n("p",[t._v("您可以 "),n("strong",[t._v("使用"),n("code",[t._v('if __name__ == "__main__"')]),t._v("惯用语来确定执行上下文，")]),t._v(" 并 "),n("code",[t._v("process_data()")]),t._v(" 仅在 "),n("code",[t._v("__name__")]),t._v(" 等于 时 有条件地运行 "),n("code",[t._v('"__main__"')]),t._v(" 。 将以下代码添加到 "),n("code",[t._v("best_practices.py")]),t._v(" 文件 底部 ：")]),t._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My data read from the Web"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modified_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("在此代码中，您添加了一个条件语句，用于检查的值 "),n("code",[t._v("__name__")]),t._v(" 。 此条件的计算结果为 "),n("code",[t._v("True")]),t._v(" when "),n("code",[t._v("__name__")]),t._v(" 等于字符串 "),n("code",[t._v('"__main__"')]),t._v(" 。 请记住，特殊值 "),n("code",[t._v('"__main__"')]),t._v(" 的 "),n("code",[t._v("__name__")]),t._v(" 变量意味着Python解释器执行你的脚本，而不是将其导入。")]),t._v(" "),n("p",[t._v("在条件块内，添加了四行代码（第12、13、14和15行）：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("第12和13行：")]),t._v(" 您正在创建一个变量 "),n("code",[t._v("data")]),t._v(" ， 该变量 存储从Web获取的数据并进行打印。")]),t._v(" "),n("li",[n("strong",[t._v("第14行：")]),t._v(" 您正在处理数据。")]),t._v(" "),n("li",[n("strong",[t._v("第15行：")]),t._v(" 您正在打印修改后的数据。")])]),t._v(" "),n("p",[t._v("现在，从命令行运行 "),n("code",[t._v("best_practices.py")]),t._v(" 脚本以查看输出将如何更改：")]),t._v(" "),n("p",[n("code",[t._v("$ python3 best_practices.py This is my file to demonstrate best practices. My data read from the Web Beginning data processing... Data processing finished. My data read from the Web that has been modified")])]),t._v(" "),n("p",[t._v("首先，输出显示 "),n("code",[t._v("print()")]),t._v(" 之外 的 调用 结果 "),n("code",[t._v("process_data()")]),t._v(" 。")]),t._v(" "),n("p",[t._v("之后，将 "),n("code",[t._v("data")]),t._v(" 打印 的值 。 发生这种情况是因为， 当Python解释器将文件作为脚本执行时 ，变量 "),n("code",[t._v("__name__")]),t._v(" 具有值 "),n("code",[t._v('"__main__"')]),t._v(" ，因此条件语句的值为 "),n("code",[t._v("True")]),t._v(" 。")]),t._v(" "),n("p",[t._v("接下来，您的脚本调用 "),n("code",[t._v("process_data()")]),t._v(" 并传入 "),n("code",[t._v("data")]),t._v(" 以进行修改。 当 "),n("code",[t._v("process_data()")]),t._v(" 执行时，它打印一些状态消息的输出。 最后， "),n("code",[t._v("modified_data")]),t._v(" 打印 的值 。")]),t._v(" "),n("p",[t._v("现在，您应该检查 "),n("code",[t._v("best_practices.py")]),t._v(" 从交互式解释器（或另一个模块） 导入 文件 时会发生什么 。 下面的示例演示了这种情况：")]),t._v(" "),n("p",[t._v(">>>")]),t._v(" "),n("p",[n("code",[t._v(">>> import best_practices This is my file to demonstrate best practices.")])]),t._v(" "),n("p",[t._v("请注意，您将获得与将条件语句添加到文件末尾相同的行为！ 这是因为 "),n("code",[t._v("__name__")]),t._v(" 变量具有值 "),n("code",[t._v('"best_practices"')]),t._v(" ，所以Python不会执行该块内的代码，包括 "),n("code",[t._v("process_data()")]),t._v(" ，因为条件语句的值为 "),n("code",[t._v("False")]),t._v(" 。")]),t._v(" "),n("h3",{attrs:{id:"创建一个名为main（）的函数以包含要运行的代码"}},[t._v("创建一个名为main（）的函数以包含要运行的代码")]),t._v(" "),n("p",[t._v("现在，您可以编写Python代码，该代码可以作为脚本从命令行运行，并且可以导入而不会产生不必要的副作用。 接下来，您将学习如何编写代码，以使其他Python程序员更容易理解您的意思。")]),t._v(" "),n("p",[t._v("许多语言（例如C，C ++，Java和其他几种语言）定义了一种特殊功能， "),n("code",[t._v("main()")]),t._v(" 操作系统执行编译后的程序时 必须 自动调用 该特殊功能 。 此功能通常称为 "),n("strong",[t._v("入口点，")]),t._v(" 因为它是执行程序进入程序的位置。")]),t._v(" "),n("p",[t._v("相反，Python没有用作脚本入口点的特殊功能。 实际上，您可以在Python脚本中为入口点函数指定任意名称！")]),t._v(" "),n("p",[t._v("尽管Python并未为命名函数赋予任何意义 "),n("code",[t._v("main()")]),t._v(" ，但最佳实践是 无论如何 都要 "),n("strong",[t._v("为入口点函数命名"),n("code",[t._v("main()")])]),t._v(" 。 这样，任何其他读取脚本的程序员都立即知道此功能是完成脚本主要任务的代码的起点。")]),t._v(" "),n("p",[t._v("另外， "),n("code",[t._v("main()")]),t._v(" 应包含Python解释程序执行文件时要运行的任何代码。 这比直接将代码放入条件块更好，因为用户 "),n("code",[t._v("main()")]),t._v(" 在导入模块时 可以重用 。")]),t._v(" "),n("p",[t._v("更改 "),n("code",[t._v("best_practices.py")]),t._v(" 文件，使其看起来像下面的代码：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" time "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sleep\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is my file to demonstrate best practices."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beginning data processing..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" that has been modified"')]),t._v("\n   sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Data processing finished."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modified_data\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My data read from the Web"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modified_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br")])]),n("p",[t._v("在此示例中，您添加了其中的定义， "),n("code",[t._v("main()")]),t._v(" 其中包括先前在条件块内的代码。 然后，您更改了条件块以使其执行 "),n("code",[t._v("main()")]),t._v(" 。 如果将此代码作为脚本运行或导入，则将获得与上一部分相同的输出。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Remove ads"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"从main（）调用其他函数"}},[t._v("从main（）调用其他函数")]),t._v(" "),n("p",[t._v("Python中另一种常见的做法是 "),n("strong",[t._v("有"),n("code",[t._v("main()")]),t._v("执行其他功能")]),t._v(" ，而不是包括在任务完成代码 "),n("code",[t._v("main()")]),t._v(" 。 当您可以由几个可以独立执行的较小子任务组成整体任务时，此功能特别有用。")]),t._v(" "),n("p",[t._v("例如，您可能具有执行以下操作的脚本：")]),t._v(" "),n("ol",[n("li",[t._v("从可能是数据库，磁盘上的文件或Web API的源中读取数据文件")]),t._v(" "),n("li",[t._v("处理数据")]),t._v(" "),n("li",[t._v("将处理后的数据写入另一个位置")])]),t._v(" "),n("p",[t._v("如果您以单独的功能实现这些子任务中的每一个，那么您（或另一个用户）很容易重用一些步骤，而忽略您不想要的步骤。 然后，您可以在中创建默认工作流程 "),n("code",[t._v("main()")]),t._v(" ，并且可以兼得两全。")]),t._v(" "),n("p",[t._v("是否将这种做法应用于您的代码是您自己的判断。 将工作分为几个功能使重用更加容易，但对于其他试图解释您的代码的人来说却增加了难度，因为他们必须遵循程序流程中的几次跳转。")]),t._v(" "),n("p",[t._v("修改您的 "),n("code",[t._v("best_practices.py")]),t._v(" 文件，使其看起来像下面的代码：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" time "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sleep\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is my file to demonstrate best practices."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("process_data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Beginning data processing..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('" that has been modified"')]),t._v("\n   sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Data processing finished."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" modified_data\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("read_data_from_web")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Reading data from the Web"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Data from the web"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("write_data_to_database")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Writing data to a database"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" read_data_from_web"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    modified_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" process_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    write_data_to_database"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modified_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    main"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br")])]),n("p",[t._v("在此示例代码中，文件的前10行具有与以前相同的内容。 第12行的第二个函数定义创建并返回一些样本数据，第17行的第三个函数定义模拟将修改后的数据写入数据库。")]),t._v(" "),n("p",[t._v("在第21行， "),n("code",[t._v("main()")]),t._v(" 已定义。 在此示例中，您进行了修改， "),n("code",[t._v("main()")]),t._v(" 以便依次调用数据读取，数据处理和数据写入功能。")]),t._v(" "),n("p",[t._v("首先，从 "),n("code",[t._v("data")]),t._v(" 创建 "),n("code",[t._v("read_data_from_web()")]),t._v(" 。 这 "),n("code",[t._v("data")]),t._v(" 被传递到 "),n("code",[t._v("process_data()")]),t._v(" ，它返回 "),n("code",[t._v("modified_data")]),t._v(" 。 最后， "),n("code",[t._v("modified_data")]),t._v(" 传入 "),n("code",[t._v("write_data_to_database()")]),t._v(" 。")]),t._v(" "),n("p",[t._v("脚本的最后两行的条件块检查 "),n("code",[t._v("__name__")]),t._v(" 和运行 "),n("code",[t._v("main()")]),t._v(" ，如果该 "),n("code",[t._v("if")]),t._v(" 语句 "),n("code",[t._v("True")]),t._v(" 。")]),t._v(" "),n("p",[t._v("现在，您可以从命令行运行整个处理管道，如下所示：")]),t._v(" "),n("p",[n("code",[t._v("$ python3 best_practices.py This is my file to demonstrate best practices. Reading data from the Web Beginning data processing... Data processing finished. Writing processed data to a database Data from the web that has been modified")])]),t._v(" "),n("p",[t._v("在此执行的输出，你可以看到，Python解释器执行 "),n("code",[t._v("main()")]),t._v(" ，其执行 "),n("code",[t._v("read_data_from_web()")]),t._v(" ， "),n("code",[t._v("process_data()")]),t._v(" 和 "),n("code",[t._v("write_data_to_database()")]),t._v(" 。 但是，您也可以导入 "),n("code",[t._v("best_practices.py")]),t._v(" 文件并将其重新 "),n("code",[t._v("process_data()")]),t._v(" 用于其他输入数据源，如下所示：")]),t._v(" "),n("p",[t._v(">>>")]),t._v(" "),n("p",[t._v("`>>> import best_practices as bp\nThis is my file to demonstrate best practices.")]),t._v(" "),n("blockquote",[n("blockquote",[n("blockquote",[n("p",[t._v('data = "Data from a file"\nmodified_data = bp.process_data(data)\nBeginning data processing...\nData processing finished.')])])]),t._v(" "),n("blockquote",[n("blockquote",[n("p",[t._v("bp.write_data_to_database(modified_data)\nWriting processed data to a database\nData from a file that has been modified`")])])])]),t._v(" "),n("p",[t._v("在此示例中，您导入 "),n("code",[t._v("best_practices")]),t._v(" 并缩短了 "),n("code",[t._v("bp")]),t._v(" 此代码 的名称 。")]),t._v(" "),n("p",[t._v("导入过程使Python解释程序执行文件中的所有代码行 "),n("code",[t._v("best_practices.py")]),t._v(" ，因此输出显示了解释文件目的的行。")]),t._v(" "),n("p",[t._v("然后，您从文件中存储数据， "),n("code",[t._v("data")]),t._v(" 而不是从Web读取数据。 然后，再利用 "),n("code",[t._v("process_data()")]),t._v(" 和 "),n("code",[t._v("write_data_to_database()")]),t._v(" 从 "),n("code",[t._v("best_practices.py")]),t._v(" 文件。 在这种情况下，您可以利用重用代码，而不是定义中的所有逻辑 "),n("code",[t._v("main()")]),t._v(" 。")]),t._v(" "),n("h3",{attrs:{id:"python主要功能最佳作法摘要"}},[t._v("Python主要功能最佳作法摘要")]),t._v(" "),n("p",[n("code",[t._v("main()")]),t._v(" 您刚刚看到了以下 关于 Python的 四个关键最佳实践 ：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("将需要长时间运行或对计算机有其他影响的代码放入函数或类中，以便您可以精确控制何时执行该代码。")])]),t._v(" "),n("li",[n("p",[t._v("使用不同的值 "),n("code",[t._v("__name__")]),t._v(" 来确定上下文并使用条件语句更改代码的行为。")])]),t._v(" "),n("li",[n("p",[t._v("您应该命名入口点函数 "),n("code",[t._v("main()")]),t._v(" ，以便传达该函数的意图，即使Python并没有为命名函数赋予任何特殊意义 "),n("code",[t._v("main()")]),t._v(" 。")])]),t._v(" "),n("li",[n("p",[t._v("如果要重用代码中的功能 "),n("code",[t._v("main()")]),t._v(" ，请 在外部函数中定义逻辑， 然后在中调用这些函数 "),n("code",[t._v("main()")]),t._v(" 。")])])]),t._v(" "),n("h2",{attrs:{id:"结论"}},[t._v("结论")]),t._v(" "),n("p",[t._v("恭喜你！ 您现在知道了如何创建Python "),n("code",[t._v("main()")]),t._v(" 函数。")]),t._v(" "),n("p",[t._v("您了解了以下内容：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("知道 "),n("code",[t._v("__name__")]),t._v(" 变量 的值 对于编写兼具可执行脚本和可导入模块双重目的的代码很重要。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("__name__")]),t._v(" 取不同的值，具体取决于您执行Python文件的方式。 "),n("code",[t._v("__name__")]),t._v(" 将等于：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v('"__main__"')]),t._v(" 从命令行或通过 "),n("code",[t._v("python -m")]),t._v(" （执行包的 "),n("code",[t._v("__main__.py")]),t._v(" 文件） 执行 文件时")]),t._v(" "),n("li",[t._v("模块的名称（如果正在导入模块）")])])]),t._v(" "),n("li",[n("p",[t._v("当您要开发可重用的代码时，Python程序员已经开发了一套好的做法。")])])]),t._v(" "),n("p",[t._v("现在您可以开始编写一些很棒的Python "),n("code",[t._v("main()")]),t._v(" 函数代码了！")]),t._v(" "),n("h2",{attrs:{id:"引用文献"}},[t._v("引用文献")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://realpython.com/python-main-function/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在Python中定义主要功能-真正的Python"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);