(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{428:function(s,e,n){"use strict";n.r(e);var a=n(25),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#shell解决方案-shell解决方案-shell解决方案"}},[s._v("SHELL解决方案")])]),n("li",[n("a",{attrs:{href:"#容器解决方案-容器解决方案-容器解决方案"}},[s._v("容器解决方案")])])])]),n("p"),s._v(" "),n("p",[s._v("作者：杨冬 欢迎转载，也请保留这段声明。谢谢！\n出处："),n("a",{attrs:{href:"https://andyyoung01.github.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://andyyoung01.github.io/"),n("OutboundLink")],1),s._v(" 或 "),n("a",{attrs:{href:"http://andyyoung01.16mb.com/",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://andyyoung01.16mb.com/"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("可能有时候你得到了一个从Dockerfile创建的镜像文件，但是原始的Dockerfile丢失了。你想从这个镜像文件的构建历史记录中，逆向分析出原始的Dockerfile而省去寻找此文件的漫长过程。")]),s._v(" "),n("p",[s._v("虽然不可能在所有的情况下将一个Docker镜像完全得进行逆向工程，但如果此镜像是通过Dockerfile构建的，很有可能分析出此镜像是通过了什么命令得到的。我们以下面的Dockerfile为例，构建一个镜像，然后运行一个简单的shell脚本来演示如何分析镜像的构建历史记录，最后来看一个简洁的容器化的解决方案，来得出原始的Dockerfile。")]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("2")]),s._v(" "),n("p",[s._v("3")]),s._v(" "),n("p",[s._v("4")]),s._v(" "),n("p",[s._v("5")]),s._v(" "),n("p",[s._v("6")]),s._v(" "),n("p",[s._v("7")]),s._v(" "),n("p",[s._v("8")]),s._v(" "),n("p",[s._v("9")]),s._v(" "),n("p",[s._v("10")]),s._v(" "),n("p",[s._v("11")]),s._v(" "),n("p",[s._v("12")]),s._v(" "),n("p",[s._v("13")]),s._v(" "),n("p",[s._v("14")]),s._v(" "),n("p",[s._v("15")]),s._v(" "),n("p",[s._v("16")]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("FROM busybox")]),s._v(" "),n("p",[s._v("MAINTAINER ian.miell@gmail.com")]),s._v(" "),n("p",[s._v("ENV myenvname myenvvalue")]),s._v(" "),n("p",[s._v("LABEL mylabelname mylabelvalue")]),s._v(" "),n("p",[s._v("WORKDIR /opt")]),s._v(" "),n("p",[s._v("RUN mkdir -p copied")]),s._v(" "),n("p",[s._v("COPY Dockerfile copied/Dockerfile")]),s._v(" "),n("p",[s._v("RUN mkdir -p added")]),s._v(" "),n("p",[s._v("ADD Dockerfile added/Dockerfile")]),s._v(" "),n("p",[s._v("RUN touch /tmp/afile")]),s._v(" "),n("p",[s._v("ADD Dockerfile /")]),s._v(" "),n("p",[s._v("EXPOSE 80")]),s._v(" "),n("p",[s._v("VOLUME /data")]),s._v(" "),n("p",[s._v("ONBUILD touch /tmp/built")]),s._v(" "),n("p",[s._v("ENTRYPOINT /bin/bash")]),s._v(" "),n("p",[s._v("CMD -r")]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("首先要构建这个示例镜像，镜像命名为reverseme：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ docker build -t reverseme .\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"shell解决方案"}},[n("a",{attrs:{href:"#SHELL%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88",title:"SHELL解决方案"}}),s._v("SHELL解决方案")]),s._v(" "),n("p",[s._v("这个基于shell的实现主要在这里用来演示逆向工程的思路与方法，它与下面的容器化解决方案相比还不是十分完整。此方案使用了"),n("code",[s._v("docker inspect")]),s._v("命令来提取出镜像的metadata。")]),s._v(" "),n("blockquote",[n("p",[s._v("此shell脚本中使用了jq程序，一个可以查询和操作JSON数据的工具。为了运行此脚本，需要安装jq程序（下载"),n("a",{attrs:{href:"https://stedolan.github.io/jq/download/",target:"_blank",rel:"noopener noreferrer"}},[s._v("链接"),n("OutboundLink")],1),s._v("）。")])]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("1")]),s._v(" "),n("p",[s._v("2")]),s._v(" "),n("p",[s._v("3")]),s._v(" "),n("p",[s._v("4")]),s._v(" "),n("p",[s._v("5")]),s._v(" "),n("p",[s._v("6")]),s._v(" "),n("p",[s._v("7")]),s._v(" "),n("p",[s._v("8")]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("docker history reverseme | \\")]),s._v(" "),n("p",[s._v("awk '{print $1}' | \\")]),s._v(" "),n("p",[s._v("grep -v IMAGE | grep -v missing | \\")]),s._v(" "),n("p",[s._v("tac | \\")]),s._v(" "),n("p",[s._v('sed "s/\\(.*\\)/docker inspect \\1 | \\')]),s._v(" "),n("p",[s._v("jq -r \\'.[0].ContainerConfig.Cmd[2] | tostring\\'/\" | \\")]),s._v(" "),n("p",[s._v("sh | \\")]),s._v(" "),n("p",[s._v("sed 's/^#(nop) //'")]),s._v(" "),n("p",[s._v("|")]),s._v(" "),n("p",[s._v("上述代码第1行得到了组成指定镜像的层；第2行从docker history输出得到了各层的image ID；第3行排除标题行（带有“IMAGE”的那一行）及IMAGE的 ID为missing的那一行；第4行将镜像ID倒序输出，使其符合Dockerfile的顺序（“tac”是“cat”的倒序）；第5、6行使用前面命令输出的image ID构建一个docker inspect命令，它输出Docker layer metadata。而此metadata通过管道输入到jq命令中，jq命令过滤metadata，获取当时构建此镜像时Dockerfile中使用的命令。第7行运行前面通过sed构建的整个docker inspect管道链。第8行剥离不能更改文件系统的指令——那些以“#(nop)”作为前缀的指令。\n最后得到的输出结果类似于如下这样：")]),s._v(" "),n("div",{staticClass:"language-docker line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-docker"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sh"')]),s._v("\\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" ian.miell@gmail.com\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" myenvname=myenvvalue\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LABEL")]),s._v(" mylabelname=mylabelvalue\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /opt\n\nmkdir \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("p copied\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COPY")]),s._v(" file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in copied/Dockerfile\n\nmkdir \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("p added\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in added/Dockerfile\n\ntouch /tmp/afile\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in /\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80/tcp\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VOLUME")]),s._v(" \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/data\\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ONBUILD")]),s._v(" touch /tmp/built\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/sh"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\-c"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/bash"')]),s._v("\\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" \\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/sh"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\-c"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\-r"')]),s._v("\\"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("p",[s._v("上面的输出与初始的Dockerfile有些类似了，但还有些区别。"),n("code",[s._v("FROM")]),s._v("指令被替换成了上述CMD指令，丢失了使用的基础镜像BusyBox的信息。"),n("code",[s._v("ADD")]),s._v("和"),n("code",[s._v("COPY")]),s._v("命令没有使用原本的文件名而是使用的校验和（checksum），文件被拷贝到的位置保存了下来。最后，"),n("code",[s._v("CMD")]),s._v("和"),n("code",[s._v("ENTRYPOINT")]),s._v("命令变成了方括号的数组形式。\n由于缺少构建上下文，使得ADD和COPY命令不能使用，上面逆向工程恢复的Dockerfile并不能不加修改就运行。你需要找出什么文件被添加到构建上下文中。对于前面那个例子来说，你可以启动镜像，进入容器的/opt/copied目录和/opt/added目录，将文件提取出来加入到你的新的构建上下文中。")]),s._v(" "),n("h3",{attrs:{id:"容器解决方案"}},[n("a",{attrs:{href:"#%E5%AE%B9%E5%99%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88",title:"容器解决方案"}}),s._v("容器解决方案")]),s._v(" "),n("p",[s._v("使用前面的方案得到你感兴趣镜像的信息，是一个有用并且具有指导意义的方法，然而有更加干净的方法来得到同样的结果——使用centurylink/dockerfile-from-image镜像，同时这种方法更容易维护。而且，此方案提供了与原始Dockerfile类似的"),n("code",[s._v("FROM")]),s._v("命令的信息（如果它可以提供的话）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\\[yangdong@centos7 ~\\]$ docker run \\-v /var/run/docker.sock:/var/run/docker.sock \\\\\n\n\\>   centurylink/dockerfile\\-from\\-image reverseme\n\nFROM busybox:latest\n\nMAINTAINER ian.miell@gmail.com\n\nENV myenvname=myenvvalue\n\nLABEL mylabelname=mylabelvalue\n\nWORKDIR /opt\n\nRUN mkdir \\-p copied\n\nCOPY file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in copied/Dockerfile\n\nRUN mkdir \\-p added\n\nADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in added/Dockerfile\n\nRUN touch /tmp/afile\n\nADD file:4d91fcee48e4591e5fdc4b8963892b7d9582524f85f84b33eac5af164f928213 in /\n\nEXPOSE 80/tcp\n\nVOLUME \\[/data\\]\n\nONBUILD touch /tmp/built\n\nENTRYPOINT \\["/bin/sh" "\\-c" "/bin/bash"\\]\n\nCMD \\["/bin/sh" "\\-c" "\\-r"\\]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("blockquote",[n("p",[n("strong",[s._v("此技术只适用于基于Dockerfile创建的镜像")]),s._v("——如果镜像是通过手工创建然后commit的，镜像间的区别不能体现在镜像的metadata里。")])])])}),[],!1,null,null,null);e.default=t.exports}}]);