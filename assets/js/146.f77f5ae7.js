(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{433:function(s,e,a){"use strict";a.r(e);var n=a(25),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://images.unsplash.com/photo-1590440557255-bc81008ada7e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60",alt:""}})]),s._v(" "),a("p",[s._v("原文地址:"),a("a",{attrs:{href:"https://www.maoyupeng.club/2020/02/dockerfile-command-introduction.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.maoyupeng.club/2020/02/dockerfile-command-introduction.html"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"什么是dockerfile"}},[s._v("什么是Dockerfile")]),s._v(" "),a("p",[s._v("Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。它们简化了从头到尾的流程并极大的简化了部署工作。Dockerfile从FROM命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。")]),s._v(" "),a("p",[s._v("当你在使用 Docker构建镜像的时候，每一个命令都会在前一个命令的基础上形成一个新层。这些基础镜像可以用于创建新的容器。本篇文章将手把手教您如何从基础镜像，一步一步，一层一层的从Dockerfile构建容器的过程。")]),s._v(" "),a("h2",{attrs:{id:"dockerfile示例"}},[s._v("Dockerfile示例")]),s._v(" "),a("div",{staticClass:"language-docker line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Version 1.0")]),s._v("\nFORM ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("14.04\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" Mao "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hongtu1993@sina.cn"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get update && apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y nginx\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello,I am work'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80 80\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"docker执行步骤分析"}},[s._v("Docker执行步骤分析")]),s._v(" "),a("p",[s._v("以上 "),a("code",[s._v("Dockerfile")]),s._v(" 示例中, 每条指令都会创建一个新的镜像层并对镜像进行提交. Docker执行Dockerfile大致流程:")]),s._v(" "),a("ol",[a("li",[s._v("Docker从基础镜像运行一个容器;")]),s._v(" "),a("li",[s._v("执行一条指令,对容器做出修改;")]),s._v(" "),a("li",[s._v("执行类似 "),a("code",[s._v("docker commit")]),s._v(" 的操作, 提交一个新的镜像层;")]),s._v(" "),a("li",[s._v("Docker再基于刚提交的镜像运行一个新容器;")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("Dockerfile")]),s._v(" 中的下一条指令, 直到所有指令都执行完毕;")])]),s._v(" "),a("h3",{attrs:{id:"示例解析"}},[s._v("示例解析")]),s._v(" "),a("ol",[a("li",[a("em",[s._v("FROM")]),s._v(":每个dockerfile的第一条命令是FROM.FROM指令指定一个已经存在的镜像,则代表FROM后续的指令都是基于该镜像(ubuntu14.04)进行的.")]),s._v(" "),a("li",[a("em",[s._v("MAINTAINER")]),s._v(":该指令告诉Docker,作者和邮箱地址")]),s._v(" "),a("li",[a("em",[s._v("RUN")]),s._v(": 通俗地说, "),a("code",[s._v("RUN")]),s._v(" 指令会在shell里使用命令包装器 "),a("code",[s._v("/bin/sh -c")]),s._v(" 来执行. 如果在不支持shell的平台上运行, 则可使用exec格式的RUN指令 "),a("code",[s._v('RUN ["apt-get","install","-y","nginx"]')])]),s._v(" "),a("li",[a("em",[s._v("EXPOSE")]),s._v(": 向外公开端口")])]),s._v(" "),a("h2",{attrs:{id:"dockerfile指令汇总及解析"}},[s._v("Dockerfile指令汇总及解析")]),s._v(" "),a("h3",{attrs:{id:"maintainer"}},[s._v("MAINTAINER")]),s._v(" "),a("p",[s._v("我建议这个命令放在Dockerfile的起始部分，虽然理论上它可以放置于Dockerfile的任意位置。这个命令用于声明作者，并应该放在FROM的后面。")]),s._v(" "),a("div",{staticClass:"language-docker line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MAINTAINER [name] [email]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" authors_name "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hongtu1993@sina.cn"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"from"}},[s._v("FROM")]),s._v(" "),a("p",[s._v("FROM命令可能是最重要的Dockerfile命令。改命令定义了使用哪个基础镜像启动构建流程。基础镜像可以为任意镜 像。如果基础镜像没有被发现，Docker将试图从Docker image index来查找该镜像。FROM命令必须是Dockerfile的首个命令。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# FROM [image name]\n\nFROM ubuntu\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"add"}},[s._v("ADD")]),s._v(" "),a("p",[a("code",[s._v("ADD")]),s._v(" 命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。如果源是一个URL，那该URL的内容将被下载并复制到容器中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# ADD [source directory or URL] [destination directory]\n\nADD /my_app_folder /my_app_folder\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"run"}},[s._v("RUN")]),s._v(" "),a("p",[a("code",[s._v("RUN")]),s._v(" 命令是 "),a("code",[s._v("Dockerfile")]),s._v(" 执行命令的核心部分。它接受命令作为参数并用于创建镜像。不像 "),a("code",[s._v("CMD")]),s._v(" 命令， "),a("code",[s._v("RUN")]),s._v(" 命令用于创建镜像（在之前commit的层之上形成新的层）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# RUN [command]\n\nRUN apt-get update\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"cmd"}},[s._v("CMD")]),s._v(" "),a("p",[s._v("和 "),a("code",[s._v("RUN")]),s._v(" 命令相似， "),a("code",[s._v("CMD")]),s._v(" 可以用于执行特定的命令。和 "),a("code",[s._v("RUN")]),s._v(" 不同的是，这些命令不是在镜像构建的过程中执行的，而是在用镜像构建容器后被调用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# CMD application "argument", "argument", ..\n\nCMD "echo" "Hello Mao!"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"entrypoint"}},[s._v("ENTRYPOINT")]),s._v(" "),a("p",[a("code",[s._v("ENTRYPOINT")]),s._v(" 帮助你配置一个容器使之可执行化，如果你结合 "),a("code",[s._v("CMD")]),s._v(" 命令和 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 命令，你可以从 "),a("code",[s._v("CMD")]),s._v(" 命令中移除“application”而仅仅保留参数，参数将传递给 "),a("code",[s._v("ENTRYPOINT")]),s._v(" 命令。")]),s._v(" "),a("div",{staticClass:"language-docker line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Usage: ENTRYPOINT application ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"argument"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"argument"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ..\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remember: arguments are optional. They can be provided by CMD")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or during the creation of a container.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" echo\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Usage example with CMD:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Arguments set with CMD can be overridden during *run*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello docker!"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENTRYPOINT")]),s._v(" echo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"env"}},[s._v("ENV")]),s._v(" "),a("p",[a("code",[s._v("ENV")]),s._v(" 命令用于设置环境变量。这些变量以”key=value”的形式存在，并可以在容器内被脚本或者程序调用。这个机制给在容器中运行应用带来了极大的便利。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# ENV key value\n\nENV SERVER_WORKS 4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"user"}},[s._v("USER")]),s._v(" "),a("p",[s._v("USER命令用于设置运行容器的UID。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# USER [UID]\n\nUSER 751\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"volume"}},[s._v("VOLUME")]),s._v(" "),a("p",[s._v("VOLUME命令用于让你的容器访问宿主机上的目录。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# VOLUME ["/dir_1", "/dir_2" ..]\n\nVOLUME ["/my_files"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"workdir"}},[s._v("WORKDIR")]),s._v(" "),a("p",[s._v("WORKDIR命令用于设置CMD指明的命令的运行目录。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# WORKDIR /path\n\nWORKDIR ~/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"expose"}},[s._v("EXPOSE")]),s._v(" "),a("p",[a("code",[s._v("EXPOSE")]),s._v(" 指令用来告诉Docker这个容器在运行时会监听哪些端口，Docker在连接不同的容器(使用–link参数)时使用这些信息;\n两个Docker的核心概念是可重复和可移植。镜像应该可以运行在任何主机上并且运行尽可能多的次数。在 Dockerfile中你有能力映射私有和公有端口，但是你永远不要通过Dockerfile映射公有端口。通过映射公有端口到主机上，你将只能运行一个容器化应用程序实例。（译者注：运行多个端口不就冲突啦）")]),s._v(" "),a("div",{staticClass:"language-docker line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-docker"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# EXPOSE [port]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# private and public mapping")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("8080\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# private only")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);