(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{435:function(s,t,n){"use strict";n.r(t);var a=n(25),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul")]),n("p"),s._v(" "),n("ul",[n("li",[n("strong",[s._v("制作Docker image 有两种方式")]),s._v("：")])]),s._v(" "),n("p",[s._v("1. 使用 Docker container，直接构建容器，再导出成 image 使用")]),s._v(" "),n("p",[s._v("2. 是使用 Dockerfile，将所有动作写在文件中，再 build 成 image。Dockerfile 的方式非常灵活，推荐使用")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("Dockerfile 基本结构")])])]),s._v(" "),n("p",[s._v("一般的，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。’#’ 为 Dockerfile 中的注释。先看下面一个小例子：")]),s._v(" "),n("div",{staticClass:"language-docker line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-docker"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This my first nginx Dockerfile")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Version 1.0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Base images 基础镜像")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" centos\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#MAINTAINER 维护者信息")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MAINTAINER")]),s._v(" name \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#ENV 设置环境变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENV")]),s._v(" PATH /usr/local/nginx/sbin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("$PATH\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#ADD  文件放在当前目录下，拷过去会自动解压")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" nginx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("1.8.0.tar.gz /usr/local/  \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" epel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("release"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("latest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("7.noarch.rpm /usr/local/  \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#RUN 执行以下命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" rpm "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("ivh /usr/local/epel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("release"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("latest"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("7.noarch.rpm\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" yum install "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("y wget lftp gcc gcc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("c++ make openssl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("devel pcre"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("devel pcre && yum clean all\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" useradd "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("s /sbin/nologin "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("M www\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#WORKDIR 相当于cd")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WORKDIR")]),s._v(" /usr/local/nginx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("1.8.0\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" ./configure "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("prefix=/usr/local/nginx "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("user=www "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("group=www "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("with"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("http_ssl_module "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("with"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("pcre && make && make install\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RUN")]),s._v(" echo "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"daemon off;"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v(" /etc/nginx.conf\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#EXPOSE 映射端口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXPOSE")]),s._v(" 80\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#CMD 运行以下命令")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CMD")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("strong",[s._v("FROM : 指定基础镜像，要在哪个镜像建立")])]),s._v(" "),n("p",[s._v("格式为 FROM 或FROM :")]),s._v(" "),n("p",[s._v("第一条指令必须为 FROM 指令。")]),s._v(" "),n("p",[n("strong",[s._v("MAINTAINER：指定维护者信息")])]),s._v(" "),n("p",[s._v("格式为 MAINTAINER")]),s._v(" "),n("p",[n("strong",[s._v("RUN：在镜像中要执行的命令")])]),s._v(" "),n("p",[s._v("格式为 RUN 或 RUN [“executable”, “param1”, “param2”]")]),s._v(" "),n("p",[s._v("前者将在 shell 终端中运行命令，即 /bin/bash -c ；后者则使用 exec 执行。指定使用其它终端可以通过第二种方式实现，例如")]),s._v(" "),n("p",[s._v("RUN [“/bin/bash”, “-c”,”echo hello”]")]),s._v(" "),n("p",[n("strong",[s._v("WORKDIR：指定当前工作目录，相当于 cd")])]),s._v(" "),n("p",[s._v("格式为 WORKDIR /path/to/workdir")]),s._v(" "),n("p",[s._v("为后续的 RUN 、 CMD 、 ENTRYPOINT 指令配置工作目录。")]),s._v(" "),n("p",[s._v("可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。例如")]),s._v(" "),n("p",[s._v("WORKDIR /a")]),s._v(" "),n("p",[s._v("WORKDIR b")]),s._v(" "),n("p",[s._v("WORKDIR c")]),s._v(" "),n("p",[s._v("RUN pwd")]),s._v(" "),n("p",[s._v("则最终路径为 /a/b/c")]),s._v(" "),n("p",[n("strong",[s._v("EXPOSE：指定容器要打开的端口")])]),s._v(" "),n("p",[s._v("格式为 EXPOSE […]")]),s._v(" "),n("p",[s._v("告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动容器时需要通过 -P，Docker 主机会自动分配一个端口转发到指定的端口。")]),s._v(" "),n("p",[n("strong",[s._v("ENV：定义环境变量")])]),s._v(" "),n("p",[s._v("格式为 ENV 。 指定一个环境变量，会被后续 RUN 指令使用，并在容器运行时保持。")]),s._v(" "),n("p",[s._v("例如")]),s._v(" "),n("p",[s._v("ENV PATH /usr/local/nginx/sbin:$PATH")]),s._v(" "),n("p",[n("strong",[s._v("COPY ：复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的")])]),s._v(" "),n("p",[s._v("格式为 COPY")]),s._v(" "),n("p",[n("strong",[s._v("ADD：相当于 COPY，但是比 COPY 功能更强大")])]),s._v(" "),n("p",[s._v("格式为 ADD")]),s._v(" "),n("p",[s._v("该命令将复制指定的 到容器中的 。 其中 可以是Dockerfile所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar 文件，复制进容器会自动解压。")]),s._v(" "),n("p",[n("strong",[s._v("VOLUME：挂载目录")])]),s._v(" "),n("p",[s._v("格式为VOLUME [“/data”]")]),s._v(" "),n("p",[s._v("创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。")]),s._v(" "),n("p",[n("strong",[s._v("USER")])]),s._v(" "),n("p",[s._v("格式为 USER daemon")]),s._v(" "),n("p",[s._v("指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户，例如： RUN useradd -s /sbin/nologin -M www。")]),s._v(" "),n("p",[n("strong",[s._v("ENTRYPOINT")])]),s._v(" "),n("p",[s._v("两种格式：")]),s._v(" "),n("p",[s._v('ENTRYPOINT ["executable", "param1", "param2"]')]),s._v(" "),n("p",[s._v("ENTRYPOINT command param1 param2 （shell中执行）")]),s._v(" "),n("p",[s._v("配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。每个 Dockerfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效。")]),s._v(" "),n("p",[n("strong",[s._v("CMD")])]),s._v(" "),n("p",[s._v("支持三种格式：")]),s._v(" "),n("p",[s._v('CMD ["executable","param1","param2"] 使用 exec 执行，推荐方式；')]),s._v(" "),n("p",[s._v("CMD command param1 param2 在 /bin/bash 中执行，提供给需要交互的应用；")]),s._v(" "),n("p",[s._v('CMD ["param1","param2"] 提供给 ENTRYPOINT 的默认参数；')]),s._v(" "),n("p",[s._v("指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。")]),s._v(" "),n("p",[n("strong",[s._v("ONBUILD：在构建本镜像时不生效，在基于此镜像构建镜像时生效")])]),s._v(" "),n("p",[s._v("格式为 ONBUILD [INSTRUCTION]")]),s._v(" "),n("p",[s._v("配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。")]),s._v(" "),n("p",[s._v("ENTRYPOINT 和 CMD 的区别：ENTRYPOINT 指定了该镜像启动时的入口，CMD 则指定了容器启动时的命令，当两者共用时，完整的启动命令像是 ENTRYPOINT + CMD 这样。使用 ENTRYPOINT 的好处是在我们启动镜像就像是启动了一个可执行程序，在 CMD 上仅需要指定参数；另外在我们需要自定义 CMD 时不容易出错。")]),s._v(" "),n("p",[s._v("使用 CMD 的 Dockerfile：")]),s._v(" "),n("p",[s._v("[root@test]# cat Dockerfile")]),s._v(" "),n("p",[s._v("FROM mysql")]),s._v(" "),n("p",[s._v('CMD ["echo","test"]')]),s._v(" "),n("p",[s._v("使用 ENTRYPOINT 的 Dockerfile：")]),s._v(" "),n("p",[s._v("[root@test]# cat Dockerfile")]),s._v(" "),n("p",[s._v("FROM mysql")]),s._v(" "),n("p",[s._v('ENTRYPOINT ["echo","test"]')]),s._v(" "),n("p",[s._v("结论：ENTRYPOINT 不能覆盖掉执行时的参数，CMD 可以掉覆盖默认的参数。")]),s._v(" "),n("p",[n("strong",[s._v("使用以下命令来构建一个镜像：")])]),s._v(" "),n("p",[s._v("#构建镜像时，需要将要使用的包及 Dockerfile 文件放在一个目录中")]),s._v(" "),n("p",[s._v("docker build -t DilemmaVi/nginx:1.8 .")])])}),[],!1,null,null,null);t.default=e.exports}}]);