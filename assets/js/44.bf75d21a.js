(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{366:function(_,t,v){"use strict";v.r(t);var e=v(25),o=Object(e.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#用秒处理python时间"}},[_._v("用秒处理Python时间")]),v("ul",[v("li",[v("a",{attrs:{href:"#大纪元"}},[_._v("大纪元")])]),v("li",[v("a",{attrs:{href:"#python时间（以秒为单位）为浮点数"}},[_._v("Python时间（以秒为单位）为浮点数")])]),v("li",[v("a",{attrs:{href:"#python时间以秒为单位，表示本地时间"}},[_._v("Python时间以秒为单位，表示本地时间")])])])]),v("li",[v("a",{attrs:{href:"#了解时区"}},[_._v("了解时区")]),v("ul",[v("li",[v("a",{attrs:{href:"#utc和时区"}},[_._v("UTC和时区")])]),v("li",[v("a",{attrs:{href:"#夏令时"}},[_._v("夏令时")])])])]),v("li",[v("a",{attrs:{href:"#使用数据结构处理python时间"}},[_._v("使用数据结构处理Python时间")]),v("ul",[v("li",[v("a",{attrs:{href:"#python时间为元组"}},[_._v("Python时间为元组")])]),v("li",[v("a",{attrs:{href:"#python时间作为对象"}},[_._v("Python时间作为对象")])])])]),v("li",[v("a",{attrs:{href:"#将以秒为单位的python时间转换为对象"}},[_._v("将以秒为单位的Python时间转换为对象")]),v("ul",[v("li",[v("a",{attrs:{href:"#世界标准时间（utc）"}},[_._v("世界标准时间（UTC）")])]),v("li",[v("a",{attrs:{href:"#当地时间"}},[_._v("当地时间")])])])]),v("li",[v("a",{attrs:{href:"#将本地时间对象转换为秒"}},[_._v("将本地时间对象转换为秒")])])])]),_._v("\nPython "),v("code",[_._v("time")]),_._v(" 模块提供了多种方法来表示代码中的时间，例如对象，数字和字符串。 它还提供了除表示时间以外的功能，例如在代码执行过程中等待和测量代码效率。"),v("p"),_._v(" "),v("p",[_._v("本文将引导您了解NET中最常用的功能和对象 "),v("code",[_._v("time")]),_._v(" 。")]),_._v(" "),v("p",[v("strong",[_._v("到本文结尾，您将能够：")])]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("了解")]),_._v(" 处理日期和时间的核心核心概念，例如纪元，时区和夏时制")]),_._v(" "),v("li",[v("strong",[_._v("代表")]),_._v(" 使用花车，元组代码的时间， "),v("code",[_._v("struct_time")])]),_._v(" "),v("li",[_._v("在不同的时间表示形式之间进行"),v("strong",[_._v("转换")])]),_._v(" "),v("li",[v("strong",[_._v("挂起")]),_._v(" 线程执行")]),_._v(" "),v("li",[_._v("使用以下方法"),v("strong",[_._v("衡量")]),_._v(" 代码性能 "),v("code",[_._v("perf_counter()")])])]),_._v(" "),v("p",[_._v("您将首先学习如何使用浮点数来表示时间。")]),_._v(" "),v("p",[v("strong",[_._v("免费红利：")]),_._v(" "),v("a",{attrs:{href:"https://realpython.com/python-time-module/",target:"_blank",rel:"noopener noreferrer"}},[_._v("单击此处可获得我们的免费Python备忘单"),v("OutboundLink")],1),_._v(" ，其中显示了Python 3的基础知识，例如使用数据类型，字典，列表和Python函数。")]),_._v(" "),v("p",[_._v("广告")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"用秒处理python时间"}},[_._v("用秒处理Python时间")]),_._v(" "),v("p",[_._v("您可以在应用程序中管理Python时间概念的一种方法是使用浮点数，该浮点数表示自某个时代开始（即某个确定的起点）以来经过的秒数。")]),_._v(" "),v("p",[_._v("让我们更深入地了解其含义，为什么有用以及如何在应用程序中基于Python时间使用它来实现逻辑。")]),_._v(" "),v("h3",{attrs:{id:"大纪元"}},[_._v("大纪元")]),_._v(" "),v("p",[_._v("您在上一节中了解到，您可以使用浮点数来管理Python时间，该浮点数表示自某个时代开始以来经过的时间。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://www.merriam-webster.com/dictionary/era",target:"_blank",rel:"noopener noreferrer"}},[_._v("Merriam-Webster"),v("OutboundLink")],1),_._v(" 将时代定义为：")]),_._v(" "),v("ul",[v("li",[_._v("一个固定的时间点，从中可以推断出一系列的年份")]),_._v(" "),v("li",[_._v("以给定日期为基础计算的时间符号系统")])]),_._v(" "),v("p",[_._v("这里要掌握的重要概念是，在处理Python时间时，您要考虑一个由起点确定的时间段。 在计算中，您将此起点称为 "),v("strong",[_._v("epoch")]),_._v(" 。")]),_._v(" "),v("p",[_._v("那么，纪元就是您可以衡量时间流逝的起点。")]),_._v(" "),v("p",[_._v("例如，如果将纪元定义为UTC 1970年1月1日的午夜（Windows和大多数UNIX系统上定义的纪元），则可以将UTC 1970年1月2日的午夜表示 "),v("code",[_._v("86400")]),_._v(" 为该纪元以来的秒数。")]),_._v(" "),v("p",[_._v("这是因为一分钟有60秒，一小时有60分钟，一天有24小时。 1970年1月2日UTC距时代只有一天，因此您可以应用基本数学来得出该结果：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[v("code",[_._v(">>> 60 * 60 * 24 86400")])]),_._v(" "),v("p",[_._v("同样重要的是要注意，您仍然可以表示时代之前的时间。 秒数将是负数。")]),_._v(" "),v("p",[_._v("例如，您可以将世界标准时间1969年12月31日午夜（以1970年1月1日为纪元）表示为 "),v("code",[_._v("-86400")]),_._v(" 秒。")]),_._v(" "),v("p",[_._v("尽管1970年1月1日是UTC的通用纪元，但它并不是计算中使用的唯一纪元。 实际上，不同的操作系统，文件系统和API有时会使用不同的时期。")]),_._v(" "),v("p",[_._v("如您所见，UNIX系统将时代定义为1970年1月1日。另一方面，Win32 API将时代定义为 "),v("a",{attrs:{href:"https://blogs.msdn.microsoft.com/oldnewthing/20090306-00/?p=18913/",target:"_blank",rel:"noopener noreferrer"}},[_._v("1601年1月1日"),v("OutboundLink")],1),_._v(" 。")]),_._v(" "),v("p",[_._v("您可以 "),v("code",[_._v("time.gmtime()")]),_._v(" 用来确定系统的时代：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.gmtime(0)\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("您将了解 "),v("code",[_._v("gmtime()")]),_._v(" 和 "),v("code",[_._v("struct_time")]),_._v(" 整篇文章的过程中。 现在，只知道您可以使用 "),v("code",[_._v("time")]),_._v(" 此功能来发现纪元。")]),_._v(" "),v("p",[_._v("既然您了解了更多有关如何使用纪元来测量时间的信息，那么让我们看一下Python的 "),v("code",[_._v("time")]),_._v(" 模块，看看它提供了哪些功能来帮助您实现这一目标。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h3",{attrs:{id:"python时间（以秒为单位）为浮点数"}},[_._v("Python时间（以秒为单位）为浮点数")]),_._v(" "),v("p",[_._v("首先， "),v("code",[_._v("time.time()")]),_._v(" 返回自纪元以来经过的秒数。 返回值是一个浮点数，占小数秒：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time()\n1551143536.9323719`")])])])]),_._v(" "),v("p",[_._v("您在计算机上得到的数字可能会非常不同，因为被认为是纪元的参考点可能会非常不同。")]),_._v(" "),v("p",[v("strong",[_._v("进一步阅读：")]),_._v(" 引入了Python 3.7 "),v("a",{attrs:{href:"https://realpython.com/python37-new-features/#timing-precision",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("time_ns()")]),v("OutboundLink")],1),_._v(" ，该函数返回一个整数值，该整数表示自该纪元以来经过的时间，但以纳秒而不是秒为单位。")]),_._v(" "),v("p",[_._v("出于多种原因，以秒为单位测量时间很有用：")]),_._v(" "),v("ul",[v("li",[_._v("您可以使用浮点数来计算两个时间点之间的时差。")]),_._v(" "),v("li",[_._v("浮点数易于 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Serialization",target:"_blank",rel:"noopener noreferrer"}},[_._v("序列化"),v("OutboundLink")],1),_._v(" ，这意味着可以将其存储以进行数据传输，并在另一侧完整保留。")])]),_._v(" "),v("p",[_._v("但是，有时您可能希望将当前时间表示为字符串。 为此，您可以将秒数传递 "),v("code",[_._v("time()")]),_._v(" 到中 "),v("code",[_._v("time.ctime()")]),_._v(" 。")]),_._v(" "),v("h3",{attrs:{id:"python时间以秒为单位，表示本地时间"}},[_._v("Python时间以秒为单位，表示本地时间")]),_._v(" "),v("p",[_._v("如您先前所见，您可能希望将Python时间（表示从纪元起经过的秒数）转换为 "),v("a",{attrs:{href:"https://realpython.com/python-strings/",target:"_blank",rel:"noopener noreferrer"}},[_._v("string"),v("OutboundLink")],1),_._v(" 。 您可以使用 "),v("code",[_._v("ctime()")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import time, ctime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("t = time()\nctime(t)\n'Mon Feb 25 19:11:59 2019'`")])])])]),_._v(" "),v("p",[_._v("在这里，您已将当前时间（以秒为单位）记录到变量中 "),v("code",[_._v("t")]),_._v(" ，然后 "),v("code",[_._v("t")]),_._v(" 作为参数 传递 给 "),v("code",[_._v("ctime()")]),_._v(" ，该 参数 返回该时间的字符串表示形式。")]),_._v(" "),v("p",[v("strong",[_._v("技术细节：")]),_._v(" 根据 "),v("code",[_._v("ctime()")]),_._v(" 定义 ，表示自纪元以来的秒数的自变量是可选的 。 如果不传递参数，则 默认 "),v("code",[_._v("ctime()")]),_._v(" 使用返回值 "),v("code",[_._v("time()")]),_._v(" 。 因此，您可以简化上面的示例：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import ctime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("ctime()\n'Mon Feb 25 19:11:59 2019'`")])])])]),_._v(" "),v("p",[_._v("返回 的时间的字符串表示形式，也称为 "),v("strong",[_._v("timestamp")]),_._v(" ， "),v("code",[_._v("ctime()")]),_._v(" 其格式如下：")]),_._v(" "),v("ol",[v("li",[v("strong",[_._v("本周日：")]),_._v(" "),v("code",[_._v("Mon")]),_._v(" （ "),v("code",[_._v("Monday")]),_._v(" ）")]),_._v(" "),v("li",[v("strong",[_._v("一年中的月份：")]),_._v(" "),v("code",[_._v("Feb")]),_._v(" （ "),v("code",[_._v("February")]),_._v(" ）")]),_._v(" "),v("li",[v("strong",[_._v("每月的某天：")]),_._v(" "),v("code",[_._v("25")])]),_._v(" "),v("li",[v("strong",[_._v("使用"),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/24-hour_clock",target:"_blank",rel:"noopener noreferrer"}},[_._v("24小时制的"),v("OutboundLink")],1),_._v("小时，分钟和秒：")]),_._v(" "),v("code",[_._v("19:11:59")])]),_._v(" "),v("li",[v("strong",[_._v("年：")]),_._v(" "),v("code",[_._v("2019")])])]),_._v(" "),v("p",[_._v("前面的示例显示了从美国中南部地区的计算机捕获的特定时刻的时间戳。 但是，假设您居住在澳大利亚的悉尼，并且在同一瞬间执行了相同的命令。")]),_._v(" "),v("p",[_._v("除了上面的输出，您将看到以下内容：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import time, ctime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("t = time()\nctime(t)\n'Tue Feb 26 12:11:59 2019'`")])])])]),_._v(" "),v("p",[_._v("注意， "),v("code",[_._v("day of week")]),_._v(" ， "),v("code",[_._v("day of month")]),_._v(" ，和 "),v("code",[_._v("hour")]),_._v(" 时间戳的部分比第一示例不同。")]),_._v(" "),v("p",[_._v("这些输出是不同的，因为返回的时间戳 "),v("code",[_._v("ctime()")]),_._v(" 取决于您的地理位置。")]),_._v(" "),v("p",[v("strong",[_._v("注意：")]),_._v(" 时区的概念与您的实际位置有关，但是您可以在计算机的设置中进行修改，而无需实际重新定位。")]),_._v(" "),v("p",[_._v("取决于您的实际位置的时间表示称为 "),v("strong",[_._v("本地时间")]),_._v(" ，并且使用了称为 "),v("strong",[_._v("时区")]),_._v(" 的概念 。")]),_._v(" "),v("p",[v("strong",[_._v("注意：")]),_._v(" 由于本地时间与您的语言环境相关，因此时间戳通常会考虑特定于语言环境的详细信息，例如字符串中元素的顺序以及日和月缩写的翻译。 "),v("code",[_._v("ctime()")]),_._v(" 忽略这些细节。")]),_._v(" "),v("p",[_._v("让我们更深入地了解时区的概念，以便您可以更好地理解Python时间表示。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"了解时区"}},[_._v("了解时区")]),_._v(" "),v("p",[_._v("时区是世界上符合标准时间的区域。 时区由它们相对于 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Coordinated_Universal_Time",target:"_blank",rel:"noopener noreferrer"}},[_._v("协调世界时"),v("OutboundLink")],1),_._v(" （UTC） 的偏移量 以及可能包含的夏令时定义（我们将在本文稍后详细介绍）。")]),_._v(" "),v("p",[v("strong",[_._v("趣闻：")]),_._v(" 如果您以英语为母语，您可能想知道为什么“协调世界时”的缩写是UTC而不是更明显的CUT。 但是，如果您是说法语的人，则可以将其称为“ Temps UniverselCoordonné”，这是一个不同的缩写：TUC。")]),_._v(" "),v("p",[_._v("最终， "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Coordinated_Universal_Time#Etymology",target:"_blank",rel:"noopener noreferrer"}},[_._v("国际电信联盟和国际天文学联盟对UTC"),v("OutboundLink")],1),_._v(" 作为官方缩写进行了 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Coordinated_Universal_Time#Etymology",target:"_blank",rel:"noopener noreferrer"}},[_._v("折衷，"),v("OutboundLink")],1),_._v(" 因此无论语言如何，该缩写都是相同的。")]),_._v(" "),v("h3",{attrs:{id:"utc和时区"}},[_._v("UTC和时区")]),_._v(" "),v("p",[_._v("UTC是世界上所有时间同步（或协调）的时间标准。 它本身不是时区，而是定义什么时区的超越标准。")]),_._v(" "),v("p",[_._v("UTC时间是使用 "),v("a",{attrs:{href:"https://www.merriam-webster.com/dictionary/astronomical%20time",target:"_blank",rel:"noopener noreferrer"}},[_._v("天文时间"),v("OutboundLink")],1),_._v(" （指地球的自转）和 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/Atomic_clock",target:"_blank",rel:"noopener noreferrer"}},[_._v("原子钟"),v("OutboundLink")],1),_._v(" 精确测量的 。")]),_._v(" "),v("p",[_._v("然后通过时区相对于UTC的偏移量来定义时区。 例如，在北美和南美，中央时区（CT）比UTC落后五或六个小时，因此使用UTC-5：00或UTC-6：00表示法。")]),_._v(" "),v("p",[_._v("另一方面，澳大利亚悉尼属于澳大利亚东部时区（AET），该时间比UTC（UTC + 10：00或UTC + 11：00）提前十到十一小时。")]),_._v(" "),v("p",[_._v("这种差异（UTC-6：00至UTC + 10：00）是您 "),v("code",[_._v("ctime()")]),_._v(" 在先前示例 的两个输出中观察到差异的原因 ：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("中部时间（CT）：")]),_._v(" "),v("code",[_._v("'Mon Feb 25 19:11:59 2019'")])]),_._v(" "),v("li",[v("strong",[_._v("澳大利亚东部时间（AET）：")]),_._v(" "),v("code",[_._v("'Tue Feb 26 12:11:59 2019'")])])]),_._v(" "),v("p",[_._v("这些时间恰好相隔十六小时，这与上述时区偏移量一致。")]),_._v(" "),v("p",[_._v("您可能想知道为什么CT可以比UTC落后5或6个小时，或者为什么AET可以比UTC提前10或11个小时。 这样做的原因是，世界上某些地区（包括这些时区的一部分）遵守夏令时。")]),_._v(" "),v("h3",{attrs:{id:"夏令时"}},[_._v("夏令时")]),_._v(" "),v("p",[_._v("夏季通常 比冬季 多 "),v("a",{attrs:{href:"https://sciencing.com/many-hours-daylight-summer-8196183.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("白天"),v("OutboundLink")],1),_._v(" 。 因此，某些地区在春季和夏季要遵守夏令时（DST），以便更好地利用这些夏令时。")]),_._v(" "),v("p",[_._v("对于遵守DST的地方，它们的时钟会在春季开始时向前跳一个小时（实际上是浪费了一个小时）。 然后，在秋天，时钟将重置为标准时间。")]),_._v(" "),v("p",[_._v("字母S和D表示时区标记中的标准时间和夏时制：")]),_._v(" "),v("ul",[v("li",[_._v("中部标准时间（CST）")]),_._v(" "),v("li",[_._v("澳大利亚东部夏令时间（AEDT）")])]),_._v(" "),v("p",[_._v("当您将时间表示为本地时间的时间戳时，考虑DST是否适用总是很重要的。")]),_._v(" "),v("p",[v("code",[_._v("ctime()")]),_._v(" 节省了夏令时。 因此，前面列出的输出差异将更加准确，如下所示：")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("中央标准时间（CST）：")]),_._v(" "),v("code",[_._v("'Mon Feb 25 19:11:59 2019'")])]),_._v(" "),v("li",[v("strong",[_._v("澳大利亚东部夏令时间（AEDT）：")]),_._v(" "),v("code",[_._v("'Tue Feb 26 12:11:59 2019'")])])]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"使用数据结构处理python时间"}},[_._v("使用数据结构处理Python时间")]),_._v(" "),v("p",[_._v("既然您已经掌握了许多基本的时间概念，包括纪元，时区和UTC，那么让我们看一下使用Python "),v("code",[_._v("time")]),_._v(" 模块 表示时间的更多方法 。")]),_._v(" "),v("h3",{attrs:{id:"python时间为元组"}},[_._v("Python时间为元组")]),_._v(" "),v("p",[_._v("您可以使用另一个原始数据结构： "),v("a",{attrs:{href:"https://realpython.com/python-lists-tuples/",target:"_blank",rel:"noopener noreferrer"}},[_._v("tuple"),v("OutboundLink")],1),_._v(" ，而不是使用数字来表示Python时间 。")]),_._v(" "),v("p",[_._v("元组通过抽象一些数据并使其更具可读性，使您可以更轻松地管理时间。")]),_._v(" "),v("p",[_._v("当您将时间表示为元组时，元组中的每个元素都对应于时间的特定元素：")]),_._v(" "),v("ol",[v("li",[_._v("年")]),_._v(" "),v("li",[_._v("以整数形式表示的月份，范围为1（一月）至12（十二月）")]),_._v(" "),v("li",[_._v("一个月中的某天")]),_._v(" "),v("li",[_._v("小时（整数），范围从0（12 AM）到23（11 PM）")]),_._v(" "),v("li",[_._v("分钟")]),_._v(" "),v("li",[_._v("第二")]),_._v(" "),v("li",[_._v("星期几，整数形式，范围从0（星期一）到6（星期日）")]),_._v(" "),v("li",[_._v("一年中的一天")]),_._v(" "),v("li",[_._v("夏令时，为具有以下值的整数：\n"),v("ul",[v("li",[v("code",[_._v("1")]),_._v(" 是夏令时。")]),_._v(" "),v("li",[v("code",[_._v("0")]),_._v(" 是标准时间。")]),_._v(" "),v("li",[v("code",[_._v("-1")]),_._v(" 未知。")])])])]),_._v(" "),v("p",[_._v("使用已经学习的方法，您可以通过两种不同的方式表示相同的Python时间：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import time, ctime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("t = time()\nt\n1551186415.360564")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("ctime(t)\n'Tue Feb 26 07:06:55 2019'")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time_tuple = (2019, 2, 26, 7, 6, 55, 1, 57, 0)`")])])])]),_._v(" "),v("p",[_._v("在这种情况下， "),v("code",[_._v("t")]),_._v(" 和 "),v("code",[_._v("time_tuple")]),_._v(" 表示相同的时间，但是元组提供了更具可读性的界面来处理时间分量。")]),_._v(" "),v("p",[v("strong",[_._v("技术细节：")]),_._v(" 实际上，如果您查看以 "),v("code",[_._v("time_tuple")]),_._v(" 秒为单位 的Python时间 （您将在本文稍后看到如何做），您会发现它解析为 "),v("code",[_._v("1551186415.0")]),_._v(" 而不是 "),v("code",[_._v("1551186415.360564")]),_._v(" 。")]),_._v(" "),v("p",[_._v("这是因为元组没有办法表示小数秒。")]),_._v(" "),v("p",[_._v("虽然元组为使用Python时间提供了更易于管理的界面，但还有一个更好的对象： "),v("code",[_._v("struct_time")]),_._v(" 。")]),_._v(" "),v("h3",{attrs:{id:"python时间作为对象"}},[_._v("Python时间作为对象")]),_._v(" "),v("p",[_._v("元组构造的问题在于，尽管它比单个基于秒的数字更好地组织起来，但看起来仍然像一堆数字。")]),_._v(" "),v("p",[v("code",[_._v("struct_time")]),_._v(" 通过利用 "),v("a",{attrs:{href:"https://dbader.org/blog/writing-clean-python-with-namedtuples",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("NamedTuple")]),v("OutboundLink")],1),_._v(" Python "),v("code",[_._v("collections")]),_._v(" 模块中的，将元组的数字序列与有用的标识符相关联 ， 提供了一种解决方案 ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import struct_time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time_tuple = (2019, 2, 26, 7, 6, 55, 1, 57, 0)\ntime_obj = struct_time(time_tuple)\ntime_obj\ntime.struct_time(tm_year=2019, tm_mon=2, tm_mday=26, tm_hour=7, tm_min=6, tm_sec=55, tm_wday=1, tm_yday=57, tm_isdst=0)`")])])])]),_._v(" "),v("p",[v("strong",[_._v("技术细节：")]),_._v(" 如果您来自另一种语言，则术语 "),v("code",[_._v("struct")]),_._v(" 和 "),v("code",[_._v("object")]),_._v(" 可能会彼此相反。")]),_._v(" "),v("p",[_._v("在Python中，没有称为的数据类型 "),v("code",[_._v("struct")]),_._v(" 。 相反，一切都是对象。")]),_._v(" "),v("p",[_._v("但是，该名称 "),v("code",[_._v("struct_time")]),_._v(" 是从 "),v("a",{attrs:{href:"https://en.cppreference.com/w/c/chrono/tm",target:"_blank",rel:"noopener noreferrer"}},[_._v("基于C的时间库"),v("OutboundLink")],1),_._v(" 派生的， 其中数据类型实际上是 "),v("code",[_._v("struct")]),_._v(" 。")]),_._v(" "),v("p",[_._v("实际上， "),v("a",{attrs:{href:"https://github.com/python/cpython/blob/master/Modules/timemodule.c",target:"_blank",rel:"noopener noreferrer"}},[_._v("用C语言实现的"),v("OutboundLink")],1),_._v(" Python "),v("code",[_._v("time")]),_._v(" 模块 通过包含头文件直接 使用此 模块 。 "),v("a",{attrs:{href:"https://github.com/python/cpython/blob/master/Modules/timemodule.c",target:"_blank",rel:"noopener noreferrer"}},[v("OutboundLink")],1),v("code",[_._v("struct")]),_._v(" "),v("code",[_._v("times.h")])]),_._v(" "),v("p",[_._v("现在，您可以 "),v("code",[_._v("time_obj")]),_._v(" 使用属性名称而不是索引 来访问特定元素 ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> day_of_year = time_obj.tm_yday")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("day_of_year\n57")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("day_of_month = time_obj.tm_mday\nday_of_month\n26`")])])])]),_._v(" "),v("p",[_._v("除了的可读性和可用性外 "),v("code",[_._v("struct_time")]),_._v(" ，了解它也很重要，因为它是Python "),v("code",[_._v("time")]),_._v(" 模块 中许多函数的返回类型 。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"将以秒为单位的python时间转换为对象"}},[_._v("将以秒为单位的Python时间转换为对象")]),_._v(" "),v("p",[_._v("现在，您已经了解了使用Python时间的三种主要方法，您将学习如何在不同的时间数据类型之间进行转换。")]),_._v(" "),v("p",[_._v("在时间数据类型之间进行转换取决于时间是UTC还是本地时间。")]),_._v(" "),v("h3",{attrs:{id:"世界标准时间（utc）"}},[_._v("世界标准时间（UTC）")]),_._v(" "),v("p",[_._v("纪元使用UTC定义而不是时区。 因此，自纪元以来经过的秒数不会根据您的地理位置而变化。")]),_._v(" "),v("p",[_._v("但是，不能说相同 "),v("code",[_._v("struct_time")]),_._v(" 。 Python时间的对象表示可能会也可能不会考虑您的时区。")]),_._v(" "),v("p",[_._v("有两种方法可以将代表秒的浮点数转换为 "),v("code",[_._v("struct_time")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[_._v("世界标准时间")]),_._v(" "),v("li",[_._v("当地时间")])]),_._v(" "),v("p",[_._v("要将Python时间浮点转换为基于UTC的时间 "),v("code",[_._v("struct_time")]),_._v(" ，Python "),v("code",[_._v("time")]),_._v(" 模块提供了一个名为的函数 "),v("code",[_._v("gmtime()")]),_._v(" 。")]),_._v(" "),v("p",[_._v("您已经 "),v("code",[_._v("gmtime()")]),_._v(" 在本文中 看到过 使用过一次：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.gmtime(0)\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("您使用此调用来发现系统的时代。 现在，您有了一个更好的基础来了解此处的实际情况。")]),_._v(" "),v("p",[v("code",[_._v("gmtime()")]),_._v(" 将自纪元以来经过的秒数转换为 "),v("code",[_._v("struct_time")]),_._v(" UTC。 在这种情况下，您已经传递 "),v("code",[_._v("0")]),_._v(" 了秒数，这意味着您试图在UTC中查找纪元本身。")]),_._v(" "),v("p",[v("strong",[_._v("注意：")]),_._v(" 请注意，属性 "),v("code",[_._v("tm_isdst")]),_._v(" 设置为 "),v("code",[_._v("0")]),_._v(" 。 此属性表示时区是否正在使用夏时制。 UTC绝不赞同DST，使标志将永远是 "),v("code",[_._v("0")]),_._v(" 当使用 "),v("code",[_._v("gmtime()")]),_._v(" 。")]),_._v(" "),v("p",[_._v("如您所见， "),v("code",[_._v("struct_time")]),_._v(" 不能代表小数秒，因此可以 "),v("code",[_._v("gmtime()")]),_._v(" 忽略参数中的小数秒：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.gmtime(1.99)\ntime.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=1, tm_wday=3, tm_yday=1, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("请注意，即使您经过的秒数非常接近 "),v("code",[_._v("2")]),_._v(" ， "),v("code",[_._v(".99")]),_._v(" 小数秒 也会 被忽略，如所示 "),v("code",[_._v("tm_sec=1")]),_._v(" 。")]),_._v(" "),v("p",[_._v("的 "),v("code",[_._v("secs")]),_._v(" 参数 "),v("code",[_._v("gmtime()")]),_._v(" 是可选的，这意味着您可以 "),v("code",[_._v("gmtime()")]),_._v(" 不带任何参数 进行调用 。 这样做将提供UTC的当前时间：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.gmtime()\ntime.struct_time(tm_year=2019, tm_mon=2, tm_mday=28, tm_hour=12, tm_min=57, tm_sec=24, tm_wday=3, tm_yday=59, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("有趣的是，此函数中没有逆函数 "),v("code",[_._v("time")]),_._v(" 。 相反，您必须在Python的 "),v("code",[_._v("calendar")]),_._v(" 模块中查找名为的函数 "),v("code",[_._v("timegm()")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import calendar")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("import time\ntime.gmtime()\ntime.struct_time(tm_year=2019, tm_mon=2, tm_mday=28, tm_hour=13, tm_min=23, tm_sec=12, tm_wday=3, tm_yday=59, tm_isdst=0)")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("calendar.timegm(time.gmtime())\n1551360204`")])])])]),_._v(" "),v("p",[v("code",[_._v("timegm()")]),_._v(" 接受一个元组（或 "),v("code",[_._v("struct_time")]),_._v(" ，因为它是元组的子类），并返回距该纪元以来的相应秒数。")]),_._v(" "),v("p",[v("strong",[_._v("历史背景：")]),_._v(" 如果您对为什么 "),v("code",[_._v("timegm()")]),_._v(" 不在 这里感兴趣 "),v("code",[_._v("time")]),_._v(" ，可以在 "),v("a",{attrs:{href:"https://bugs.python.org/issue6280",target:"_blank",rel:"noopener noreferrer"}},[_._v("Python Issue 6280中"),v("OutboundLink")],1),_._v(" 查看讨论 。")]),_._v(" "),v("p",[_._v("简而言之，最初添加它是 "),v("code",[_._v("calendar")]),_._v(" 因为 "),v("code",[_._v("time")]),_._v(" 它紧随C的时间库（在中定义 "),v("code",[_._v("time.h")]),_._v(" ），其中不包含匹配函数。 上述问题提出了移入或复制 "),v("code",[_._v("timegm()")]),_._v(" 到 的想法 "),v("code",[_._v("time")]),_._v(" 。")]),_._v(" "),v("p",[_._v("但是，随着 "),v("code",[_._v("datetime")]),_._v(" 库的改进，的修补实施中的不一致 "),v("code",[_._v("time.timegm()")]),_._v(" 以及如何处理的问题 "),v("code",[_._v("calendar.timegm()")]),_._v(" ，维护人员拒绝了该修补程序，因此鼓励使用该修补程序 "),v("code",[_._v("datetime")]),_._v(" 。")]),_._v(" "),v("p",[_._v("因为它是标准，所以使用UTC在编程中非常有价值。 您不必担心DST，时区或语言环境信息。")]),_._v(" "),v("p",[_._v("就是说，有很多情况下您想使用当地时间。 接下来，您将看到如何从秒转换为本地时间，以便做到这一点。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h3",{attrs:{id:"当地时间"}},[_._v("当地时间")]),_._v(" "),v("p",[_._v("在您的应用程序中，您可能需要使用当地时间而不是UTC。 Python的 "),v("code",[_._v("time")]),_._v(" 模块提供了一个功能，用于从自epoch调用以来经过的秒数获取本地时间 "),v("code",[_._v("localtime()")]),_._v(" 。")]),_._v(" "),v("p",[_._v("的签名 "),v("code",[_._v("localtime()")]),_._v(" 类似于 "),v("code",[_._v("gmtime()")]),_._v(" ，它带有一个可选 "),v("code",[_._v("secs")]),_._v(" 参数，用于 "),v("code",[_._v("struct_time")]),_._v(" 使用您当地的时区 构建一个 ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.time()\n1551448206.86196")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("time.localtime(1551448206.86196)\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=7, tm_min=50, tm_sec=6, tm_wday=4, tm_yday=60, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("注意 "),v("code",[_._v("tm_isdst=0")]),_._v(" 。 由于DST与本地时间的问题， "),v("code",[_._v("tm_isdst")]),_._v(" 会之间进行切换 "),v("code",[_._v("0")]),_._v(" ，并 "),v("code",[_._v("1")]),_._v(" 根据DST是否适用于给定的时间。 由于 "),v("code",[_._v("tm_isdst=0")]),_._v(" ，DST不适用于2019年3月1日。")]),_._v(" "),v("p",[_._v("在美国，2019年的夏令时开始于3月10日。因此，要测试DST标志是否会正确更改，您需要在参数中添加9天的秒数 "),v("code",[_._v("secs")]),_._v(" 。")]),_._v(" "),v("p",[_._v("要计算这一点，您需要将一天中的秒数（86,400）乘以9天：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> new_secs = 1551448206.86196 + (86400 * 9)")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.localtime(new_secs)\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=10, tm_hour=8, tm_min=50, tm_sec=6, tm_wday=6, tm_yday=69, tm_isdst=1)`")])])])]),_._v(" "),v("p",[_._v("现在，您将看到 "),v("code",[_._v("struct_time")]),_._v(" 显示的日期为2019年3月10日 "),v("code",[_._v("tm_isdst=1")]),_._v(" 。 另外，请注意 ，由于夏时制的原因 ， "),v("code",[_._v("tm_hour")]),_._v(" 它也跳到 了前面的示例中， "),v("code",[_._v("8")]),_._v(" 而不是 "),v("code",[_._v("7")]),_._v(" 之前的示例中。")]),_._v(" "),v("p",[_._v("从Python 3.3开始， "),v("code",[_._v("struct_time")]),_._v(" 还包括两个属性，它们对于确定时区非常有用 "),v("code",[_._v("struct_time")]),_._v(" ：")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("tm_zone")])]),_._v(" "),v("li",[v("code",[_._v("tm_gmtoff")])])]),_._v(" "),v("p",[_._v("最初，这些属性与平台有关，但是自Python 3.6起，它们在所有平台上都可用。")]),_._v(" "),v("p",[_._v("首先， "),v("code",[_._v("tm_zone")]),_._v(" 存储本地时区：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("current_local = time.localtime()\ncurrent_local.tm_zone\n'CST'`")])])])]),_._v(" "),v("p",[_._v("在这里，您可以看到 "),v("code",[_._v("localtime()")]),_._v(" 返回 "),v("code",[_._v("struct_time")]),_._v(" 的时区设置为 "),v("code",[_._v("CST")]),_._v(" （中央标准时间）。")]),_._v(" "),v("p",[_._v("如您先前所见，您还可以基于两条信息（UTC偏移量和DST（如果适用））来判断时区：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("current_local = time.localtime()\ncurrent_local.tm_gmtoff\n-21600")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("current_local.tm_isdst\n0`")])])])]),_._v(" "),v("p",[_._v("在这种情况下，你可以看到， "),v("code",[_._v("current_local")]),_._v(" 是 "),v("code",[_._v("21600")]),_._v(" 后面GMT，代表格林威治标准时间秒。 GMT是没有UTC偏移的时区：UTC±00：00。")]),_._v(" "),v("p",[v("code",[_._v("21600")]),_._v(" 秒除以每小时的秒数（3600）表示 "),v("code",[_._v("current_local")]),_._v(" 时间为 "),v("code",[_._v("GMT-06:00")]),_._v(" （或 "),v("code",[_._v("UTC-06:00")]),_._v(" ）。")]),_._v(" "),v("p",[_._v("您可以使用GMT偏移量和DST状态推断， "),v("code",[_._v("current_local")]),_._v(" 是 "),v("code",[_._v("UTC-06:00")]),_._v(" 在标准时间，这对应于中央标准时区。")]),_._v(" "),v("p",[_._v("就像 "),v("code",[_._v("gmtime()")]),_._v(" ，您可以在 "),v("code",[_._v("secs")]),_._v(" 调用时 忽略 参数 "),v("code",[_._v("localtime()")]),_._v(" ，它将在中返回当前本地时间 "),v("code",[_._v("struct_time")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.localtime()\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=8, tm_min=34, tm_sec=28, tm_wday=4, tm_yday=60, tm_isdst=0)`")])])])]),_._v(" "),v("p",[_._v("不同于 "),v("code",[_._v("gmtime()")]),_._v(" ，的反函数 "),v("code",[_._v("localtime()")]),_._v(" 确实存在于Python "),v("code",[_._v("time")]),_._v(" 模块中。 让我们看看它是如何工作的。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"将本地时间对象转换为秒"}},[_._v("将本地时间对象转换为秒")]),_._v(" "),v("p",[_._v("您已经了解了如何使用将UTC时间对象转换为秒 "),v("code",[_._v("calendar.timegm()")]),_._v(" 。 要将本地时间转换为秒，您将使用 "),v("code",[_._v("mktime()")]),_._v(" 。")]),_._v(" "),v("p",[v("code",[_._v("mktime()")]),_._v(" 要求您传递一个称为参数的参数 "),v("code",[_._v("t")]),_._v(" ， 该参数 采用普通的9元组或 "),v("code",[_._v("struct_time")]),_._v(" 表示本地时间 的 对象的形式：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time_tuple = (2019, 3, 10, 8, 50, 6, 6, 69, 1)\ntime.mktime(time_tuple)\n1552225806.0")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time_struct = time.struct_time(time_tuple)\ntime.mktime(time_struct)\n1552225806.0`")])])])]),_._v(" "),v("p",[_._v("请记住， "),v("code",[_._v("t")]),_._v(" 必须是代表当地时间的元组，而不是UTC， 这一点很重要 ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import gmtime, mktime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("h1",{attrs:{id:"_1"}},[_._v("1")]),_._v(" "),v("p",[_._v("current_utc = time.gmtime()\ncurrent_utc\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=14, tm_min=51, tm_sec=19, tm_wday=4, tm_yday=60, tm_isdst=0)")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("h1",{attrs:{id:"_2"}},[_._v("2")]),_._v(" "),v("p",[_._v("current_utc_secs = mktime(current_utc)\ncurrent_utc_secs\n1551473479.0")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("h1",{attrs:{id:"_3"}},[_._v("3")]),_._v(" "),v("p",[_._v("time.gmtime(current_utc_secs)\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=20, tm_min=51, tm_sec=19, tm_wday=4, tm_yday=60, tm_isdst=0)`")])])])]),_._v(" "),v("p",[v("strong",[_._v("注意：")]),_._v(" 在此示例中，假定本地时间为 "),v("code",[_._v("March 1, 2019 08:51:19 CST")]),_._v(" 。")]),_._v(" "),v("p",[_._v("此示例说明了为什么使用 "),v("code",[_._v("mktime()")]),_._v(" 本地时间而不是UTC如此重要：")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[v("code",[_._v("gmtime()")])]),_._v(" 如果不带参数，则返回 "),v("code",[_._v("struct_time")]),_._v(" 使用UTC的值。 "),v("code",[_._v("current_utc")]),_._v(" 显示 "),v("code",[_._v("March 1, 2019 14:51:19 UTC")]),_._v(" 。 这是正确的，因为 "),v("code",[_._v("CST is UTC-06:00")]),_._v(" ，因此UTC应该比当地时间早6小时。")])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("mktime()")])]),_._v(" 尝试返回期望当地时间的秒数，但您 "),v("code",[_._v("current_utc")]),_._v(" 改为 通过 。 因此， "),v("code",[_._v("current_utc")]),_._v(" 假定您的意思 不是理解现在 是UTC时间 "),v("code",[_._v("March 1, 2019 14:51:19 CST")]),_._v(" 。")])]),_._v(" "),v("li",[v("p",[v("strong",[v("code",[_._v("gmtime()")])]),_._v(" 然后使用来将这些秒转换回UTC，从而导致不一致。 现在是时候了 "),v("code",[_._v("March 1, 2019 20:51:19 UTC")]),_._v(" 。 这种差异的原因是 "),v("code",[_._v("mktime()")]),_._v(" 预期的本地时间。 因此，转换回UTC增加了 "),v("em",[_._v("另一个")]),_._v(" 6小时至当地时间。")])])]),_._v(" "),v("p",[_._v("众所周知，使用时区非常困难，因此，重要的是要了解UTC与本地时间之间的差异以及处理每个时区的Python时间函数，以使自己成功。")]),_._v(" "),v("h2",{attrs:{id:"将python时间对象转换为字符串"}},[_._v("将Python时间对象转换为字符串")]),_._v(" "),v("p",[_._v("虽然使用元组很有趣，但有时最好使用字符串。")]),_._v(" "),v("p",[_._v("时间的字符串表示形式（也称为时间戳记）有助于使时间更具可读性，并且对于构建直观的用户界面特别有用。")]),_._v(" "),v("p",[_._v("有两个Python "),v("code",[_._v("time")]),_._v(" 函数可用于将 "),v("code",[_._v("time.struct_time")]),_._v(" 对象转换为字符串：")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("asctime()")])]),_._v(" "),v("li",[v("code",[_._v("strftime()")])])]),_._v(" "),v("p",[_._v("您将从学习有关开始 "),v("code",[_._v("asctime()")]),_._v(" 。")]),_._v(" "),v("h3",{attrs:{id:"asctime"}},[v("code",[_._v("asctime()")])]),_._v(" "),v("p",[_._v("您 "),v("code",[_._v("asctime()")]),_._v(" 用于将时间元组或 "),v("code",[_._v("struct_time")]),_._v(" 时间戳 转换为 ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.asctime(time.gmtime())\n'Fri Mar  1 18:42:08 2019'")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("time.asctime(time.localtime())\n'Fri Mar  1 12:42:15 2019'`")])])])]),_._v(" "),v("p",[_._v("无论 "),v("code",[_._v("gmtime()")]),_._v(" 和 "),v("code",[_._v("localtime()")]),_._v(" 回报 "),v("code",[_._v("struct_time")]),_._v(" 的情况下，分别为UTC和本地时间。")]),_._v(" "),v("p",[_._v("您可以使用 "),v("code",[_._v("asctime()")]),_._v(" 转换 "),v("code",[_._v("struct_time")]),_._v(" 为时间戳。 "),v("code",[_._v("asctime()")]),_._v(" 其工作原理与 "),v("code",[_._v("ctime()")]),_._v(" 您在本文前面了解的 相似 ，除了传递一个元组而不是传递浮点数。 两个函数之间的时间戳格式都相同。")]),_._v(" "),v("p",[_._v("与一样 "),v("code",[_._v("ctime()")]),_._v(" ，参数for "),v("code",[_._v("asctime()")]),_._v(" 是可选的。 如果您没有将时间对象传递给 "),v("code",[_._v("asctime()")]),_._v(" ，则它将使用当前的本地时间：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.asctime()\n'Fri Mar  1 12:56:07 2019'`")])])])]),_._v(" "),v("p",[_._v("与一样 "),v("code",[_._v("ctime()")]),_._v(" ，它也忽略语言环境信息。")]),_._v(" "),v("p",[_._v("最大的缺点之一 "),v("code",[_._v("asctime()")]),_._v(" 是其格式不灵活。 "),v("code",[_._v("strftime()")]),_._v(" 通过允许您格式化时间戳来解决此问题。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h3",{attrs:{id:"strftime"}},[v("code",[_._v("strftime()")])]),_._v(" "),v("p",[_._v("你可能会发现自己在一个位置，从字符串格式 "),v("code",[_._v("ctime()")]),_._v(" 并 "),v("code",[_._v("asctime()")]),_._v(" 没有为您的应用满意。 相反，您可能想以对用户更有意义的方式来格式化字符串。")]),_._v(" "),v("p",[_._v("这样的一个示例是，如果您想在考虑到区域设置信息的字符串中显示您的时间。")]),_._v(" "),v("p",[_._v("要格式化字符串（给定a "),v("code",[_._v("struct_time")]),_._v(" 或Python时间元组），请使用 "),v("code",[_._v("strftime()")]),_._v(" ，它表示“字符串 "),v("strong",[_._v("格式化")]),_._v(" 时间”。")]),_._v(" "),v("p",[v("code",[_._v("strftime()")]),_._v(" 有两个参数：")]),_._v(" "),v("ol",[v("li",[v("strong",[v("code",[_._v("format")])]),_._v(" 指定字符串中时间元素​​的顺序和形式。")]),_._v(" "),v("li",[v("strong",[v("code",[_._v("t")])]),_._v(" 是一个可选的时间元组。")])]),_._v(" "),v("p",[_._v("要格式化字符串，请使用 "),v("strong",[_._v("伪指令")]),_._v(" 。 指令是以开头的字符序列， "),v("code",[_._v("%")]),_._v(" 用于指定特定的时间元素，例如：")]),_._v(" "),v("ul",[v("li",[v("strong",[v("code",[_._v("%d")]),_._v("：")]),_._v(" 每月的一天")]),_._v(" "),v("li",[v("strong",[v("code",[_._v("%m")]),_._v("：")]),_._v(" 一年中的月份")]),_._v(" "),v("li",[v("strong",[v("code",[_._v("%Y")]),_._v("：")]),_._v(" 年")])]),_._v(" "),v("p",[_._v("例如，您可以使用 "),v("a",{attrs:{href:"https://en.wikipedia.org/wiki/ISO_8601",target:"_blank",rel:"noopener noreferrer"}},[_._v("ISO 8601"),v("OutboundLink")],1),_._v(" 标准 以本地时间输出日期， 如下所示：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> import time")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("time.strftime('%Y-%m-%d', time.localtime())\n'2019-03-01'`")])])])]),_._v(" "),v("p",[v("strong",[_._v("进一步阅读：")]),_._v(" 虽然使用Python时间表示日期是完全有效和可以接受的，但您还应该考虑使用Python的 "),v("code",[_._v("datetime")]),_._v(" 模块，该模块提供了快捷方式和更健壮的框架，可一起使用日期和时间。")]),_._v(" "),v("p",[_._v("例如，您可以使用以下命令简化以ISO 8601格式输出的日期 "),v("code",[_._v("datetime")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from datetime import date")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("date(year=2019, month=3, day=1).isoformat()\n'2019-03-01'`")])])])]),_._v(" "),v("p",[_._v("要了解有关使用Python "),v("code",[_._v("datetime")]),_._v(" 模块的 更多信息 ，请查看 "),v("a",{attrs:{href:"https://realpython.com/python-datetime/",target:"_blank",rel:"noopener noreferrer"}},[_._v("使用Python datetime处理日期和时间"),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("如您之前所见，使用 "),v("code",[_._v("strftime()")]),_._v(" over的 一个很大好处 "),v("code",[_._v("asctime()")]),_._v(" 是它能够渲染利用特定于语言环境的信息的时间戳。")]),_._v(" "),v("p",[_._v("例如，如果要以对语言环境敏感的方式表示日期和时间，则不能使用 "),v("code",[_._v("asctime()")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import asctime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("asctime()\n'Sat Mar  2 15:21:14 2019'")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("import locale\nlocale.setlocale(locale.LC_TIME, 'zh_HK')  # Chinese - Hong Kong\n'zh_HK'")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("asctime()\n'Sat Mar  2 15:58:49 2019'`")])])])]),_._v(" "),v("p",[_._v("请注意，即使以编程方式更改了区域设置后， "),v("code",[_._v("asctime()")]),_._v(" 仍将以与以前相同的格式返回日期和时间。")]),_._v(" "),v("p",[v("strong",[_._v("技术详细信息：")]),_._v(" "),v("code",[_._v("LC_TIME")]),_._v(" 是日期和时间格式的语言环境类别。 该 "),v("code",[_._v("locale")]),_._v(" 参数 "),v("code",[_._v("'zh_HK'")]),_._v(" 可以是不同的，取决于你的系统。")]),_._v(" "),v("p",[v("code",[_._v("strftime()")]),_._v(" 但是， 当您使用 时，您会看到它说明了语言环境：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import strftime, localtime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("strftime('%c', localtime())\n'Sat Mar  2 15:23:20 2019'")])])])]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("import locale\nlocale.setlocale(locale.LC_TIME, 'zh_HK')  # Chinese - Hong Kong\n'zh_HK'")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("strftime('%c', localtime())\n'六  3/ 2 15:58:12 2019' 2019'`")])])])]),_._v(" "),v("p",[_._v("在这里，因为您使用，所以您已成功利用了语言环境信息 "),v("code",[_._v("strftime()")]),_._v(" 。")]),_._v(" "),v("p",[v("strong",[_._v("注意：")]),_._v(" "),v("code",[_._v("%c")]),_._v(" 是适用于区域设置的日期和时间的指令。")]),_._v(" "),v("p",[_._v("如果时间元组未传递给参数 "),v("code",[_._v("t")]),_._v(" ，则 默认情况下 "),v("code",[_._v("strftime()")]),_._v(" 将使用的结果 "),v("code",[_._v("localtime()")]),_._v(" 。 因此，您可以通过删除可选的第二个参数来简化上面的示例：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import strftime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("strftime('The current local datetime is: %c')\n'The current local datetime is: Fri Mar  1 23:18:32 2019'`")])])])]),_._v(" "),v("p",[_._v("在这里，您使用默认时间，而不是使用自己的时间作为参数。 另外，请注意， "),v("code",[_._v("format")]),_._v(" 参数可以包含格式指令以外的其他文本。")]),_._v(" "),v("p",[v("strong",[_._v("延伸阅读：")]),_._v(" 看看这个彻底 "),v("a",{attrs:{href:"https://docs.python.org/3/library/time.html#time.strftime",target:"_blank",rel:"noopener noreferrer"}},[_._v("的指令列表"),v("OutboundLink")],1),_._v(" 可用 "),v("code",[_._v("strftime()")]),_._v(" 。")]),_._v(" "),v("p",[_._v("Python "),v("code",[_._v("time")]),_._v(" 模块还包括将时间戳转换回 "),v("code",[_._v("struct_time")]),_._v(" 对象 的逆操作 。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"将python时间字符串转换为对象"}},[_._v("将Python时间字符串转换为对象")]),_._v(" "),v("p",[_._v("当您使用与日期和时间相关的字符串时，将时间戳转换为时间对象可能非常有价值。")]),_._v(" "),v("p",[_._v("要将时间字符串转换为 "),v("code",[_._v("struct_time")]),_._v(" ，可以使用 "),v("code",[_._v("strptime()")]),_._v(" ，它代表“字符串 "),v("strong",[_._v("解析")]),_._v(" 时间”：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import strptime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("strptime('2019-03-01', '%Y-%m-%d')\ntime.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=60, tm_isdst=-1)`")])])])]),_._v(" "),v("p",[_._v("的第一个参数 "),v("code",[_._v("strptime()")]),_._v(" 必须是您希望转换的时间戳。 第二个参数是 "),v("code",[_._v("format")]),_._v(" 时间戳记所在的时间。")]),_._v(" "),v("p",[_._v("该 "),v("code",[_._v("format")]),_._v(" 参数是可选的，默认为 "),v("code",[_._v("'%a %b %d %H:%M:%S %Y'")]),_._v(" 。 因此，如果您使用该格式的时间戳，则无需将其作为参数传递：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[v("code",[_._v(">>> strptime('Fri Mar 01 23:38:40 2019') time.struct_time(tm_year=2019, tm_mon=3, tm_mday=1, tm_hour=23, tm_min=38, tm_sec=40, tm_wday=4, tm_yday=60, tm_isdst=-1)")])]),_._v(" "),v("p",[_._v("由于 "),v("code",[_._v("struct_time")]),_._v(" 包含9个关键日期和时间组成部分，因此 "),v("code",[_._v("strptime()")]),_._v(" 必须为无法从中解析的那些组成部分的值提供合理的默认值 "),v("code",[_._v("string")]),_._v(" 。")]),_._v(" "),v("p",[_._v("在前面的示例中， "),v("code",[_._v("tm_isdst=-1")]),_._v(" 。 这意味着 "),v("code",[_._v("strptime()")]),_._v(" 无法通过时间戳确定它是否代表夏时制。")]),_._v(" "),v("p",[_._v("现在，您知道了如何使用该 "),v("code",[_._v("time")]),_._v(" 模块以多种方式 使用Python时间和日期 。 但是，除了 "),v("code",[_._v("time")]),_._v(" 简单地创建时间对象，获取Python时间字符串以及使用自纪元以来经过的秒数之外 ，还有其他用途 。")]),_._v(" "),v("h2",{attrs:{id:"暂停执行"}},[_._v("暂停执行")]),_._v(" "),v("p",[_._v("一个真正有用的Python时间函数是 "),v("code",[_._v("sleep()")]),_._v(" ，该 函数 将线程的执行挂起指定的时间。")]),_._v(" "),v("p",[_._v("例如，您可以将程序的执行暂停10秒钟，如下所示：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import sleep, strftime")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("strftime('%c')\n'Fri Mar  1 23:49:26 2019'")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("sleep(10)\nstrftime('%c')\n'Fri Mar  1 23:49:36 2019'`")])])])]),_._v(" "),v("p",[_._v("您的程序将打印第一个格式化的 "),v("code",[_._v("datetime")]),_._v(" 字符串，然后暂停10秒钟，最后打印第二个格式化的 "),v("code",[_._v("datetime")]),_._v(" 字符串。")]),_._v(" "),v("p",[_._v("您还可以将小数秒传递给 "),v("code",[_._v("sleep()")]),_._v(" ：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import sleep")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("sleep(0.5)`")])])])]),_._v(" "),v("p",[v("code",[_._v("sleep()")]),_._v(" 这对于测试或使程序出于任何原因等待很有用，但是除非有充分的理由，否则请务必不要停止生产代码。")]),_._v(" "),v("p",[_._v("在Python 3.5之前，发送到您的进程的信号可能会中断 "),v("code",[_._v("sleep()")]),_._v(" 。 但是，在3.5及更高版本中， "),v("code",[_._v("sleep()")]),_._v(" 即使进程接收到信号 ， 也将始终至少在指定的时间量内暂停执行。")]),_._v(" "),v("p",[v("code",[_._v("sleep()")]),_._v(" 只是一个Python时间函数，可以帮助您测试程序并使它们更强大。")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://realpython.com/account/join/",target:"_blank",rel:"noopener noreferrer"}},[_._v("移除广告"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"衡量绩效"}},[_._v("衡量绩效")]),_._v(" "),v("p",[_._v("您可以 "),v("code",[_._v("time")]),_._v(" 用来衡量程序的性能。")]),_._v(" "),v("p",[_._v("这样做的方法就是使用 "),v("code",[_._v("perf_counter()")]),_._v(" 它，顾名思义，它为高分辨率的性能计数器提供了测量短时间距离的方法。")]),_._v(" "),v("p",[_._v("要使用 "),v("code",[_._v("perf_counter()")]),_._v(" ，您可以在代码开始执行之前以及代码执行完成之后放置一个计数器：")]),_._v(" "),v("p",[_._v(">>>")]),_._v(" "),v("p",[_._v("`>>> from time import perf_counter")]),_._v(" "),v("blockquote",[v("blockquote",[v("blockquote",[v("p",[_._v("def longrunning_function():\n...     for i in range(1, 11):\n...         time.sleep(i / i ** 2)\n...")])])]),_._v(" "),v("blockquote",[v("blockquote",[v("p",[_._v("start = perf_counter()\nlongrunning_function()\nend = perf_counter()\nexecution_time = (end - start)\nexecution_time\n8.201258441999926`")])])])]),_._v(" "),v("p",[_._v("首先， "),v("code",[_._v("start")]),_._v(" 捕获调用该函数之前的时刻。 "),v("code",[_._v("end")]),_._v(" 捕获函数返回后的时刻。 该函数的总执行时间为 "),v("code",[_._v("(end - start)")]),_._v(" 几秒钟。")]),_._v(" "),v("p",[v("strong",[_._v("技术细节：")]),_._v(" 引入了Python 3.7 "),v("code",[_._v("perf_counter_ns()")]),_._v(" ，其功能与相同 "),v("code",[_._v("perf_counter()")]),_._v(" ，但使用纳秒而不是秒。")]),_._v(" "),v("p",[v("code",[_._v("perf_counter()")]),_._v(" （或 "),v("code",[_._v("perf_counter_ns()")]),_._v(" ）是使用一次执行来评估代码性能的最精确方法。 但是，如果您想准确评估代码段的性能，建议您使用 "),v("a",{attrs:{href:"https://docs.python.org/3/library/timeit.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("Python "),v("code",[_._v("timeit")]),v("OutboundLink")],1),_._v(" 模块。")]),_._v(" "),v("p",[v("code",[_._v("timeit")]),_._v(" 专长于多次运行代码以获得更准确的性能分析，并帮助您避免过度简化时间度量以及其他常见陷阱。")]),_._v(" "),v("h2",{attrs:{id:"结论"}},[_._v("结论")]),_._v(" "),v("p",[_._v("恭喜你！ 现在，您已经为使用Python中的日期和时间奠定了良好的基础。")]),_._v(" "),v("p",[_._v("现在，您可以：")]),_._v(" "),v("ul",[v("li",[_._v("使用浮点数来表示时间，该浮点数表示自纪元以来经过的秒数")]),_._v(" "),v("li",[_._v("使用元组和 "),v("code",[_._v("struct_time")]),_._v(" 对象 管理时间")]),_._v(" "),v("li",[_._v("在秒，元组和时间戳字符串之间转换")]),_._v(" "),v("li",[_._v("暂停执行Python线程")]),_._v(" "),v("li",[_._v("使用以下方式衡量效果 "),v("code",[_._v("perf_counter()")])])]),_._v(" "),v("p",[_._v("最重要的是，您已经了解了一些有关日期和时间的基本概念，例如：")]),_._v(" "),v("ul",[v("li",[_._v("时代")]),_._v(" "),v("li",[_._v("世界标准时间")]),_._v(" "),v("li",[_._v("时区")]),_._v(" "),v("li",[_._v("夏令时")])]),_._v(" "),v("p",[_._v("现在，是时候将您对Python时间的新发现应用到您的实际应用程序中了！")]),_._v(" "),v("h2",{attrs:{id:"进一步阅读"}},[_._v("进一步阅读")]),_._v(" "),v("p",[_._v("如果要继续学习有关在Python中使用日期和时间的更多信息，请查看以下模块：")]),_._v(" "),v("ul",[v("li",[v("strong",[v("a",{attrs:{href:"https://docs.python.org/3/library/datetime.html",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("datetime")]),v("OutboundLink")],1),_._v("：")]),_._v(" Python标准库中更强大的日期和时间模块")]),_._v(" "),v("li",[v("strong",[v("a",{attrs:{href:"https://docs.python.org/3/library/timeit.html",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("timeit")]),v("OutboundLink")],1),_._v("：")]),_._v(" 用于测量代码段性能的模块")]),_._v(" "),v("li",[v("strong",[v("a",{attrs:{href:"http://docs.astropy.org/en/stable/time/",target:"_blank",rel:"noopener noreferrer"}},[v("code",[_._v("astropy")]),v("OutboundLink")],1),_._v("：")]),_._v(" 天文学中使用的高精度日期时间")])]),_._v(" "),v("p",[_._v("立即观看 本教程有一个由Real Python团队创建的相关视频课程。 与书面教程一起观看，以加深您的理解： "),v("a",{attrs:{href:"https://realpython.com/courses/mastering-time-module/",target:"_blank",rel:"noopener noreferrer"}},[v("strong",[_._v("掌握Python的内置时间模块")]),v("OutboundLink")],1)]),_._v(" "),v("p",[_._v("🐍Python技巧💌")]),_._v(" "),v("p",[_._v("每两天 将简短而可爱的 "),v("strong",[_._v("Python技巧")]),_._v(" 发送到您的收件箱。 从来没有垃圾邮件。 随时退订。 由Real Python团队策划。")])])}),[],!1,null,null,null);t.default=o.exports}}]);