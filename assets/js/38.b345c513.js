(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{506:function(s,n,a){"use strict";a.r(n);var e=a(25),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"写在前面"}},[s._v("写在前面")]),s._v(" "),a("p",[s._v("关于Python虚拟环境管理，曾经做为一名新人一直不以为意，心想反正都是我要用的库，全安装在一起，要用直接导入，多好。可是，后来，懂得越来越多的我，不仅流下了悔恨了泪水呀，这一次，关于Python虚拟环境管理的方法一网打尽，喜欢哪种方式，大家自己选吧。再说一次虚拟环境很重要。")]),s._v(" "),a("h2",{attrs:{id:"一、使用virtualenv"}},[s._v("一、使用virtualenv")]),s._v(" "),a("h3",{attrs:{id:"_1-使用pip"}},[s._v("1. 使用pip")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pip install virtualenv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-创建运行环境"}},[s._v("2. 创建运行环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("virtualenv [虚拟环境名称]\nvirtualenv venv\n\n#如果不想使用系统的包,加上–no-site-packeages参数\nvirtualenv  --no-site-packages 创建路径名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3-激活环境"}},[s._v("3. 激活环境")]),s._v(" "),a("p",[s._v("linux:")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cd venv\n$ source ./bin/activate\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("Windows 10:")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("> cd venv\n> .\\Scripts\\activate.bat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_4-退出环境"}},[s._v("4. 退出环境")]),s._v(" "),a("p",[s._v("linux:")]),s._v(" "),a("p",[a("code",[s._v("$ deactivate")])]),s._v(" "),a("p",[s._v("Windows 10:")]),s._v(" "),a("p",[a("code",[s._v("> .\\Scripts\\deactivate.bat")])]),s._v(" "),a("h3",{attrs:{id:"_5-删除环境"}},[s._v("5. 删除环境")]),s._v(" "),a("p",[s._v("没有使用virtualenvwrapper前，可以直接删除venv文件夹来删除环境")]),s._v(" "),a("h3",{attrs:{id:"_6-使用环境"}},[s._v("6. 使用环境")]),s._v(" "),a("p",[s._v("进入环境后，一切操作和正常使用python一样 安装包使用"),a("code",[s._v("pip install 包")])]),s._v(" "),a("h2",{attrs:{id:"二、使用virtualenvwrapper"}},[s._v("二、使用Virtualenvwrapper")]),s._v(" "),a("p",[s._v("Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做： - 将所有虚拟环境整合在一个目录下 - 管理（新增，删除，复制）虚拟环境 - 快速切换虚拟环境")]),s._v(" "),a("h3",{attrs:{id:"_1-安装"}},[s._v("1. 安装")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# on Windows\npip install virtualenvwrapper-win\n# on macOS / Linux\npip install --user virtualenvwrapper\n# then make Bash load virtualenvwrapper automatically\necho "source virtualenvwrapper.sh" >> ~/.bashrc\nsource ~/.bashrc\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_2-创建虚拟环境"}},[s._v("2. 创建虚拟环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# on macOS/Linux:\nmkvirtualenv --python=python3.6 venv\n# on Windows\nmkvirtualenv --python=python3 venv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_3-激活环境-2"}},[s._v("3. 激活环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("workon #列出虚拟环境列表\nworkon [venv] #切换环境\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_4-退出环境-2"}},[s._v("4. 退出环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("deactivate\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_5-删除环境-2"}},[s._v("5. 删除环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("rmvirtualenv venv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_6-其他有用指令"}},[s._v("6. 其他有用指令")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pip freeze #查看当前安装库版本\n#创建 requirements.txt 文件，其中包含了当前环境中所有包及 各自的版本的简单列表\n#保持部署相同，一键安装所有包\npip install -r requirements.txt\npip freeze > requirements.txt\nlsvirtualenv    #列举所有的环境\ncdvirtualenv    #导航到当前激活的虚拟环境的目录中，相当于pushd 目录\ncdsitepackages   # 和上面的类似，直接进入到 site-packages 目录\nlssitepackages     #显示 site-packages 目录中的内容\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"三、-使用conda管理"}},[s._v("三、 使用conda管理")]),s._v(" "),a("blockquote",[a("p",[s._v("conda可以直接创建不同python版本的虚拟环境。前面讲的virtualenv只是指定创建不同python版本的虚拟环境，前提是你的电脑上已经安装了不同版本的python,与conda相比没有conda灵活。")])]),s._v(" "),a("h3",{attrs:{id:"_1-安装-2"}},[s._v("1. 安装")]),s._v(" "),a("p",[s._v("下载anaconda安装的python直接可以使用conda工具")]),s._v(" "),a("h3",{attrs:{id:"_2-创建虚拟环境-2"}},[s._v("2. 创建虚拟环境")]),s._v(" "),a("p",[s._v("创建不同的python版本，直接写出版本号就好了，还可以同时安装想要的库。")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# Python 2.7\n$ conda create -n venv python=2.7\n\n# Python 3.4\n$ conda create -n venv python=3.4\n\n# Python 3.5\n$ conda create -n venv python=3.5\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_3-激活虚拟环境"}},[s._v("3. 激活虚拟环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#on windows\nactivate venv\n#on linux\nsource activate venv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_4-退出虚拟环境"}},[s._v("4. 退出虚拟环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#on windows\ndeactivate\n#on linux\nsource deactivate\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_5-删除虚拟环境"}},[s._v("5. 删除虚拟环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 删除一个已有环境\nconda remove --name venv --all\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_6-其他有用指令-2"}},[s._v("6. 其他有用指令")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 列出系统存在虚拟环境\nconda info -e\nconda env list\n\n# 查看当前环境下已安装的包\nconda list\n\n# 查看某个指定环境的已安装包\nconda list -n venv\n\n# 查找package信息\nconda search numpy\n\n# 安装package\nconda install -n venv numpy\n# 如果不用-n指定环境名称，则被安装在当前激活环境\n# 也可以通过-c指定通过某个channel安装\n\n# 更新package\nconda update -n venv numpy\n\n# 删除package\nconda remove -n venv numpy\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h2",{attrs:{id:"四-使用pipenv管理"}},[s._v("四. 使用pipenv管理")]),s._v(" "),a("blockquote",[a("p",[s._v("pipenv是Python官方推荐的包管理工具。 它综合了 virtualenv , pip 和 pyenv 三者的功能。能够自动为项目创建和管理虚拟环境。如果你使用过requests库，就一定会爱上这个库，因为是同一个大神出品。 pipenv使用 Pipfile 和 Pipfile.lock 来管理依赖包，并且在使用pipenv添加或删除包时，自动维护 Pipfile 文件，同时生成 Pipfile.lock 来锁定安装包的版本和依赖信息，避免构建错误。相比pip需要手动维护requirements.txt 中的安装包和版本，具有很大的进步。")])]),s._v(" "),a("h3",{attrs:{id:"_1-安装-3"}},[s._v("1. 安装")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pip install pipenv\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-创建虚拟环境-3"}},[s._v("2. 创建虚拟环境")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cd myproject\n$ pipenv install # 创建环境\n$ pipenv install requests # 或者直接安装库\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果不存在pipfile,会生成一个pipfile，并且如果有的库添加会自动编辑该文件，不会我们手动更新requirements.txt文件了。")]),s._v(" "),a("h3",{attrs:{id:"_3-激活pipenv-shell"}},[s._v("3. 激活Pipenv Shell")]),s._v(" "),a("div",{staticClass:"language-text line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ pipenv shell\n$ python --version\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);