(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{385:function(s,a,e){"use strict";e.r(a);var n=e(25),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("pyenv 是一个 python 版本管理工具，可以方便的在工作环境中安装、管理和切换不同版本的 python，结合 pyenv-virtualenv 插件，能够方便的创建和管理 python 虚拟环境，在虚拟环境中的各种操作，并不会影响到系统的正常运行，有效防止乱装 python 版本导致系统崩溃等问题的发生。\n本文结合自己相关实践，总结了 pyenv 的安装，以及使用 pyenv 安装、管理不同版本的 python 等过程的相关经验，希望对读者有所帮助，本文也借鉴了一些相关的博客、文档等资料，在文中都有列出。\n本文相关内容是在已经安装了 Mac os 包管理器 Homebrew 的基础上完成的，系统版本 10.14.5，Linux 系统也可以借鉴，很多设置是相似的，pyenv 命令的使用也是一样的。在进行相关操作前，可以使用 "),e("code",[s._v("brew update")]),s._v(" 命令将 Homebrew 升级到最新版本，然后使用 "),e("code",[s._v("brew upgrade")]),s._v(" 命令将之前安装过的软件包更新。")]),s._v(" "),e("h2",{attrs:{id:"pyenv"}},[s._v("pyenv")]),s._v(" "),e("h3",{attrs:{id:"pyenv-的安装"}},[s._v("pyenv 的安装")]),s._v(" "),e("p",[s._v("安装 pyenv 有两种方式：使用 Homebrew 安装和从 Github 克隆，两种方式都比较简便，只需要一点设置，便可以投入使用。")]),s._v(" "),e("h4",{attrs:{id:"使用-homebrew-安装-pyenv"}},[s._v("使用 Homebrew 安装 pyenv")]),s._v(" "),e("p",[s._v("第一步，运行下面的命令安装 pyenv：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("brew install pyenv\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会自动下载安装最新版本的 pyenv，并自动下载依赖包，安装完成后，可以运行 "),e("code",[s._v("which pyenv")]),s._v(" 命令，查看 "),e("code",[s._v("pyenv")]),s._v(" 命令是否存在。")]),s._v(" "),e("p",[s._v("第二步，初始化 pyenv（"),e("code",[s._v("pyenv init")]),s._v("）\n"),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%23understanding-shims",target:"_blank",rel:"noopener noreferrer"}},[s._v("pyenv 的工作原理"),e("OutboundLink")],1),s._v(" 是在 PATH 环境变量的最前面添加一个垫片目录 "),e("code",[s._v("(pyenv root)/shims")]),s._v("，这样系统在查找 python 可执行文件时，会首先查找这个目录，进而被导引到 pyenv 管理的 python 环境，跳过后面的系统目录。\n初始化 pyenv 的作用就是将垫片目录添加到 PATH 的最前面，为了每次启动 "),e("code",[s._v("shell")]),s._v(" 都自动初始化，可以在配置文件 "),e("code",[s._v("~/.bash_profile")]),s._v(" 中写入如下内容（这里是针对 "),e("code",[s._v("bash shell")]),s._v(" 而言，其它类型的 "),e("code",[s._v("shell")]),s._v("，配置文件的名称有所差别）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" -v pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("/dev/null "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这两句的效果是一样的，意思是判断 "),e("code",[s._v("pyenv")]),s._v(" 命令是否存在（但不会给出此判断的结果信息），如果存在的话，执行 "),e("code",[s._v('eval "$(pyenv init -)"')]),s._v(" 命令。\n如果确定系统中 "),e("code",[s._v("pyenv")]),s._v(" 命令存在，那么可以直接添加以下内容到 "),e("code",[s._v("~/.bash_profile")]),s._v("，以提高终端的打开速度：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("最后，通过 "),e("code",[s._v("source ~/.bash_profile")]),s._v(" 命令使设置立即生效。")]),s._v(" "),e("h4",{attrs:{id:"从-github-克隆-pyenv-仓库"}},[s._v("从 Github 克隆 pyenv 仓库")]),s._v(" "),e("p",[s._v("第一步，执行以下命令：")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[s._v("git "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("clone")]),s._v(" https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//github.com/pyenv/pyenv.git ~/.pyenv")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会从 Github 克隆最新版本的 pyenv 仓库到本地目录 "),e("code",[s._v("～/.pyenv")]),s._v("，使用这个命令的前提是安装好了 Git（Git 是一个非常好用的版本管理工具，直接使用命令 "),e("code",[s._v("brew install git")]),s._v(" 就可以安装）。\n注意这里是将 pyenv 克隆到了目录 "),e("code",[s._v("~/.pyenv")]),s._v("，也可以自己选择要克隆到的目录。")]),s._v(" "),e("p",[s._v("第二步，克隆成功之后，还需要修改 PATH 环境变量，以使 pyenv 能够使用。在 "),e("code",[s._v("~/.bash_profile")]),s._v(" 文件中添加以下内容（这里是针对 "),e("code",[s._v("bash shell")]),s._v(" 而言，其它类型的 "),e("code",[s._v("shell")]),s._v("，配置文件的名称有所差别）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PYENV_ROOT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v('/.pyenv"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PYENV_ROOT")]),s._v("/bin:"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v('"')]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这里变量 "),e("code",[s._v("PYENV_ROOT")]),s._v(" 的值要设置为第一步 pyenv 克隆到的目录，也可以直接在终端执行以下命令，可以获得相同的效果：")]),s._v(" "),e("div",{staticClass:"language-dart line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-dart"}},[e("code",[s._v("echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export PYENV_ROOT=\"$HOME/.pyenv\"'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bash_profile\necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export PATH=\"$PYENV_ROOT/bin:$PATH\"'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("bash_profile\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("设置完成后，可以运行 "),e("code",[s._v("which pyenv")]),s._v(" 命令，查看 "),e("code",[s._v("pyenv")]),s._v(" 命令是否存在。")]),s._v(" "),e("p",[s._v("注意使用 Homebrew 安装 pyenv 是不需要第二步的，Homebrew 在安装 pyenv 时已经自动设好了（安装时在 "),e("code",[s._v("usr/local/bin")]),s._v(" 目录下建立了 pyenv 的替身，而 "),e("code",[s._v("usr/local/bin")]),s._v(" 目录已经在 PATH 环境变量中了）。")]),s._v(" "),e("p",[s._v("第三步，初始化 pyenv（"),e("code",[s._v("pyenv init")]),s._v("）\n在 "),e("code",[s._v("~/.bash_profile")]),s._v(" 中写入如下内容（这里是针对 "),e("code",[s._v("bash shell")]),s._v(" 而言，其它类型的 "),e("code",[s._v("shell")]),s._v("，配置文件的名称有所差别）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" -v pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("/dev/null "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者直接：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("最后，通过 "),e("code",[s._v("source ~/.bash_profile")]),s._v(" 命令使设置立即生效。")]),s._v(" "),e("h3",{attrs:{id:"pyenv-的使用"}},[s._v("pyenv 的使用")]),s._v(" "),e("p",[s._v("目前，可用的 pyenv 命令总共只有 11 个，文档 "),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%2Fblob%2Fmaster%2FCOMMANDS.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("Command Reference"),e("OutboundLink")],1),s._v(" 里有具体说明，本文基于个人经验针对常用的一些命令在下面进行说明。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-commands"}},[e("code",[s._v("pyenv commands")])]),s._v(" "),e("p",[s._v("列出所有可用的pyenv命令，用法是：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pyenv commands\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"pyenv-install"}},[e("code",[s._v("pyenv install")])]),s._v(" "),e("p",[s._v("安装特定版本的 python，用法是：")]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("pyenv install [options] <version>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("常用的选项 "),e("code",[s._v("options")]),s._v(" 有：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("-f/--force  :强制安装，即使该版本已经安装过了\n-s/--skip-existing  :跳过已经安装过的版本\n-v/--verbose:输出安装过程中的详细状态信息\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("另外，"),e("code",[s._v("pyenv install --list")]),s._v(" 命令可以列出所有可以安装的 python 版本，返回的结果中，以单纯数字表示的版本是官方的版本。")]),s._v(" "),e("p",[s._v("就我个人经验而言，用 pyenv 安装 python 时比较容易出错，有许多地方需要注意：")]),s._v(" "),e("p",[s._v("首先，安装 python 前需要先安装所需的依赖包。\n对 Mac os 系统而言，如果没有安装 Xcode 命令行工具，需要先安装：")]),s._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[s._v("xcode"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("install\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("另外，还需要安装以下 5 个依赖包：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("brew install openssl readline sqlite3 xz zlib\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("可以先通过 "),e("code",[s._v("brew list")]),s._v(" 命令查看是否已经安装过某些依赖包，只需要安装缺少的依赖包就可以了。\n对于 10.14 以上的系统而言，还需要安装额外的软件开发工具包（sdk），具体请查看文档"),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%2Fwiki",target:"_blank",rel:"noopener noreferrer"}},[s._v("Requirements"),e("OutboundLink")],1),s._v("，有的已经安装过了，就不需要重复安装了（其它操作系统也可以查看 "),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%2Fwiki",target:"_blank",rel:"noopener noreferrer"}},[s._v("Requirements"),e("OutboundLink")],1),s._v(" 获取帮助）。")]),s._v(" "),e("p",[s._v("第二，即使所需的依赖包已经全都安装好了，在安装 python 时也可能会出错，原因是安装时链接器找不到所需要的依赖包，就会认为相关的依赖包没有安装，给出错误提示，比如提示 "),e("code",[s._v("zlib")]),s._v(" 没有安装，那么可以在安装 python 时，在安装命令前添加几个参数，如下：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-I'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix zlib"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('/include"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LDFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-L'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix zlib"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('/lib"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\npyenv "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -v "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("上面的安装命令中，\n"),e("code",[s._v("CPPFLAGS")]),s._v(" 是 c 和 c++ 编译器的选项，这里指定了 "),e("code",[s._v("zlib")]),s._v(" 头文件的位置，\n"),e("code",[s._v("LDFLAGS")]),s._v(" 是 gcc 等编译器会用到的一些优化参数，这里是指定了 "),e("code",[s._v("zlib")]),s._v(" 库文件的位置，\n"),e("code",[s._v("$(brew --prefix zlib)")]),s._v(" 这一部分的意思是在终端里执行括号里的命令，显示 "),e("code",[s._v("zlib")]),s._v(" 的安装路径，可以事先执行括号里的命令，用返回的结果替换 "),e("code",[s._v("$(brew --prefix zlib)")]),s._v("，效果是一样的，\n每一行行尾的反斜杠可以使换行时先不执行命令，而是把这三行内容当作一条命令执行，\n如果有多个依赖包都找不到，可以在引号里继续添加其它依赖包的信息，如：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-I'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix zlib"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("/include -I"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix sqlite3"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('/include"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LDFLAGS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-L'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix zlib"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("/lib -L"),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("brew --prefix sqlite3"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('/lib"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\npyenv "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -v "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("code",[s._v("-v")]),s._v(" 选项显示安装时的细节，\n在安装命令前加上这两个参数后，链接器就可以找到相应的依赖包，可以成功安装。\n具体可以参考文档 "),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv%2Fwiki%2FCommon-build-problems",target:"_blank",rel:"noopener noreferrer"}},[s._v("Common build problems"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("p",[s._v("第三，使用 pyenv 安装 python 时，默认从 "),e("code",[s._v("python.org")]),s._v(" 下载指定版本，往往特别慢，可以先从"),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.python.org%2Fdownloads%2Fsource%2F",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),e("OutboundLink")],1),s._v("下载所需要的版本的源代码到 "),e("code",[s._v("~/.pyenv/cache")]),s._v(" 目录下，再执行安装命令，注意这里下载的是类似于 "),e("code",[s._v("Python-3.7.3.tar.xz")]),s._v(" 这样的压缩文件。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-uninstall"}},[e("code",[s._v("pyenv uninstall")])]),s._v(" "),e("p",[s._v("卸载某个版本的 python，用法是：")]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("pyenv uninstall [-f|--force] <version>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("code",[s._v("-f|--force")]),s._v(" 选项的作用是强制删除某版本的 python，不需要确认，如果该版本不存在，也不会给出错误信息。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-version"}},[e("code",[s._v("pyenv version")])]),s._v(" "),e("p",[s._v("显示当前使用的 python 版本，用法是：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pyenv version\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("在版本后面会显示当前版本是如何设置的。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-versions"}},[e("code",[s._v("pyenv versions")])]),s._v(" "),e("p",[s._v("列出所有被 pyenv 管理的 python 版本，用法是：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pyenv versions\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("在当前使用的版本前会用 "),e("code",[s._v("*")]),s._v(" 标出。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-local"}},[e("code",[s._v("pyenv local")])]),s._v(" "),e("p",[s._v("设置当前目录下所使用的 python 版本，用法是：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("pyenv "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会在当前目录下的 "),e("code",[s._v(".python-version")]),s._v(" 文件里写入版本设置信息，单纯使用 "),e("code",[s._v("pyenv local")]),s._v(" 命令会显示当前目录所使用的 python 版本。\n如果要取消设置当前目录的 python 版本，使用如下命令：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("pyenv "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" --unset\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"pyenv-global"}},[e("code",[s._v("pyenv global")])]),s._v(" "),e("p",[s._v("设置全局使用的 python 版本，用法是：")]),s._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[s._v("pyenv "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会在 "),e("code",[s._v("~/.pyenv/version")]),s._v(" 文件里写入全局的版本设置信息，单纯使用 "),e("code",[s._v("pyenv global")]),s._v(" 命令显示当前全局使用的 python 版本（一般不建议更改全局的 python 版本，可能会引起一些系统的问题）。\n如果要取消设置当前 shell 的 python 版本，使用如下命令：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("pyenv shell --unset\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h4",{attrs:{id:"pyenv-shell"}},[e("code",[s._v("pyenv shell")])]),s._v(" "),e("p",[s._v("设置当前 shell 所使用的 python 版本，用法是：")]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[s._v("pyenv shell "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会设置环境变量 PYENV_VERSION 的值为指定版本，也可以直接设定环境变量 PYENV_VERSION 的值，效果一样：")]),s._v(" "),e("div",{staticClass:"language-jsx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PYENV_VERSION")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[s._v("\n\n")])])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("单纯使用 "),e("code",[s._v("pyenv shell")]),s._v(" 命令显示当前 shell 使用的 python 版本。")]),s._v(" "),e("h4",{attrs:{id:"pyenv-rehash"}},[e("code",[s._v("pyenv rehash")])]),s._v(" "),e("p",[s._v("更新垫片目录 "),e("code",[s._v("shims")]),s._v(" 的内容，以使 pyenv 知道它所管理的 python 版本的最新信息，用法是：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("pyenv rehash\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("一般在安装新一个版本的 python 之后运行此命令。")]),s._v(" "),e("h3",{attrs:{id:"pyenv-的其它操作"}},[s._v("pyenv 的其它操作")]),s._v(" "),e("h4",{attrs:{id:"更新-pyenv"}},[s._v("更新 pyenv")]),s._v(" "),e("p",[s._v("如果是使用 Homebrew 安装的 pyenv，那么只需要执行 "),e("code",[s._v("brew upgrade pyenv")]),s._v(" 命令即可将 pyenv 更新至最新版本；\n如果是从 Github 克隆的 pyenv 仓库，那么需要先进入到本地的 pyenv 目录 （"),e("code",[s._v("cd $(pyenv root)")]),s._v("），然后执行 "),e("code",[s._v("git pull")]),s._v(" 命令，可以将 pyenv 更新至最新版本。")]),s._v(" "),e("h4",{attrs:{id:"使-pyenv-失效"}},[s._v("使 pyenv 失效")]),s._v(" "),e("p",[s._v("如果想暂时使 pyenv 管理 python 版本的功能失效，只需要将之前写入 "),e("code",[s._v("~/bash_profile")]),s._v(" 的下列内容注释掉即可：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" -v pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v("/dev/null "),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" pyenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("注释掉后，"),e("code",[s._v("pyenv")]),s._v(" 命令仍然可以使用，但 python 程序就不会受 pyenv 版本管理的影响了（此时恢复成系统目录中的 python 版本）。")]),s._v(" "),e("h4",{attrs:{id:"卸载-pyenv"}},[s._v("卸载 pyenv")]),s._v(" "),e("p",[s._v("第一步，把 "),e("code",[s._v("~/.bash_profile")]),s._v(" 里关于 pyenv 的内容删除掉。")]),s._v(" "),e("p",[s._v("第二步，如果是使用 Homebrew 安装的 pyenv，那么只需要执行 "),e("code",[s._v("brew uninstall pyenv")]),s._v(" 命令即可将 pyenv 从计算机卸载；如果是从 Github 克隆的 pyenv 仓库，那么需要将本地的 pyenv 目录删除（"),e("code",[s._v("rm -rf ~/.pyenv")]),s._v("）。")]),s._v(" "),e("h2",{attrs:{id:"pyenv-virtualenv"}},[s._v("pyenv-virtualenv")]),s._v(" "),e("p",[s._v("pyenv-virtualenv 是一个管理 python 虚拟环境的 pyenv 插件，具体可以查看 "),e("a",{attrs:{href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fpyenv%2Fpyenv-virtualenv",target:"_blank",rel:"noopener noreferrer"}},[s._v("pyenv-virtualenv 文档"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"关于-python-虚拟环境"}},[s._v("关于 python 虚拟环境")]),s._v(" "),e("p",[s._v("Python 虚拟环境是一个虚拟化，从电脑独立开辟出来的环境，它以某个版本的 python 为基础，在虚拟环境中可以安装项目所需的第三方库而不会对外界产生影响，虚拟环境的数量并没有限制，这样每个项目就可以有互相独立的运行环境，非常便于项目开发。\npython 虚拟环境相当于一个独立的 python 版本，有自己独立的目录，也可以独立的安装第三方库，而不会相互干扰。")]),s._v(" "),e("h3",{attrs:{id:"pyenv-virtualenv-的安装"}},[s._v("pyenv-virtualenv 的安装")]),s._v(" "),e("p",[s._v("同样，安装 pyenv-virtualenv 也有两种方式：使用 Homebrew 安装和从 Github 克隆。")]),s._v(" "),e("h4",{attrs:{id:"使用-homebrew-安装-pyenv-virtual"}},[s._v("使用 Homebrew 安装 pyenv-virtual")]),s._v(" "),e("p",[s._v("第一步，运行下面的命令安装 pyenv-virtualenv：")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("brew install pyenv-virtualenv\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会自动下载安装最新版本的 pyenv-virtualenv，并自动下载依赖包，安装完成后，可以运行 "),e("code",[s._v("which pyenv-virtualenv")]),s._v(" 命令，查看是否安装成功。")]),s._v(" "),e("p",[s._v("第二步，初始化\n在配置文件 "),e("code",[s._v("~/.bash_profile")]),s._v(" 中写入如下内容（这里是针对 "),e("code",[s._v("bash shell")]),s._v(" 而言，其它类型的 "),e("code",[s._v("shell")]),s._v("，配置文件的名称有所差别）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" pyenv-virtualenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv virtualenv-init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者直接：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv virtualenv-init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("最后，通过 "),e("code",[s._v("source ~/.bash_profile")]),s._v(" 命令使设置立即生效。")]),s._v(" "),e("h4",{attrs:{id:"从-github-克隆-pyenv-virtualenv-仓库"}},[s._v("从 Github 克隆 pyenv-virtualenv 仓库")]),s._v(" "),e("p",[s._v("第一步，在终端执行以下命令：")]),s._v(" "),e("div",{staticClass:"language-php line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[s._v("git "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("clone")]),s._v(" https"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会从 Github 克隆最新版本的 pyenv-virtualenv 仓库到本地目录 "),e("code",[s._v("$(pyenv root)/plugins/pyenv-virtualenv")]),s._v("，其中 "),e("code",[s._v("$(pyenv root)")]),s._v(" 是指 pyenv 的安装目录。\n这里要注意，如果之前安装 pyenv 时不是克隆到本地目录 "),e("code",[s._v("~/.pyenv")]),s._v("，那么此处克隆时，要确保克隆到之前 pyenv 的目录下的 "),e("code",[s._v("plugin")]),s._v(" 子目录下（没有则创建之）。\n克隆完成后可以运行 "),e("code",[s._v("which pyenv-virtualenv")]),s._v(" 命令，查看是否安装成功。")]),s._v(" "),e("p",[s._v("第二步，初始化\n在配置文件 "),e("code",[s._v("~/.bash_profile")]),s._v(" 中写入如下内容（这里是针对 "),e("code",[s._v("bash shell")]),s._v(" 而言，其它类型的 "),e("code",[s._v("shell")]),s._v("，配置文件的名称有所差别）：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" pyenv-virtualenv "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv virtualenv-init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("或者直接：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("eval")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("pyenv virtualenv-init -"),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v('"')]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("最后，通过 "),e("code",[s._v("source ~/.bash_profile")]),s._v(" 命令使设置立即生效。")]),s._v(" "),e("h3",{attrs:{id:"pyenv-virtualenv-的使用"}},[s._v("pyenv-virtualenv 的使用")]),s._v(" "),e("h4",{attrs:{id:"创建虚拟环境"}},[s._v("创建虚拟环境")]),s._v(" "),e("div",{staticClass:"language-css line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[s._v("pyenv virtualenv [version] <virtualenv-name>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令可以以某版本的 python 为基础创建名为 "),e("code",[s._v("virtualenv-name")]),s._v(" 的虚拟环境，如果不指定 python 的版本，那么就会以当前的 python 版本为基础创建虚拟环境。\n虚拟环境创建时，会在 "),e("code",[s._v("$(pyenv root)/versions")]),s._v(" 目录下创建一个对应虚拟环境名的目录，这个目录只是一个链接，真身在对应的 python 版本目录下的 "),e("code",[s._v("envs")]),s._v(" 目录下。")]),s._v(" "),e("h4",{attrs:{id:"列出所有的虚拟环境"}},[s._v("列出所有的虚拟环境")]),s._v(" "),e("div",{staticClass:"language-undefined line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pyenv virtualenvs\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令会列出所有存在的虚拟环境，每个虚拟环境会出现两次，分别对应相应虚拟环境目录的真身和链接。")]),s._v(" "),e("h4",{attrs:{id:"激活和关闭虚拟环境"}},[s._v("激活和关闭虚拟环境")]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[s._v("pyenv activate "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("virtualenv-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\npyenv deactivate\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这两个命令分别用于激活和关闭虚拟环境。")]),s._v(" "),e("p",[s._v("另外，需要注意的是，通过 "),e("code",[s._v("pyenv local <version>")]),s._v(" 命令可以为某个目录指定所使用的 python 版本，此处可以把版本名替换为某个虚拟环境名，也就是说可以为某个目录指定所使用的虚拟环境，此时在相应的 "),e("code",[s._v(".python-version")]),s._v(" 文件中记录的就是指定的虚拟环境名。在这种情况下，当进入这个目录时，会自动激活相应的虚拟环境，退出这个目录时，会自动关闭相应的虚拟环境（在 pyenv 中，虚拟环境和正式的 python 版本具有同样的地位，通过 "),e("code",[s._v("pyenv versions")]),s._v(" 查看 python 版本时，虚拟环境也是作为一个独立的 python 版本出现的）。")]),s._v(" "),e("h3",{attrs:{id:"删除虚拟环境"}},[s._v("删除虚拟环境")]),s._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[s._v("pyenv virtualenv"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("virtualenv"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这个命令用于删除某个虚拟环境，通过以下命令也可以达到同样的效果：")]),s._v(" "),e("div",{staticClass:"language-xml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[s._v("pyenv uninstall "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("virtualenv-name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("另外，也可以直接删除虚拟环境对应的目录。")]),s._v(" "),e("h3",{attrs:{id:"pyenv-virtualenv-的其它操作"}},[s._v("pyenv-virtualenv 的其它操作")]),s._v(" "),e("h4",{attrs:{id:"更新-pyenv-virtualenv"}},[s._v("更新 pyenv-virtualenv")]),s._v(" "),e("p",[s._v("如果是使用 Homebrew 安装的 pyenv-virtualenv，那么只需要执行 "),e("code",[s._v("brew upgrade pyenv-virtualenv")]),s._v(" 命令即可将 pyenv-virtualenv 更新至最新版本；\n如果是从 Github 克隆的 pyenv-virtualenv 仓库，那么需要先进入到本地的 pyenv-virtualenv 目录 ，然后执行 "),e("code",[s._v("git pull")]),s._v(" 命令，可以将 pyenv-virtualenv 更新至最新版本。")]),s._v(" "),e("h4",{attrs:{id:"卸载-pyenv-virtualenv"}},[s._v("卸载 pyenv-virtualenv")]),s._v(" "),e("p",[s._v("第一步，把 "),e("code",[s._v("~/.bash_profile")]),s._v(" 里关于 pyenv-virtualenv 的内容删除掉。")]),s._v(" "),e("p",[s._v("第二步，如果是使用 Homebrew 安装的 pyenv-virtualenv，那么只需要执行 "),e("code",[s._v("brew uninstall pyenv-virtualenv")]),s._v(" 命令即可将 pyenv-virtualenv 从计算机卸载；如果是从 Github 克隆的 pyenv-virtualenv 仓库，那么需要将本地的 pyenv-virtualenv 目录删除。")])])}),[],!1,null,null,null);a.default=t.exports}}]);